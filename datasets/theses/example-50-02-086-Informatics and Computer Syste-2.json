{"paragraph_source_docs": [2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2], "paragraphs": ["ա․                                                            բ․ Նկար 2.12. ա) վերահսկվող տարածքը, բ) օբյեկտի առկայությունը վերահսկվող տարածքում: ", "Վերահսկվող  տարածքում  կարող  է  ներթափանցել  ցանկացած  օբյեկտ,  և տարածքի  վերահսկողության  պատասխանատու  անձը  կամ  խումբը  նախօրոք  չի կարող  կանխատեսել,  թե  ինչպիսի  օբյեկտ  կներթափանցի  տարածք:  Նկար  2.12ա-ում պատկերված  երկաթուղային  կայարանում  օբյեկտի  հայտնաբերումը  խիստ  կարևոր  է: ", "Քանի որ վերահսկվող տարածքը բաց է, ապա օրվա ընթացքում արևի դիրքից կամ այլ եղանակային  փոփոխությունից  հնարավոր  է  լույսի  ինտենսիվության  փոփոխություն պատկերում,  նույն  ժամանակ  ներթափանցող  օբյեկտը  անորոշ  է,  ապա  կիրառելով հայտնաբերում,  ինչպես  նկարագրված է  նախորդ` կհայտնաբերենք ցանկացած օբյեկտի [47]: ", "Նկար  2.12ա-ի  և  2.12բ-ի  միջև  ալգորիթմը  կիրառելուց  օբյեկտը  կհայտնաբերվի, ինչպես պատկերված է նկար 2.13-ում: ", "Նկար 2.13. Օբյեկտի հայտնաբերումը վերահսկվող տարածքում: ", "Սակայն դիտարկենք մի տարածք, որում առկա է շարժում առաջացնող օբյեկտ, օրինակ՝  ծառ  (Նկար  2.14):  Օրվա  ընթացքում  անգամ  մեղմ  քամու  առկայության դեպքում վերահսկվող տարածքում գտնվող ծառը կշարժվի: ", "ա.                               բ. Նկար 2.14․ ա) վերահսկվող տարածքը, բ) ծառը տատանման պահին: ", "Նշենք, որ openMP-ն ստանդարտ է C, C++ լեզուներով՝ ստեղծված ծրագրերի զուգահեռացման համար:  Այն նկարագրում է շրջակա միջավայրի փոփոխականները,  գրադարանի  ֆունկցիաները  և  պրոցեդուրաները,  որոնք օգտագործվում  են  բազմահոսքային  ծրագրեր  ծրագրավորելու  համար  ընհանուր հիշողությամբ  բազմապրոցեսային  համակարգերում:  Այն  իրականացնում  է զուգահեռ  հաշվարկ`  օգտագործելով  բազմահոսքությունը  (multi-threading),  որտեղ գլխավոր  հոսքը  ստեղծում  է    \"հպատակ\"  հոսքեր,  և  աշխատանքը  բաժանվում  է նրանց  միջև:  Ենթադրվում  է,  որ  հոսքերը  կատաարվում  են  զուգահեռ, բազմապրոցեսորային մեքենաների վրա, որտեղ պրոցեսների քանակը պարտադիր չէ մեծ կամ հավասար լինի հոսքերի քանակին: ", "Նկար  2.14բ-ում  պատկերված  է  ծառը  քամու  ազդեցության  տակ  տատանման պահը:  Ծառի  տատանման  արդյունքում  պատկերում  առաջանում  է  պիքսելների փոփոխոթւյուն:  Սկզբնական  պատկերը,  որտեղ  ծառը  գտնվում  էր  անշարժ  վիճակում, համեմատենք ընթացիկ պատկերի հետ XOR բիթային համեմատության սկզբունքով: ", "ա.                            բ. Նկար 2․15 . ա) համեմատության արդյունքը, բ) օբյեկտի առկայությունը տեսահսվող տարածքում: ", "Արդյունքում  կստանանք  նկար  2.15-ում  ցույց  տրված  սև  տարածքը:  Ինչպես երևում  է  նկար  2.15ա-ից,  ստացանք  սև  պիքսելներ,  որոնք  միասին  կազմում  են  փոքր սև  տարածքներ,  վերջինս  կանվանենք  շեղումային  տարածքները (որոնք  մեր պարագայում հանդիսանում է կեղծ թիրախներ): ", "Քայլ  1.  Հանգույցների  բազմությունը  բաժանում  ենք  5  մասի,  ամեն  մասում պահպանելով  հանգույցների  անկախությունը:  Վերցնում  ենք  5  մասիվ  և զբաղեցնում արդեն առանձնացված անկախ հանգույցներով: ", "Ինչպես  համոզվեցինք  նախորդ  օրինակից,  ծառի  բացակայության  դեպքում, համեմատությունից  հետո  դիտարկվող  օբյեկտը՝  ձին,  միանգամից  կհայտնաբերվեր: ", "Ծառի  առկայության  դեպքում  որպես  արդյունք  ձիու  սև  պատկերի  հետ  մեկտեղ կստանանք նշված շեղումային սև տարածքները (Նկար 2.16): ", "Նկար 2.16. Շեղումային տարածքների առկայությունը օբյկետի հայտնաբերման դեպքում: ", "Ինչպես  տեսանք,  հայտնվում  են  ավելորդ  տարածքներ,  որը  բերում  է`  առաջին հերթին  օբյեկտների  հայտնաբերման  ալգորիթմի  սխալ  աշխատանքի  և  երկրորդ, ժամանակի ավելորդ կորուստի: ", "Կրիպտոարժութների  գործառույթները կատարվում են ցանցում  առկա հանգույցների  հաստատմամբ,  որը  կատարվում  է  ստացված  տվյալների  հեշավորման  և ցանցի  մյուս  հանգույցներին  ուղարկելու  միջոցով  [52]:  Հեշավորման  հզորությունը,  որը չափվում  է  GH/s-ով,  օգտագործվում  է  կրիպտոարժութային  ցանցի  հեշավորման արագության  չափման  համար:  Արագագործ  ցանցերում  ապահովվում  է  առավել  արագ գործառույթների իրականցում, որը պայմանավորված է մասնակցող հանգույցների թվով և արագ հաշվարկմամբ: Վերոհիշյալ հեշ ֆունկցիայի հիմնական թերություններն են՝ բանալու բացակայությունը և զուգահեռացման իրականացման բարդությունը: Ստեղծվել են տարբեր Sha256-ի իրականացումներ զուգահեռացման ապահովման նպատակով, բայց արդյունքում միայն  հաջողվել  է  տվյալները  բաժանել  մի  քանի  մասի  և  հեշավորել  այդ  մասերը՝ գործածելով ամեն մասի համար Sha256 ծրագրի առանձին օրինակ: ", "Առաջարկվող մեթոդը: Մշակվել է շեղումային տարածքների (կեղծ թիրախների) հայտնաբերման  և  զատման  մեթոդ՝  օբյեկտների  հայտնաբերման  անսխալ աշխատանքը ապահովելու համար: Պատկերում կեղծ թիրախներն ընդկրկող տիրույթը կանվանենք  սխալանքի  տիրույթ:  Պարզ  է,  որ  սխալանքի  տիրույթի  հայտնաբերումը կարևոր դեր ունի, քանի որ  նկարների համեմատման ժամանկ այն զատելու շնորհիվ միայն հնարավոր կլինի գտնել իրական օբյեկտը: ", "Կեղծ  թիրախների  հայտնաբերումը:  Բաց  տարածության  մեջ  անգամ  քամու բացակյության  դեպքում  պոտենցիալ  տատանում  ստեղծող  օբյեկտները  բոլորովին անշարժ չեն մնում, օրինակ՝ ծառի դեպքում տերևները փոքրինչ շարժվում են: ", "Առաջին  անգամ  անվտանգության  տեսախցիկը  տեղադրելիս  ավտոնոմ  կերպով ֆիքսվում  է  առաջին  պատկերը,  որը  որպես  սկզբնական  պատկեր  կպահպանվի համակարգի կողմից: ", "Հայտնաբերման  մեթոդը  կիրառելիս  նկարահանման  ընթացքում  յուրաքանչյուր վայրկյան անց վերցվում է նոր պատկեր և համեմատվում սկզմնական պարտկերի հետ :  Նպատակն  է  գտնել  շեղումային  տարածքները  և  ամեն  անգամ  համեմատություն կիրառելու ընթացքում անտեսել այդ տարածքները: ", "Սկզբնական պատկերը պահպանելուց հետո նկարահանումը շարունակվում է 30 րոպե  (նշված  ժամանակը  նախատեսված  է  կոնֆիգուրացիա  իրագործելու  համար)  և համկարգի կողմից դիտարկվում են պատկերում պոտենցիալ տատանում առաջացնող օբյեկտները,  որոնք  կարող  են  առաջացնել  շեղումային  տարածքներ:  Դիտարկման գործընթացի  ընթացքում  1  վայրկյան  պարբերությամբ  վերցվում  և  պահպանվում  է պատկերը:  Փորձում  ենք  գտնել  և  ֆիքսել  շեղումային  տարածքը  առաջացնող  օբյեկտը իր  ամենամեծ  տատանման  պահին:  Դիտատրկումը  ավարտելուց  հետո  պահպանված պատկերները  մեկ  առ  մեկ  համեատվում  են  սկզբնական  պատկերի  հետ,  որը  հենց կօգնի  գտնել  ամենամեծ  շեղում  ունեցող  պատկերը:  Համեմատության  համար օգտագործվում  է  նախորդ`  2.1.1  ենթավերնագրում  նկարագրված  համեմատություն մեթոդը  [47]:    Այն  պատկերը,  որը  կպարունակի  ամենաշատ  սև  պիքսելները,  այն  էլ կլինի  ամենամեծ  շեղում  ունեցող  պատկերը:  Վերջինս  կրկին  ավտոնոմ  կերպով կընտրվի  համակարգի  կողմից:  Այն  կանվանենք  սխալանքի  պատկեր:  Սխալանքի պատկերի թվային մատրիցը կնշանակենք լատինատառ W տառով: ", "Սխալանքի տիրույթը մեծացնելու սկզբունքը: Քանի որ տարբեր եղանակային պայմաններում  քամու  առկայությունը  կարող  է  բերել  ծառի  ավելի  մեծ  ամպլիտուդով տատանման  (վերջինս  կբերի  սխալանքի  տիրույթի  մեծացման),  և  կարճաժամկետ դիտարկմանան  արդյունքում  հնարավոր  չէ  մեծ  ճշտությամբ  որոշել  սխալանքի տիրույթը,  ապա  հաջորդ  կարևոր  քայլը  կլինի  սխալանքի  տիրույթի  մեծացումը:    Սա կօգնի համակարգին նախատեսել ապագա հնարավոր շեղման տիրույթը: ", "Սխալանքի  տիրույթը մեծացնելու համար կաշխատեցնենք հետևյալ մատրիցային եղանակը W մատրիցի համար: ", "Սա  արվում  է  պատկերների  համեմատման  ընթացքում  սխալի  գործոնը փոքրացնելու  նպատակով:  Դա  կնպաստի  հետագայում  տարածք  ներթափանցած իրական օբյեկտի ավելի ճշգրիտ հայտնաբերման գործում: ", "Մատրիցի  եղանակը:  Պատկերների  վրա  «Blur»  իրագործելու  ալգորիթմի հիմքում  ընկած  է    Կերնելի  մատրիցի  կիրառման  սկզբունքը:  Սխալանքի  տիրույթը մեծացնելու  համար  կիրառում  ենք  նմանատիպ  սկզբունք:  Հնարավոր  է  վերցնել ցանկացած  չափի  Կերնելի  մատրից,  սակայն  այս  օրինակում  պարզության  համար դիտարկենք 3x3 չափի մատրից: ", "Անցնելով  համակարգի  կողմից  պահպանված  սխալանքի  պատկերի (W մատրիցի)՝  յուրաքանչյուր  պիքսելի  վրայով  կատարում  ենք  ստուգում՝  տվյալ  պիքսելը հանդիսանում  է  սև՞,  թե՞  սպիատակ:  Եթե  պիքսելը  սև  է,  ապա  կիրառում  ենք մատրիցային եղանակը (Նկար 2.17): ", "Նկար 2.17. Պիքսելի շրջակայքը սև պիքսելներով լրացնելու մատրիցային եղանակը: ", "i,  j-ին  համարում  ենք  W  մատրիցի  ընթացիկ  պիքսելի  դիրքը,  և  շրջակայքի -j 1;-(i (i; -j -j  1;+(i 1),+j (i; պիքսելները սևացնում ենք: ", "thread-ներ ժամանակ Ժամանակ Գծապատկեր 7.  Ցանցի չափերը. 90.000 հանգույց, հոսքերի քանակը հաջորդաբար 50, 100, 150, 300: ", "Բոլոր  սև  պիքսելների  շուրջը  գտնվող  սպիտակ  պիքսելները  փոխարինելով  սև պքիսելներով՝ սև տիրույթը մեծանում է (Նկար 2.18): ", "Նկար 2.18. Մեծացված տիրույթը: ", "Այնուհետև  ընթացիկ  պատկերում  փորձելու  ենք  գտնել  օբյեկտ՝  անտեսելով նախօրոք հայտնաբերած սխալանքի տիրույթը (W ′ մատրիցի սև պիքսլեները): ", "Հեշ  ֆունկցաիների  վերաբերյալ  կատարված  այլ  հետազոտություններում սովորական  հեշ  ֆունկցիաների  անվտանգության  բարելավման  համար  առաջարկվել  է քաոսային  արտապատկերումների  օգտագործում:  Վերոնշյալ  հեշավորման  ալգորիթմը SHA հեշ ֆունկցիայի փոփոխված տարբերակն է,  որը նույնպես հեշտությամբ ենթարկվել է գրոհման,  և  համարվում  է  ոչ  անվտանգ  հեշավորման  սխեմա  [58]:  Քաոսային  հեշ ֆունկցիային  վերաբերող  աշխատությունները  հիմնականում  ուղղված  են  ելքային  հեշ արժեքների  վիճակագրական  վերլուծության,  գաղտնագրային  վերլուծության  և պատահական  վարքագծի  վրա,  մինչդեռ  հեշ  ֆունկցիայի  ծրագրային  լուծումները, ինչպիսիք են կրիպտոարժույթները և սպամերի հայտնաբերումը, պահանջում են ավելի մեծ արագություն և անվտանգություն: ", "W ′ մատրիցի ցանկացած (i; j) պիքսել իրենից ներկայացնում է եռաչափ վեկտոր =′ Wij ijW ijW ijW (2.13) Բլոկ-սխեմայում  բերված  է  սխալանքի  տիրույթի  անտեսման  միջոցով  պատկերի համեմատման ալգորիթմը (Նկար 2.19): ", "(2.13): ", "Նկար 2.19. Սխալանքի տիրույթի անտեսման միջոցով պատկերների համեմատման ալգորիթմական բլոկ-սխեման: ", "Օպտիմալ  բաշխումը  գաղտնագրային  պատահական  գեներատորի  համար համարվում  է  հավասարաչափ:  Ելքային  շարքերով  ոչ  հավասարաչափ  բաշխումը հանգեցնում  է  նրան,  որ  հարձակվողն  ունենում  է  պատահական  թվերի  գեներացման վիճակագրություն [59]: ", "Մեթոդի  իրականացման  համար  մշակվել  են  հետևալ  քայլերը՝  1)  կեղծ թիրախների որոնումը, 2) ալորիթմ՝ պոտենցյալ կեղծ թիրախների առաջացումը հաշվի առնելու համար և 3) կեղծ թիրախների անտեսման ալգորիթմը։ ", "Մշակված  մեթոդը  նպաստում  է  տեսահսկման  հմակարգի  անսխալ  և համեմատաբար ավելի արագ աշխատանքին: ", "Ներածություն:  Այս  ենթավերնագրում  քննարկում  ենք  օբյեկտների  ճանաչման գործընթացը՝  հիմնված  Լավագույն  ԱՄԲ(<<Արհեստական  մեղուների  բնակավայր>>) մոտեցման  վրա [54-57],  որն էլ  իր  հերթին  հիմնված է  ձևանմուշների համապատասխանեցման  վրա՝  օգտագործելով  թիրախ  օբյեկտին  և  ձևանմուշի օբյեկտին  համապատասխանող  RGB  մակարդակի  հիստագրի  միջև  եղած տարբերությունը:  Հետազոտությունը  նպատակ  ունի  կատարելագործելու լուծման որակը,  որը  չափվում  է՝  ելնելով  թիրախ  օբյեկտի  հայտնաբերման  ճշգրտությունից  և օպտիմալացնելու այն ժամանակը, որն օգտագործվում է խնդիրը լուծելու համար: ", "Ճանաչման  գործընթացը  տարբեր  տեսահսկման  միջավայրերում  ապահովելու համար  ստեղծվել  են  հիմնական  օբյեկտների  տեսակներին  համապատասխան ձևանմուշներ։  Մշակվել  է  նաև  ծրագրային  ֆունկցիոնալ  բլոկ,  որը  որպես  մուտքային տվյալ  վերցնելով  թվային  պատկերը,  վերածում  է  համապատասխան  ֆորմատով ձևանմուշի, որը կարող է օգտագործվել ճանաչման գործընթացում։ ", ": ", "Օրինակ՝ քաղաքային  տարածքներում  փողոցի տեսահսկման  համար  առաջինը  նախապատվությունը  կտրվի  ավտոմեքենաներին, մոտոցիկլերին, մարդկանց, ապա՝ մյուս հնարավոր օբյեկտներին։ Եթե ունենք 10 նմուշ, թիրախն ավտոմեքենա լինելու դեպքում համակարգը առաջինը կհամեատի ամենամեծ նախապատվություն  ունեցող  նմուշի՝  ավտոմեքենայի  հետ,  կճանաչի  թիրախը  և կավարտի աշխատանքը՝ չհամեմատելով մյուս նմուշների հետ։ Այս կերպ կխուսափենք ավելորդ ժամանակի ծախսից։ ", "Առաջին  հերթին  կխոսենք  ձևանմուշի  համապատասխանեցման  ֆունկցիայի մասին,  այնուհետև՝  թե  ինչպես  կարելի  է  լավագույն  ԱՄԲ-ն  կիրառել  օբյեկտների հայտնաբերման համար: ", "Ձևանմուշի համապատասխանեցման ֆունկցիան: Այս աշխատանքում, թիրախ օբյեկտին համապատասխանող RGB մակարդակի հիստագրերը և ձևանմուշի օբյեկտի միջև  եղած  տարբերությունը  ներկայացվում  է  որպես  համապատասխանության  չափի ֆունկցիա (matching measure function): ", "RGB  եռաչափ  վեկտորի  անկախ  կանալներիի  արժեքների  վրա  կառուցված գրաֆիկները  համեմատվել  են  յուրաքանչյուր  տոնային  արժեքի  պիքսելների  քանակի հետ, արդյունքում հաշվարկվել են թիրախի և նմուշի պատկերների հիստագրերը։ ", "Նշանակենք –ը  թիրախ  օբյեկտի  հիստագիրը, –ը՝  ձևանմուշի  օբյեկտի հիստագիրը,  որտեղ  i-ն  կարող  է  ընդունել  արժեք  0-ից  մինչև  255-ը։  Վերջինս  RGB-ի յուրաքանչյուր ուղու մակարդակի արժեքն է, և x=(R,G,B). Այսպիսով՝ որտեղ որտեղ (2.14) որտեղ  (r,c)-ը  ցույց  են  տալիս  ձևանմուշի  պատկերի  վերին  ձախ  անկյան  MxN  չափի հարթության  կոորդինատները՝  թիրախ  օբյեկտի  պատկերի  նկատմամբ:  Եթե  թիրախ պատկերն ունի A×B չափը, ապա և : ", "Ավելի  պարզ,  Նկար  2.20-ը  ցույց  է  տալիս,  թե  ինչպես  պետք  է  ստանալ պատկերի հիստագիրը թիրախի նմուշից, որն ունի 8×6 պիկսել մեծություն և ձևանմուշը պիկսելների  չափով,  որտեղ  Նկար  2.20-ը  ներկայացնում  է  յուրաքանչյուր  պիկսելի արժեքը թիրախի և ձևանմուշի պատկերներում: ", "Նկար 2.20. Թիրախային և նմուշային պատկերների յուրաքանչյուր փիքսելի արժեքը: "], "source_docs_file": "Informatics and Computer Systems.json"}