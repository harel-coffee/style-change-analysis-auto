{"source_docs_file": "Informatics and Computer Systems.json", "paragraph_source_docs": [0, 0, 2, 1, 2, 0, 2, 2, 2, 2, 2, 2, 2, 1, 0, 2, 0, 2, 2, 2, 1, 2, 2, 1, 2, 0, 1, 0, 2, 1, 0, 2, 2, 1, 2, 0, 2, 2, 2, 0, 2, 2, 0, 2, 2, 1, 2, 2, 2, 2], "paragraphs": ["Հեշ  ֆունկցիան  համարվում  է  միակողմանի,  եթե  M  կամայական  երկարության հաղորդագրությունը  փոխակերպվում  է  ոչ  գծային  հաշվարկների  միջոցով  և  արդյունքում ստեղծում  է  h(M)  հեշավորումը,  որն  էլ    կարող  է  ունենալ  հաստատուն  կամ  փոփոխական երկարություն:  Այս  ֆունկցիաները  կարող  են  դասակարգվել  երկու  դասերի՝ գաղտնագրային և ոչ գաղտնագրային: Վերոհիշյալ ոչ գաղտնագրային  հեշ ֆունկցիաներն օգտագործվում են հիշողության և պահեստավորված տվյալների ինդեքսավորման համար։ ", "Գաղտնագրային  հեշ  ֆունկցիաների  կարևոր  հատկություններից  են  բախումը  և կայունությունը:  Հեշ  ֆունկցիայի  բախումը    երկու  տարբեր  հաղորդագրության  (M1  և  M2) հեշերի  արժեքների  համընկնումն  է,  երբ    h  (M1)  =  h  (M2):  Հեշ  ֆունկցիայի  բախումների բացահայտումն  իրականացվում  է  պատահական  մուտքային  արժեքների  փորձարկման եղանակով  [46,  47,  48]:  Կարևոր  է  նշել,  եթե  հեշավորված  տվյալի  իմացությամբ հարձակվողը    կարող  է  գտնել  M  հաղորդագրությունը,  որն  արտահայտվում    է  h  (M)  =  H բանաձևով,  ապա    հեշավորման  ֆունկցիան    կայունություն  ապահովող  չի  համարվում: ", "Քանի որ վերահսկվող տարածքը բաց է, ապա օրվա ընթացքում արևի դիրքից կամ այլ եղանակային  փոփոխությունից  հնարավոր  է  լույսի  ինտենսիվության  փոփոխություն պատկերում,  նույն  ժամանակ  ներթափանցող  օբյեկտը  անորոշ  է,  ապա  կիրառելով հայտնաբերում,  ինչպես  նկարագրված է  նախորդ` կհայտնաբերենք ցանկացած օբյեկտի [47]: ", "Նկար 41.Ավազակույտի ծածկույթները երկչափ ցանցում: ", "Նկար 2.13. Օբյեկտի հայտնաբերումը վերահսկվող տարածքում: ", "Վանգը և Յուն ցույց են տվել, որ Merkle–Damgård սխեման անվտանգ չէ, քանի որ վերոհիշյալ պահանջների կատարումը չի ապահովում [50]։ Հեշ ֆունկցիան  նաև պետք է ունենա Շենոնի շփոթության և դիֆուզիայի կանոններին համապատասխան հեշավորման դրսևորում  [51]։  Շփոթությունն  ապահովվում  է  այն  դեպքում,  երբ  հաղորդագրության հեշավորած ելքի ցանկացած բիթ ստացվում է բանալու տարբեր մասերի օգնությամբ, ինչը դժվարացնում  է  բանալու  և  հաղորդագրության  կապի  բացահայտումը։  Միաժամանակ հեշավորած  ելքի  ցանկացած  բիթ  փոխելու  դեպքում  պետք  է  փոխվի  հաղորդագրության բիթերի կեսը և  պահպանվի հաղորդագրության և հեշ ֆունկցիայի համապատասխանությունը: ", "ա.                               բ. Նկար 2.14․ ա) վերահսկվող տարածքը, բ) ծառը տատանման պահին: ", "ծառի առկայության դեպքում: ", "Նկար  2.14բ-ում  պատկերված  է  ծառը  քամու  ազդեցության  տակ  տատանման պահը:  Ծառի  տատանման  արդյունքում  պատկերում  առաջանում  է  պիքսելների փոփոխոթւյուն:  Սկզբնական  պատկերը,  որտեղ  ծառը  գտնվում  էր  անշարժ  վիճակում, համեմատենք ընթացիկ պատկերի հետ XOR բիթային համեմատության սկզբունքով: ", "ա.                            բ. Նկար 2․15 . ա) համեմատության արդյունքը, բ) օբյեկտի առկայությունը տեսահսվող տարածքում: ", "Արդյունքում  կստանանք  նկար  2.15-ում  ցույց  տրված  սև  տարածքը:  Ինչպես երևում  է  նկար  2.15ա-ից,  ստացանք  սև  պիքսելներ,  որոնք  միասին  կազմում  են  փոքր սև  տարածքներ,  վերջինս  կանվանենք  շեղումային  տարածքները (որոնք  մեր պարագայում հանդիսանում է կեղծ թիրախներ): ", "Ենթադրենք տեսախցիկի միջոցով նկարահանումը սկսելուց որոշ ժամանակ անց պատկերում հայտնվում է օբյեկտ, որը կենդանի է, օրինակ՝ ձի (Նկար 2.15բ): ", "Ինչպես  համոզվեցինք  նախորդ  օրինակից,  ծառի  բացակայության  դեպքում, համեմատությունից  հետո  դիտարկվող  օբյեկտը՝  ձին,  միանգամից  կհայտնաբերվեր: ", "Քայլ 3. 2-րդ քայլում նշված գործողությունները կատարում ենք 2-րդ, 3-րդ, Քայլ 4. Աշխատանքի ավարտի պահը ֆիքսելու երկու եղանակ կա. գագաթ մնացել է թե ոչ: ", "POW  ֆունկցիաների  առավել  տարածված  տեսակն  օգտագործում  է  պրոցեսորի հաշվողական  ռեսուրսները:  Բացի  այդ,  առաջարկվել  են  նաև  POW  այլ  ֆունկցիաներ, ինչպիսիք  են  հիշողության  ֆունկցիաները:  Այս  տեսակի  ֆունկցիաները  ավելի  դժվար  է իրացնել,  քանի  որ  հիշողության  ծանրաբեռնման  համար  անհրաժեշտ  ժամանակը  ավելի շատ  է,  քան  CPU  ծանրաբեռնման  ժամանակը։  Նաև  հիշողության  ֆունկցիաների գործածումը բարդություն  է ստեղծում ցածր պարամետրերով համակարգիչների կիրառման դեպքում:  Հաշվի  առնելով  վերոհիշյալ  թերությունները՝ ատենախոսությունում նախընտրությունը    տրվել  է  պրոցեսորի  հետ  աշխատող  POW  ֆունկցիաներին,  որն այսուհետև կնշվի որպես դասական POW ֆունկցիաներ։ ", "Ինչպես  տեսանք,  հայտնվում  են  ավելորդ  տարածքներ,  որը  բերում  է`  առաջին հերթին  օբյեկտների  հայտնաբերման  ալգորիթմի  սխալ  աշխատանքի  և  երկրորդ, ժամանակի ավելորդ կորուստի: ", "Կրիպտոարժութների  գործառույթները կատարվում են ցանցում  առկա հանգույցների  հաստատմամբ,  որը  կատարվում  է  ստացված  տվյալների  հեշավորման  և ցանցի  մյուս  հանգույցներին  ուղարկելու  միջոցով  [52]:  Հեշավորման  հզորությունը,  որը չափվում  է  GH/s-ով,  օգտագործվում  է  կրիպտոարժութային  ցանցի  հեշավորման արագության  չափման  համար:  Արագագործ  ցանցերում  ապահովվում  է  առավել  արագ գործառույթների իրականցում, որը պայմանավորված է մասնակցող հանգույցների թվով և արագ հաշվարկմամբ: Վերոհիշյալ հեշ ֆունկցիայի հիմնական թերություններն են՝ բանալու բացակայությունը և զուգահեռացման իրականացման բարդությունը: Ստեղծվել են տարբեր Sha256-ի իրականացումներ զուգահեռացման ապահովման նպատակով, բայց արդյունքում միայն  հաջողվել  է  տվյալները  բաժանել  մի  քանի  մասի  և  հեշավորել  այդ  մասերը՝ գործածելով ամեն մասի համար Sha256 ծրագրի առանձին օրինակ: ", "Առաջարկվող մեթոդը: Մշակվել է շեղումային տարածքների (կեղծ թիրախների) հայտնաբերման  և  զատման  մեթոդ՝  օբյեկտների  հայտնաբերման  անսխալ աշխատանքը ապահովելու համար: Պատկերում կեղծ թիրախներն ընդկրկող տիրույթը կանվանենք  սխալանքի  տիրույթ:  Պարզ  է,  որ  սխալանքի  տիրույթի  հայտնաբերումը կարևոր դեր ունի, քանի որ  նկարների համեմատման ժամանկ այն զատելու շնորհիվ միայն հնարավոր կլինի գտնել իրական օբյեկտը: ", "Կեղծ  թիրախների  հայտնաբերումը:  Բաց  տարածության  մեջ  անգամ  քամու բացակյության  դեպքում  պոտենցիալ  տատանում  ստեղծող  օբյեկտները  բոլորովին անշարժ չեն մնում, օրինակ՝ ծառի դեպքում տերևները փոքրինչ շարժվում են: ", "Առաջին  անգամ  անվտանգության  տեսախցիկը  տեղադրելիս  ավտոնոմ  կերպով ֆիքսվում  է  առաջին  պատկերը,  որը  որպես  սկզբնական  պատկեր  կպահպանվի համակարգի կողմից: ", "openMP normal Գծապատկեր 2. 1. CPU-ի մոդելը. Intel i7 2670QM. Ցանցի չափերը. 90.000 հանգույց .Ավազահատիկների քանակը. 9.000.000 ավազահատիկ: ", "Սկզբնական պատկերը պահպանելուց հետո նկարահանումը շարունակվում է 30 րոպե  (նշված  ժամանակը  նախատեսված  է  կոնֆիգուրացիա  իրագործելու  համար)  և համկարգի կողմից դիտարկվում են պատկերում պոտենցիալ տատանում առաջացնող օբյեկտները,  որոնք  կարող  են  առաջացնել  շեղումային  տարածքներ:  Դիտարկման գործընթացի  ընթացքում  1  վայրկյան  պարբերությամբ  վերցվում  և  պահպանվում  է պատկերը:  Փորձում  ենք  գտնել  և  ֆիքսել  շեղումային  տարածքը  առաջացնող  օբյեկտը իր  ամենամեծ  տատանման  պահին:  Դիտատրկումը  ավարտելուց  հետո  պահպանված պատկերները  մեկ  առ  մեկ  համեատվում  են  սկզբնական  պատկերի  հետ,  որը  հենց կօգնի  գտնել  ամենամեծ  շեղում  ունեցող  պատկերը:  Համեմատության  համար օգտագործվում  է  նախորդ`  2.1.1  ենթավերնագրում  նկարագրված  համեմատություն մեթոդը  [47]:    Այն  պատկերը,  որը  կպարունակի  ամենաշատ  սև  պիքսելները,  այն  էլ կլինի  ամենամեծ  շեղում  ունեցող  պատկերը:  Վերջինս  կրկին  ավտոնոմ  կերպով կընտրվի  համակարգի  կողմից:  Այն  կանվանենք  սխալանքի  պատկեր:  Սխալանքի պատկերի թվային մատրիցը կնշանակենք լատինատառ W տառով: ", "Սխալանքի տիրույթը մեծացնելու սկզբունքը: Քանի որ տարբեր եղանակային պայմաններում  քամու  առկայությունը  կարող  է  բերել  ծառի  ավելի  մեծ  ամպլիտուդով տատանման  (վերջինս  կբերի  սխալանքի  տիրույթի  մեծացման),  և  կարճաժամկետ դիտարկմանան  արդյունքում  հնարավոր  չէ  մեծ  ճշտությամբ  որոշել  սխալանքի տիրույթը,  ապա  հաջորդ  կարևոր  քայլը  կլինի  սխալանքի  տիրույթի  մեծացումը:    Սա կօգնի համակարգին նախատեսել ապագա հնարավոր շեղման տիրույթը: ", "openMP Normal Գծապատկեր 5. CPU-ի մոդելը. Intel i3 2100. Ցանցի չափսերը. 250.000 հանգույց .Ավազահատիկների քանակը. 1.000.000 ավազահատիկ: ", "Սա  արվում  է  պատկերների  համեմատման  ընթացքում  սխալի  գործոնը փոքրացնելու  նպատակով:  Դա  կնպաստի  հետագայում  տարածք  ներթափանցած իրական օբյեկտի ավելի ճշգրիտ հայտնաբերման գործում: ", "Արտապատկերումների  վրա  հիմնված  պարզ  քաոսային  հեշ  ֆունկցիաների մեծամասնությունը  մյուս  դասերի  համեմատ  օգտագործում  է  պարզ  ալգորիթմ՝  միաչափ քաոսային  արտապատկերումներով:  Այս  դասի  որոշ  հեշ  ֆունցիաներում  կիրառվում  է տենտային արտապատկերում, որի ելքային շարքը ստացվում է Merkle–Damgård սխեմայով: ", "Հիշենք,  որ  նշված  պրոցեսները  նույն  GPU-ի  ֆիզիկական  պրոցեսները  չեն: ", "Արտապատկերման  վրա  հիմնված  բարդ  հեշ  ֆունկցիաներն  օգտագործում  են բազմաչափ  քաոսային  համակարգեր  իրենց  հեշավորման  ալգորիթմում:  Այս  դասին պատկանող քաոսային ֆունկցիաները  պահանջում են  առավել բարձր արտադրողականություն,  որը  կապված  է  մատրիցների  բազմապատկման  և  գումարման գործողությունների  հետ,  և  մեծ  արտապատկերումների  դեպքում  առաջանում  են  նաև հիշողության հետ կապված խնդիրներ: ", "i,  j-ին  համարում  ենք  W  մատրիցի  ընթացիկ  պիքսելի  դիրքը,  և  շրջակայքի -j 1;-(i (i; -j -j  1;+(i 1),+j (i; պիքսելները սևացնում ենք: ", "thread-ներ ժամանակ Ժամանակ Գծապատկեր 7.  Ցանցի չափերը. 90.000 հանգույց, հոսքերի քանակը հաջորդաբար 50, 100, 150, 300: ", "Գոյություն ունեն նաև նեյրոնային ցանցերի հիման վրա աշխատող քաոսային բարդ կառույցներ: Քաոսային նեյրոնային ցանցն  օգտագործում է քաոսային արտապատկերումը վերջնական արդյունքի ստացման համար: Խիաոյի կողմից առաջարկված հեշ ֆունկցիան, որն  օգտագործում  է  երկշերտ  քաոսային  նեյրոնային  ցանց,  հեշտությամբ  գրոհման  է ենթարկվել [56]։ ", "Նկար 2.18. Մեծացված տիրույթը: ", "Այնուհետև  ընթացիկ  պատկերում  փորձելու  ենք  գտնել  օբյեկտ՝  անտեսելով նախօրոք հայտնաբերած սխալանքի տիրույթը (W ′ մատրիցի սև պիքսլեները): ", "Twait Գծապատկեր 9. Եռաչափ ցանցում համեմատական վերլուծություն, ավազահատիկները , : ", "W ′ մատրիցի ցանկացած (i; j) պիքսել իրենից ներկայացնում է եռաչափ վեկտոր =′ Wij ijW ijW ijW (2.13) Բլոկ-սխեմայում  բերված  է  սխալանքի  տիրույթի  անտեսման  միջոցով  պատկերի համեմատման ալգորիթմը (Նկար 2.19): ", "Հավասարում (3.3)-ը  նկարագրում  է  այս  համակարգի  օրինակը՝ լոգիստիկ արտապատկերումը ընդունելով որպես հիմք: ", "Նկար 2.19. Սխալանքի տիրույթի անտեսման միջոցով պատկերների համեմատման ալգորիթմական բլոկ-սխեման: ", "Եզրակացություն․  Այսպիսով՝  այս  փուլում  մշակվել  է  կեղծ  թիրախների որոնման  և  անտեսման  մեթոդ  [53]:  Մեթոդը  հավելում  է  հանդիսանում  նախորդ`  2.1.1 ենթավերնագրում նկարագրված հայտնաբերման մեթոդի համար։ ", "Մեթոդի  իրականացման  համար  մշակվել  են  հետևալ  քայլերը՝  1)  կեղծ թիրախների որոնումը, 2) ալորիթմ՝ պոտենցյալ կեղծ թիրախների առաջացումը հաշվի առնելու համար և 3) կեղծ թիրախների անտեսման ալգորիթմը։ ", "Pad ֆունկցիան M-ը ընդունում է որպես մուտքային տվյալներ և բաժանում դրանք 32 բիթային բլոկների: Եթե վերջին բլոկն ունենում է  32-ից պակաս բիթ, սկզբում ավելացվում է ‘1’ արժեքի բիթը, այնուհետև ավելացվում են ‘0’ արժեքի բիթերը: Արտադրված բլոկները, որոնք  նշանակվում  են  Mi-  ով,  իրենցից  ներկայացնում  են  XOR՝  պարզ  թվեր  առաջին  32 բիթերով: ", "Ներածություն:  Այս  ենթավերնագրում  քննարկում  ենք  օբյեկտների  ճանաչման գործընթացը՝  հիմնված  Լավագույն  ԱՄԲ(<<Արհեստական  մեղուների  բնակավայր>>) մոտեցման  վրա [54-57],  որն էլ  իր  հերթին  հիմնված է  ձևանմուշների համապատասխանեցման  վրա՝  օգտագործելով  թիրախ  օբյեկտին  և  ձևանմուշի օբյեկտին  համապատասխանող  RGB  մակարդակի  հիստագրի  միջև  եղած տարբերությունը:  Հետազոտությունը  նպատակ  ունի  կատարելագործելու լուծման որակը,  որը  չափվում  է՝  ելնելով  թիրախ  օբյեկտի  հայտնաբերման  ճշգրտությունից  և օպտիմալացնելու այն ժամանակը, որն օգտագործվում է խնդիրը լուծելու համար: ", "Ճանաչման  գործընթացը  տարբեր  տեսահսկման  միջավայրերում  ապահովելու համար  ստեղծվել  են  հիմնական  օբյեկտների  տեսակներին  համապատասխան ձևանմուշներ։  Մշակվել  է  նաև  ծրագրային  ֆունկցիոնալ  բլոկ,  որը  որպես  մուտքային տվյալ  վերցնելով  թվային  պատկերը,  վերածում  է  համապատասխան  ֆորմատով ձևանմուշի, որը կարող է օգտագործվել ճանաչման գործընթացում։ ", ": ", "Օրինակ՝ քաղաքային  տարածքներում  փողոցի տեսահսկման  համար  առաջինը  նախապատվությունը  կտրվի  ավտոմեքենաներին, մոտոցիկլերին, մարդկանց, ապա՝ մյուս հնարավոր օբյեկտներին։ Եթե ունենք 10 նմուշ, թիրախն ավտոմեքենա լինելու դեպքում համակարգը առաջինը կհամեատի ամենամեծ նախապատվություն  ունեցող  նմուշի՝  ավտոմեքենայի  հետ,  կճանաչի  թիրախը  և կավարտի աշխատանքը՝ չհամեմատելով մյուս նմուշների հետ։ Այս կերպ կխուսափենք ավելորդ ժամանակի ծախսից։ ", "Առաջին  հերթին  կխոսենք  ձևանմուշի  համապատասխանեցման  ֆունկցիայի մասին,  այնուհետև՝  թե  ինչպես  կարելի  է  լավագույն  ԱՄԲ-ն  կիրառել  օբյեկտների հայտնաբերման համար: ", "Նկար 44.Նեյրոնային ցանցը մինչ ուսուցումը: ", "RGB  եռաչափ  վեկտորի  անկախ  կանալներիի  արժեքների  վրա  կառուցված գրաֆիկները  համեմատվել  են  յուրաքանչյուր  տոնային  արժեքի  պիքսելների  քանակի հետ, արդյունքում հաշվարկվել են թիրախի և նմուշի պատկերների հիստագրերը։ ", "Նշանակենք –ը  թիրախ  օբյեկտի  հիստագիրը, –ը՝  ձևանմուշի  օբյեկտի հիստագիրը,  որտեղ  i-ն  կարող  է  ընդունել  արժեք  0-ից  մինչև  255-ը։  Վերջինս  RGB-ի յուրաքանչյուր ուղու մակարդակի արժեքն է, և x=(R,G,B). Այսպիսով՝ որտեղ որտեղ (2.14) որտեղ  (r,c)-ը  ցույց  են  տալիս  ձևանմուշի  պատկերի  վերին  ձախ  անկյան  MxN  չափի հարթության  կոորդինատները՝  թիրախ  օբյեկտի  պատկերի  նկատմամբ:  Եթե  թիրախ պատկերն ունի A×B չափը, ապա և : ", "Ավելի  պարզ,  Նկար  2.20-ը  ցույց  է  տալիս,  թե  ինչպես  պետք  է  ստանալ պատկերի հիստագիրը թիրախի նմուշից, որն ունի 8×6 պիկսել մեծություն և ձևանմուշը պիկսելների  չափով,  որտեղ  Նկար  2.20-ը  ներկայացնում  է  յուրաքանչյուր  պիկսելի արժեքը թիրախի և ձևանմուշի պատկերներում: ", "Նկար 2.20. Թիրախային և նմուշային պատկերների յուրաքանչյուր փիքսելի արժեքը: "]}