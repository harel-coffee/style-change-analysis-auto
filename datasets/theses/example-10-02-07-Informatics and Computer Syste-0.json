{"paragraph_source_docs": [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], "source_docs_file": "Informatics and Computer Systems.json", "paragraphs": ["Հեշ  ֆունկցիան  համարվում  է  միակողմանի,  եթե  M  կամայական  երկարության հաղորդագրությունը  փոխակերպվում  է  ոչ  գծային  հաշվարկների  միջոցով  և  արդյունքում ստեղծում  է  h(M)  հեշավորումը,  որն  էլ    կարող  է  ունենալ  հաստատուն  կամ  փոփոխական երկարություն:  Այս  ֆունկցիաները  կարող  են  դասակարգվել  երկու  դասերի՝ գաղտնագրային և ոչ գաղտնագրային: Վերոհիշյալ ոչ գաղտնագրային  հեշ ֆունկցիաներն օգտագործվում են հիշողության և պահեստավորված տվյալների ինդեքսավորման համար։ ", "Գաղտնագրային  հեշ  ֆունկցիաների  կարևոր  հատկություններից  են  բախումը  և կայունությունը:  Հեշ  ֆունկցիայի  բախումը    երկու  տարբեր  հաղորդագրության  (M1  և  M2) հեշերի  արժեքների  համընկնումն  է,  երբ    h  (M1)  =  h  (M2):  Հեշ  ֆունկցիայի  բախումների բացահայտումն  իրականացվում  է  պատահական  մուտքային  արժեքների  փորձարկման եղանակով  [46,  47,  48]:  Կարևոր  է  նշել,  եթե  հեշավորված  տվյալի  իմացությամբ հարձակվողը    կարող  է  գտնել  M  հաղորդագրությունը,  որն  արտահայտվում    է  h  (M)  =  H բանաձևով,  ապա    հեշավորման  ֆունկցիան    կայունություն  ապահովող  չի  համարվում: ", "Մասնավորապես, երկչափ և եռաչափ ցանցերի դեպքում կունենանք Նկար 41 և 42- ում բերված պատկերները, որտեղ միևնույն գույնով նշված գագաթներն անկախ են: ", "Նկար 41.Ավազակույտի ծածկույթները երկչափ ցանցում: ", "Հեշավորման  ֆունկցիաների  մեծամասնությունը,  ինչպիսիք  են՝  MD4,  MD5,  MD6, SHA1  և  SHA2  հեշ  ֆունկցիաները,  օգտագործում  են  Merkle–Damgård  սխեման  և  բիթային գործողություններ  կատարում  մուտքային  հաղորդագրության  վրա՝      վերջնական  հեշ արժեքը ստանալու նպատակով [47, 49, 50]։ ", "Վանգը և Յուն ցույց են տվել, որ Merkle–Damgård սխեման անվտանգ չէ, քանի որ վերոհիշյալ պահանջների կատարումը չի ապահովում [50]։ Հեշ ֆունկցիան  նաև պետք է ունենա Շենոնի շփոթության և դիֆուզիայի կանոններին համապատասխան հեշավորման դրսևորում  [51]։  Շփոթությունն  ապահովվում  է  այն  դեպքում,  երբ  հաղորդագրության հեշավորած ելքի ցանկացած բիթ ստացվում է բանալու տարբեր մասերի օգնությամբ, ինչը դժվարացնում  է  բանալու  և  հաղորդագրության  կապի  բացահայտումը։  Միաժամանակ հեշավորած  ելքի  ցանկացած  բիթ  փոխելու  դեպքում  պետք  է  փոխվի  հաղորդագրության բիթերի կեսը և  պահպանվի հաղորդագրության և հեշ ֆունկցիայի համապատասխանությունը: ", "Քաոսային մեթոդները բավարարում են վերոհիշյալ կանոններին, սակայն քաոսային հեշ ֆունկցիաների մեծամասնությունը որպես ոչ անվտանգ սխեմա օգտագործում է Merkle– Damgård կամ այդ սխեմայի տարբերակը: ", "Վերոհիշյալ  դրույթների  հետ  մեկտեղ,  բազմաչափ  կամ  կիսապատահական քաոսային  արտապատկերումները  նվազեցնում  են  դրանց  կատարողականության ցուցանիշները  մասնավորապես՝  արագությունը  և  անվտանգությունը:  Այս  ֆունկցիաների վրա  հաջող  գրոհներ  են  իրականացվել  վերջիններիս  թույլ  գաղտնագրային  բնույթի պատճառով:  Վերոնշյալ  հատկություններով  հեշ  ֆունկցիան  կիրառվում  է  որպես գաղտնագրային արձանագրությունների, անվտանգ գործարքների և կրիպտոարժույթների հիմնական տարր: ", "Որոշ  կրիպտոարժույթներ  օգտագործում  են  Sha256  HashCash  ֆունկցիան,  որպես՝ այսպես  կոչված  «աշխատանքի  ապացույց»,  որն  ապահովում  է  հանգույցների  կատարած գործառույթների  անվտանգությունը։  HashCash-ն  օգտագործվում  է  նաև  սպամերի կանխարգելման  համար՝    ստիպելով  գրոհող  կողմին  ծախսել  որոշակի  ժամանակ ցանկացած  հաղորդագրության և էլեկտրոնային նամակին կից ուղարկվող հեշի ստեղծման հաշվարկների  վրա:  Եթե  հաղորդագրությունը  կամ  էլեկտրոնային  նամակը  ստացվում  է առանց հեշի, կամ ստացված հեշը վավերականացում չի ացնում, ապա այն մերժվում է և համարվում՝  սպամ:  HashCash-ը  Proof-of-Work  (POW)  ֆունկցիայի  իրականացումն  է,  որը հայտնի  է  նաև,  որպես  աշխատանքային  ֆունկցիա,  հետաձգման  ֆունկցիա  կամ պայքարի համար: Այս ֆունկիցայի գաղափարը այն է, որ նախքան հարցում ուղարկելը այդ հարցմանը պետք է կցել լուծված որոշակի հաշվողական խնդիր, որն այնուհետև հնարավոր է  վավերացնել  հարցումն  ընդունող  կողմում:  Այսպիսով,  սահմանափակ  հաշվողական ռեսուրսների  պատճառով  վերոհիշյալ  հարցումների  ընդհանուր  քանակը,  որը  կարող  է ուղարկել  մեկ  համակարգիչը,  բավականին  նվազում  է  և  դառնում  սահմանափակ:  Այս լուծումն  օգտագործվում  է  էլեկտրոնային  փոստով  ուղարկվող  սպամերի  քանակը նվազեցնելու համար: ", "Այս ծրագրաապարատային զուգահեռ հաշվարկման ճարտարապետությունը թույլ է տալիս բարձրացնել հաշվողական արտադրողականությունը:  Այսինքն  CUDA-ի  միջոցով  վերը  նշված  ալգորիթմը աշխատեցնում  ենք  վիդեոքարտի(GPU)  վրա:  Հիշեցնեմ  որ  GPU-ն  ունի  բազմաթիվ միկրոպրոցեսներ,  որոնց  քանակությունը  զգալի  շատ  է  CPU-ի  պրոցեսորների քանակից:  Օգտագործողը  կարող  է  կանչել  1-512  հոսքերից  կազմված  բլոկը:  Իսկ բլոկերն  էլ  իրենց  հերթին  կազմում  են  միկրոպրոցեսների  ամբողջ  ցանցը:  Ամեն հոսք  բլոկի  մեջ  ունի  յուրահատուկ  ID:  Բլոկները  նույնպես  ընդհանուր  ցանցի  մեջ ունեն  յուրահատուկ  ID:  Ինչպես  նաև  կան  տարբեր  հիշողություններ,  որոնց  հետ հոսքերը  տարբեր  արագությամբ  են  աշխատում:  Նկար  43-ից  GPU-ի  աշխատանքը ավելի  պարզ  է  դառնում:  CUDA  տեխնոլոգիա  օգտագործող  ծրագրային համակարգի  արագությունը  կախված  է  ինչպես  հիշողության` այնպես  էլ  բլոկերի  և հոսքերի  հարաբերակցության  ճիշտ  ընտրությունից:  Օրինակ  միևնույն  ծրագրի աշխատանքը 2 բլոկ' յուրաքանչյուրում 20-ական հոսք և 1 բլոկ 40-ական հոսքերով կարող է ժամանակային 4 անգամ տարբերություն տալ: "]}