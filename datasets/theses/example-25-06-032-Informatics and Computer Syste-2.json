{"paragraphs": ["Նկարահանման  ընթացքում  յուրաքանչյուր  վայրկյան  անց  վերցվում  է  նոր պատկեր  և  համեմատվում  սկզմնական  պատկերի  հետ:  Ենթադրենք  նկարահանումը սկսելուց  30  վայրկյանն  անց  երկաթուղային  հանգույցում  հայտնվել  է  օբյեկտ  (Նկար Նկար 2.2. Օբյեկտի առկայոթյոընը արգելված տարածքում: ", "Քանի  որ  այգորիթմը  աշխատում  է  ուղիղ  ռեժիմով  նկարահանմանը  զուգահեռ, այն  կստանա  նոր  պատկերը,  որում  առկա  է  օբյեկտը  և  կկիրառի  XOR  բիթային համենատություն  սկզբնական  պատկերի  նկատմամբ:  Հետևաբար,  կստանանք  Նկար Նկար 2.3․ XOR բիթային համենատության արդյունքը: ", "Աղյուսակ 5․ Ձևավորված բանալու ձևաչափը Տվյալների հերթականությունը  M Անհրաժեշտ ծավալը M * N M * N Քայլ նշված հարցումների դասակարգումն իրականացվում է գաղտնահամակարգին  տրված    կարգաբերումների  միջոցով։  Հարցում  կատարած  սարքի կարգաբերումների  ստացման  համար  օգտագործվում  է  հարցման  մեջ  առկա  ինտերնետ իրի  հասցեն  կամ  հնարավորության  դեպքում`  գլխամասում  առկա  եզակի  MAC  հասցեն։ ", "Հավասարության ատրիբուտը հայտնի է որպես ակտիվացման ֆունկցիա, որ ժամանակավոր և տեղական տեղեկատվություն է տրամադրում տվյալ -ի մասին 𝑃𝑃𝑃𝑃𝑖𝑖 և  հետեւաբար  այն  անվանվում  է,  այսպես  կոչված, -ի  կարճաժամկետ 𝑃𝑃𝑃𝑃 𝑠𝑠𝑖𝑖 𝑎𝑎𝑖𝑖 հիշողություն: ", "Աղյուսակ 6. Հաղորդագրությունների ձևաչափը KFI Մարմին VH Salt N / 2 bit Գլխամաս Referrer | UID | MAC Քայլ  3 ․1-ում  օգտագործելով  հարցման  գլխամասում  առկա  PKID-ում  գտնվում  է համապատասխան  բանալին,  որի  միջոցով  կատարվում  է  հարցման  նույնականացում  և հրամանի բացահայտում։  Վերոհիշյալ գործողություններն իրականացվում են ատենախոսությունում  մշակված  ալգորիթմի  միջոցով,  որը  բաղկացած  է  չորս  հիմնական փուլից։ ", "𝑃𝑃𝑃𝑃 𝑎𝑎𝑖𝑖 Նեյրոնային  ցանցեր  կառուցելու  համար  օգտագործվել  են  մի  շարք  ակտիվացման ֆունկցիաներ,  որոնցից  քայլ/step  ֆունկցիան  ամենապարզն է:  Քայլ/step ակտիվացիոն  ֆունկցիայի  միջոցով -ի  ելքային  տվյալները  կարող  են  ընդունել կամ կամ ,  կախված  ակտիվացիոն  ֆունկցիայի  արժեքից  ցածր  կամ  բարձր 𝑃𝑃𝑃𝑃 լինելուց (Նկար 32): Այլ կերպ ասած, ունենք հետևյալը. 𝑦𝑦𝑖𝑖 = � որտեղ եթե հակառակ դեպքում 𝑎𝑎𝑖𝑖 > 0 𝑢𝑢 𝑎𝑎𝑖𝑖 = �� 𝑤𝑤𝑖𝑖𝑗𝑗𝑥𝑥𝑗𝑗 − 𝑠𝑠𝑖𝑖 Այնուամենայնիվ, աղմուկը  զտելու համար, հետևաբար բարելավվելու և իրական 𝑗𝑗=1 կայուն  վիճակի  հասնելու  նկատառումներով  որոշ  նեյրոնային  ցանցերի  համար սովորաբար օգտագործվում է սիգմոիդ ակտիվացումը, արտահայտված Նկար 33-ի ձևով. որտեղ 𝑦𝑦𝑖𝑖 = 𝑓𝑓𝑖𝑖(𝑎𝑎𝑖𝑖) = −𝑐𝑐𝑎𝑎𝑖𝑖 𝑢𝑢 𝑗𝑗=1 𝑎𝑎𝑖𝑖 = �� 𝑤𝑤𝑖𝑖𝑗𝑗𝑥𝑥𝑗𝑗 − 𝑠𝑠𝑖𝑖 Նկար 32.Քայլ/Step ակտիվացիոն ֆունկցիա: ", "𝑁𝑁 𝐶𝐶𝑘𝑘   = � 𝑃𝑃𝑃𝑃𝑖𝑖 𝑙𝑙=0 ⊕ 𝐾𝐾𝐾𝐾𝑖𝑖; (2.9) Այնուհետև  կատարվում  է  բացահայտած  հրամանի  հեշավորում`  օգտագործելով  P 𝐶𝐶𝑖𝑖   = (𝐶𝐶𝑘𝑘 ∗ 𝐶𝐶𝑁𝑁) ⊕  KFI; տողը  որպես  բանալի։  Հարցման  մարմնում  առկա  VH  հեշի  արժեքի  և  Hp(C  +  Salt)  հեշի արժեքի հավասարության դեպքում հարցումը համարվում է վավեր, և շարժական բանալին նոր հարցում է կատարում  այդ հրամանով  համապատասխան ինտերնետ իրին։ Հակառակ դեպքում  հարցումը  համարվում  է  անվավեր։  Գոյություն  ունի  անվավեր  հարցումների սահմանափակում,  որի  գերազանցման  դեպքում  կատարվում  է  հաջորդ  բանալու հաշվարկումը։ ", "Նկար 2.4․ Սկզբնական պատկերը բաժանված 4 մասի: ", "«Մինիմում ավազահատիկներ և  մաքսիմալ հեռավորություն» խնդիր գրավիչ է  այնքանով,  որ  հանդիսանում  են  իրական  կյանքում  որոշ  բնական  երևույթների նկարագիր  ավազակույտի  մոդելի  վրա:  Մինչև  այժմ  չունենալով  ճշգրիտ  լուծում տվյալ  խնդրի  համար,  նեյրոնային  ցանցերի  օգտագործումը  արդիական  նպատակ դարձավ:  Նեյրոնային  ցանցերի  մշակման  հարմարավեր  միջոց  է  Neuroph  Studio-ն [51],  որը  հանդիսանում  է  նեյրոնային  ցանցերի  ֆրեյմվորկ  ստեղծված Java ծրագրավորման  լեզվի  միջոցով  և  նպատակաուղված  է  ընհանուր  նեյրոնային ցանցերի նախագծման և մշակման համար: Neuroph Studio-ն  պարունակում է նաև լավ  նախագծված  բաց  կոդով  Java  գրադարան  քիչ  քանակությամբ  նեյրոնային ցանցերի հիմնական  աշխատանքը սիմուլացնող հիմնական դասերի ամբողջությամբ:  Այն  ունի  նաև  շատ  հարմարատավետ  գրաֆիկական  միջավայր, որը հնարավորություն է տալիս առանց որևէ ծրագրավորման լեզվի տիրապետելու և  օգտագործելու  մշակել  նեյրոնային  ցանցեր:  Մեր  կողմից  նույնպես  ընտրվել  է Neuroph  Studio-ն  «մինիմում  ավազահատիկներ  և    մաքսիմալ  հեռավորություն» խնդրի ուսումնասիրության շրջանակներում նեյրոնյանին ցանցերի ճարտարապետության  մշակման,  տեստավորման  և  արդյունքների  ստացման համար: ", "Մասնավորապես, մեր կողմից առաջարկվող տարբերակում  [61] ընտրվել են բազմաշերտ բաղադրիչ(multilayer perceptron) տիպի նեյրոնային ցանցերի տեսակը մեկ մուտքային և մեկ ելքային նեյրոններով: Նեյրոնային ցանցերում օգտագործվել են  Bias  նեյրոնները,  որպես  փոխանցման  ֆունկցիա  ընտրվել  է  սիգմոիդ  տիպը, մինչդեռ  ուսուցողական  կանոնը  մշակվում  է  back-propagation  մեթոդաբանության հիման վրա: ", "Դիտարկված  նեյրոնային  ցանցերում  կա  միայն  մեկ  մակադակի  թաքնված շերտ  (Նկար  34),  որի  նեյրոնների  քանակությունը  տարբերակվում  է  նշված համեմատական անալիզներում: ", "Սկզբնական    պատկերի  յուրաքանչյուր՝  հատվածի  համար  հաշվարկում  ենք  3 առանձին  մեծություն՝  կարմիր,  կանաչ  և  կապույտ  գույների  ինտենսիվության գործակիցները (օր. ):  Յուր.  գործակից  որոշվում  է  տվյալ հատվածում  բոլոր  պիքսելերի  համպատասխան  գույնի(օր.  կարմիրի)  թվային արժեքների  միջին  թվաբանականով  (բանաձև  2.2-2.5):  Այլ  կերպ  ասած  գործակիցը ցույց է տալիս հատվածում գույնի միջին ինտենսիվությունը: ", "կստանանք բանաձև 2-ի միջոցով, 2-րդի համար՝ բանաձև 3-ի, 3-րդի համար՝ բանաձև (2.2) (2.3) (2.4) (2.5) Պատկերի  համար  կախված  տեղանքից  և  հնարավոր  եղանակային փոփոխություններից՝  որոշվում  է  σ  ընդհանուր  շեմային  գործակիցը  տեսախցիկը առաջին անգամ տեղադրելիս: ", "(𝑁𝑁  −  𝑖𝑖  −  1)   ∗  𝑁𝑁  +  𝑗𝑗 համար  կատարվում  է  մատրիցի  «transpose»  փոխարկումը  և  սյուների  փոխարկում։  Սյան փոխարկման  համար  ամեն  փոխարկվող  մասնիկին  համապատասխան  մասնիկը հաշվարկվում է հետևյալ կերպ ։ ", "Վերը  նկարագրված  ալգորիթմը  ախատեցվում  է  E  պատկերի  համար  և հաշվարկվում են , , , գործակիցները (2.6): Այնուհետև հաշվարկում ենք  ընթացիկ  և  սկզբնական  պատկերների  գունային  արժեքների  տարբերությունները յուրաքանչյուր հատվածի համար (2.7): ", "Հաշվի  առնելով rotor-router  համակարգի  առանձնահատկությունները նկարագրված բաժին 2.3-ում, նկատվել է դրա նպատակահարմար կիրառումը նաև կլաստերային  համակարգերում:  Արդյունքում  ստացվել  է  կանխատեսումների տեսանելի  արդյունք  SandScheduler-ի  միջոցով,  որոնցից  է,  օրինակ՝  2.3  բաժնում բերված հիփոթեզը: ", "Կլաստերային  համակարգի  սիմուլացիան  կատարվել է  երկչափանի քառակուսային  ցանցի  վրա,  որտեղ  ամեն  հանգույց  իրենցից  ներկայացնում  են առանձին  հաշվողական  բլոկ,  այլ  կերպ  ասած  համակարգիչ  իր  առանձին հիշողության  տիրույթով:  Կախված  տվյալ  հանգույցում  առաջադարանքների ծանրաբերնվածության,  տվյալ  հանգույցն  է  որոշում  ուղարկել  առաջադրանքը հարևան  հանգույցներից  մեկին  թե  ոչ:  Դիտարկված  մոդելում  գոյություն  ունեն հետևյալ նախապայմանները. •  Մոդելում ունենք նախորոք մուտքագրված քանակությամբ քառակուսային  ցանցի  տեսք  ունեցող  համասեռ  հանգույցները, այսինքն  հանգույցներում  տեղադրված  հիշողության  տիրույթները, պրոցեսսները,  օպերատիվ  հիշողությունները  և  մնացած  բոլոր տեխնիկական պարամետրները նույն են: ", "•  Ամեն հանգույց ունի «հասանելի»  տիրույթ առաջադրանքների համար, որտեղ կարող են  տեղավորվել վերջավոր քանակությամբ խնդիրներ(տվյալ  դեպքում  ամենաշատը  3  առաջադրանք),  և առաջադրանքի տեղավորվելուն պես այն դիտարկվում է որպես արդեն կատարվող:  Եթե  հանգույցի  «հասանելի»  տիրույթում  կան  3 արաջադրանքներ,  ապա  համարվում  է,  որ  տվյալ  հանգույցը աշխատում է միաժամանակ այդ 3 առաջադրանքների իրականացման շուրջ: ", "•  Հանգույցները միացված են իրար կապերով և ամեն հանգույց կարող է ունենալ  ամենաշատը  4  հարևան  (համակարգում  դիտարկվում  է  նաև հանգույցների անսարքության դեպքեր տեխնիկական պատճառներով) •  Մուտքագրվող  առաջադրանքերը  միանման  են  և  տարբերվում  են կատարման համար անհրաժեշտ ժամանակով միայն: Ինչպես նաև կա հնարավորություն մուտքագրվող առաջադրանքերին տալ առաջնահերթություն: ", "երկու եղանակով. Ինչպես արդեն նշվել է, առաջադրանքների տեղաբաշխումը կատարվում է մոդելի  աշխատանքային սկբունքի, որի դեպքում համակարգում  առաջադրանքների  տեղաբաշխումը կատարվում է ավազակույտում  ավազահատիկների  փլուզման  սկզբունքով:  Ավազակույտի մոդելում  ինչպես  արդեն նշվել է ամեն հանգույցին համապատասխանեցված է  արժեք,  որը  համապատասխանում  է  այդ  հանգույցում  ավազահատիկների քանակին:  Բակը,  Թանգը  եւ  Ուիզենֆիլդը  դիտարկել  են  ցանցի  վրա ավազահատիկների  պատահական  տեղադրման  գործընթացը  ցանցում: ", "-ում  այդ  փոփոխված  պիքսելների առկայությունը  հայտնաբերելու  նպատակով  հաշվարկվում  է  բանաձև  9-ում  բերված անհավասարությունը: ", "Նկար 35.SandScheduler ծրագրային փաթեթ: ", "դատարկ/ֆիկտիվ  առաջադրանքներից իրական  առաջադրանքների բաշխման նկատառումներով: Տվյալ դեպքում ցանցի ամեն հանգույց ունենում է  ուղղորդիչ  բնորոշ  rotor-router  մոդելին  և    իրական  առագադրանքը  մուտք լինելով որևէ հանգույցի, զբաղեցնում է տվյալ հանգույցի հասանելի տիրույթը վերջինիս  ազատ  լինելու  դեպքում,  կամ  տեղափոխվում  է  հարևան  հանգույց ըստ տվյալ հանգույցի ուղղորդիչի ուղղության: Այս գործողությունը կրկնվում է այնքան  մինչև  առաջադրանքը  կգտնի  ազատ  հանգույց  և  կզբաղեցնի համապատասխան  տիրույթը:  Հիշեցնեմ  որ  փակ  rotor-router  համակարգում ավազահատիկը  պտտվելով  վերջավոր  քանակությամբ՝  անցում  է  կատարում բոլոր  հանգույցներով  և  վերադառնում  է  հին  դիրքին,  ինչպես  նաև վերադառնալուն պես մոդելը արդեն ընդունած է լինում սկզբնական վիճակը: ", "Ինչպես  նաև  անդրադառնալով  rotor-router  համակարգի  բաժին  2,3-ում նկարագրված  առանձնահատկությանը,  կարող  ենք  համոզված  լինել,  որ ստատիկ(կատարման  ժամանակը  անվերջ  է)  առաջադրանքների  մեկ  կետից ավելացման  դեպքում  կլաստերային  համակարգում  կունենանք  համասեռ բաշխվածություն  տվյալ  հանգույցի  շուրջ,  կամ  այլ  կերպ  ասված,  մեկ հանգույցում  առաջադրանքներ  ավելացնելու  դեպքու  կարող  ենք  համոզված լինել,  որ  տվյալ  հանգույցից հեռավորություն  ունեցող  հանգույցում  լցված առաջադրանքների քանակը չի կարող ավել լինել հեռավորության վրա գտվնող  հանգույցի  առաջադրանքների  քանակից:  Ասեմ  ավելին  մեր  կողմից r − 1 առաջ է քաշվել հիպոթեզ, որ դինամիկ(կատարման ժամանակը վերջավոր է) խնդիրների  դեպքում  ևս  կունենանք  նույն  պատկերը:  Տրված  հիպոթեզի իսկությունը երևում է SandScheduler ծրագրային համակարգի միջոցով նկար Նկար 36. SandScheduler-ը rotor-router վիճակում: ", "Նկար 2.6․  Երկրորդ պատկերում առկա երեք օբյեկտները, որոնցից միայն երկուսն է աչքին հասանելի (ավտոմեքենաները), իսկ երրորդը թաքնված է (որը փոքր կենդանի է): "], "source_docs_file": "Informatics and Computer Systems.json", "paragraph_source_docs": [2, 2, 0, 1, 0, 1, 0, 2, 1, 1, 1, 2, 2, 0, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2]}