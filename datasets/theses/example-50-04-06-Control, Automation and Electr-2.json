{"source_docs_file": "Control, Automation and Electrical Engineering.json", "paragraph_source_docs": [2, 2, 2, 2, 2, 1, 2, 2, 4, 4, 1, 4, 2, 0, 2, 2, 2, 2, 0, 3, 2, 2, 2, 4, 2, 0, 2, 3, 1, 1, 1, 1, 2, 2, 4, 2, 2, 2, 2, 2, 1, 2, 2, 2, 4, 2, 0, 3, 2, 2], "paragraphs": ["  Դիտարկման  ավարտի չափորոշիչի  ընտրություն:  Դա  կարող  է լինել դիտարկումների  ֆիքսված  քանակ,  կամ  դիտարկումները  կարող  են  կատարվել, քանի  դեռ  դրանք  փոքրացնում  կամ  զգալիորեն  փոքրացնում  են  հատումների ընդհանուր քանակը: ", "Դիտարկենք հատումների թվի նվազեցումը երկու ռանգերի համար [54]: Ենթադրենք, մեզ տրված է G = (R1, R2, W) գրաֆը, որտեղ R1-ը առաջին ռանգի տարրերի բազմությունն է,  R2-ը՝  երկրորդ,  իսկ  E-ն՝  շղթաների  բազմությունը:  Առաջին  ռանգի  գագաթների դիրքերը  համարելով  ֆիքսված,  կդասավորենք  երկրորդ  ռանգի  տարրերը:  Ինչպես արդեն նշվել է, այդ խնդիրն ունի NP-բարդություն, և դրա մոտավոր լուծումները գտնելու համար կոգտագործվեն մոտավոր լուծման մեթոդներ: ", "Վերոհիշյալ  մեթոդներից  մեկը  հիմնված  է  տեսակավորման  ալգորիթմների  վրա  [57, նվազագույնի:  Հեշտ  է  նկատել,  որ  ընտրված  երկու  տարրերի  համար՝  u  ∈  R2  և  v  ∈  R2, դրանց  հարևան  տարրերի  հետ  հատումների  քանակը  կախված  է  միայն  այդ  երկու տարրերի  հարաբերական  դիրքերից:  Այսպիսով,  կարող  ենք  դիտարկել  հատումների - 59 - քանակը՝ փոխելով տրված ռանգում տարրերի հարաբերական դիրքերը: Հենց տարրերի հարաբերական դիրքերը փոխելու վրա էլ հիմնված են  տեսակավորման ալգորիթմներն օգտագործող  մեթոդները:  Այդպիսի  մեթոդները  պետք  է  արագ  հաշվեն  հատումների պոտենցիալ  քանակը:  Դա  կարող  է  կատարվել  ուղակի  O(|W|2)  ժամանակում  կամ լավարկել մինչև O( ), որտեղ KUV-ն հատումների քանակն է, որն առաջանում է u և v տարրերի  զույգի  միջոցով:  Հնարավոր  հատումների  հաշվարկը  յուրաքանչյուր  զույգի դեպքում  պետք  է  կատարել  միայն  մեկ  անգամ  (դա  էլ  հենց  տալիս  է  տարրերի բազմության դասավորությունը): ", "Տեսակավորման մեթոդների վրա հիմնված ալգորիթմներից մեկն իր էությամբ նման է պղպջակների  մեթոդին  (bubble  sort)  [57,  59]:  Հերթականությամբ  դիտարկվում  են հարևան գագաթների բոլոր զույգերը, և դրանք տեղերով փոխվում են, եթե այդ դեպքում հատումների  թիվը  կփոքրանա:  Գործընթացն  ավարտվում  է,  երբ  հերթական  լրիվ դիտարկումից  հետո  (բոլոր  տարրերով  անցնելուց  հետո)    հատումների  քանակը  չի նվազում  (չկարգավորված  զույգ  չի  գտնվում):  Այս  ալգորիթմի  բարդությունը  O(|R2|2)  է, քանի որ վերջնական կարգավորություն ստանալու համար կարող են անհրաժեշտ լինել մինչև անգամ |R2| դիտարկումներ: Այսպիսի ալգորիթմի ընտրությունը խիստ կախված է նախնական  դասավորության  ընտրությունից,  քանի  որ  դիտարկվում  և  տեղափոխվում են միայն իրար հարևան տարրերը: ", "Հաջորդ  մեթոդը  հիմնված  է  արագ  տեսակավորման  (quick  sort)  ալգորիթմի գաղափարի վրա [57, 60, 61]: Սկզբում ընտրվում է «միջին» տարր, իսկ մնացած տարրերը բաժանվում  են  երկու  բազմությունների՝  կախված  նրարից,  թե  դրանք  ինչ հարաբերությունների մեջ են գտնվում ընտրված տարրի հետ: Հետո նման պրոցեդուրա ռեկուրսիվ  կիրառվում  է  ստացված  բազմություններից  յուրաքանչյուրի  նկատմամբ: ", "ա. բ. դ. ե. Նկար 2.19.   ԱՀ-ի անկյունագծային ԾՕ-ի կիրառման օրինակները Իսկ  երբ  զանգվածի  տողերի  և  սյուների  հարաբերությունը  մեծ  է  երեքից,  ապա  այդ դեպքերի  համար  նախատեսված  է  կիրառել  ոչ  անկյունագծային՝ լրացուցիչ, ծրագրավորող  օրինակներ:  Այդ    ԾՕ-ների  կիրառումը  նախատեսված  է  միայն  մեծ չափսեր  ունեցող  հիշողության  նմուշների  դեպքերում  (այդ  պատճառով  այս  դեպքի օրինակը  ներկայացնելը  դժվար  է):  Ոչ  անկյունագծային  ծրագրավորման  օրինակները՝ ֆիզիկական  մակարդակում,  յուրաքանչյուր  տողին  (իսկ  #PC  >  #PR  դեպքում՝  սյունին) վերագրում  են  չկրկնվող  կոդ,  այսպես  ասած,  «համարակալում»  են  տողերը:  Ոչ անկյունագծային  ԾՕ-ները  կիրառվում  են  միայն  անկյունագծային  ԾՕ-ներից  հետո որպես  լրացուցիչ  ծրագրավորման  օրինակներ:  SIE-ի  հոսքում  բացի  պարտադիր զրոյական և անկյունագծային ԾՕ-ներից, կարող են գեներացվել   առավելագույնը մինչև վեց  լրացուցիչ  ԾՕ-ներ:  ՀՍ-ի  նմուշի  լրացուցիչ  ԾՕ-ի    ֆայլի  օրինակը  ներկայացված  է հավելված 4-ում: ", "Հաջորդ մեթոդի համաձայն՝ ալգորիթմը ամեն քայլում վերցնում է տարրերից մեկը և փորձում  այն  դնել  այնպիսի  տեղում,  որ  ստացվի  հատումների  փոքրագույն  թիվ:  Դրա համար  ալգորիթմը  փորձում  է  տարրը  տեղադրել  յուրաքանչյուր  հնարավոր  տեղում    և - 60 - հաշվում է ստացված հատումների քանակը: Քանի որ տարրը մի դիրքով տեղափոխելիս շղթաների  հատումների  քանակի  փոփոխությունը  կարելի  է  հաշվել  հաստատուն ժամանակում  (օգտագործելով  լրացուցիչ  հավաքված  ինֆորմացիա),  ապա  ալգորիթմն ունի  քառակուսային  բարդություն  և  իր  էությամբ  նման  է  ներդրումներով տեսակավորման մեթոդին (insertion sort)[57, 62, 63]: ", "Ինչպես արդեն նշվել է, ցանկացած դասավորության որոշման մեթոդ, որը հիմնված է տեսակավորման  ալգորիթմների  վրա  և  պետք  է  աշխատի  տարրերի  զույգերի  հետ,  չի կարող իրագործվել գծային ժամանակում: Հետևաբար, վերոհիշյալ մեթոդներից ոչ մեկը չի կարող ունենալ գծային բարդություն: ", "Հ ի շ ո ղ ո ւ թ յ ա ն   Հ Ն Թ Ց - ի   խ մ բ ա վ ո ր մ ա ն   մ ե թ ո դ ը '   հ ա շ վ ի   ա ռ ն ե լ ո վ   տ ր վ ա ծ   հ զ ո ր ո ւ թ յ ա ն ա ռ ա վ ե լ ա գ ո ւ յ ն   ա ր ժ ե ք ը :   Այն  դեպ քում  երբ  Հ Ն Թ Յ -ը   թ եստ ա վորում  է  հիշողութ յունները հ ա ջորդ ա բա ր,  սպ ա ռ ա ծ  հզորութ յունը  Բ Տ  հա շվա րկվում  է  (32)  բա նա ձև ով,  և  զուգ ա հեռ ռեժիմում  ս պ ա ռ վա ծ   հզորութ յունը  Բ թ  հա շվա րկվում  է  (33)  բ ա ն ա ձև ո վ  [57]: ", "P s   =   M a x  { P i } ,   i   e   {1 ,2 , . . . , k } , P s   < =   P ,p e a k P p = Y l i = i P i , P p < = P p e a k (33) Ո րտ ե ղ  Ր?ար ը   տ րվ ա ծ  ա ռա վելա գ ույն  հզորութ յունն  է,  Բ   i-դ   հիշողութ յա ն  կողմից ծա խ սա ծ  հզորությունն  է,  k - ն   հիշողութ յունների  ընդհա նուր  ք ա ն ա կ ն   է: ", "Աղյուսակ  2.2-ում  տրված  են  հիշողության  կոմպիլյատորների  բնութագրերը  և դրանց համապատասխան  ASV  ալգորիթմի  աշխատանքի ժամանակային գնահատականները, որտեղ  «K» դա –կիլոբիթ է իսկ  «M» - մեգաբիթ: ", "Հ Ն Թ Յ -ի   կոնկրետ   կոմպ ոնեն տ ի  մ ա կ ե ր ե սը   հա շվվում  է  հ ե տ և յա լ բ ա ն ա ձև ով  [5 6 ]' A B d   =   A   X   N b i t   +   C , (34) ո ր տ ե ղ   Nbit բիթ երի  ք ա ն ա կ ն   է, A  և  C  բնութ ա գրեր  են,  որոնք  կա խ վա ծ  են  հիշողութ յա ն  տ եսա կից  և տ ե խ ն ո լո գ ի ա յի ց : ", "որտեղ  |R’1|  =  n,  |R’2|  =  2,  և  R’1-ի  տարրերի  այնպիսի  x’1  դասավորություն,  որ med(G’,x’1)/ opt(G’,x’1) ≥ 3 – O(1/n) (R1,  R2,  W)  երկկողմանի  գրաֆի  և  R1-ի  տարրերի  ցանկացած  x1 դասավորության համար ճիշտ է med(G’,x’1) ≤ 2 * opt(G’,x’1) անհավասարությունը, եթե R2-ի գագաթները չունեն երեքից ավելի շղթաներ: ", "Արդյունքում՝  նամակներից  յուրաքանչյուրը  ստուգվում  է  վերոնշված  քայլերով, իսկ  քայլերից  որևէ  մեկին չբավարարելու  դեպքում՝  անտեսվում։  Ֆիլտրման գործողությունից  հետո  ֆիլտրված  նամակները  փոխանցվում  են  մյուս՝  դասակարգման մեթոդին, որը տեսակավորում է դրանք։ ", "Այսպիսով,  հետազոտվել  է  ինտեգրալ  սխեմաների՝  «փափուկ»  և  «կոշտ»  բլոկների՝ ֆիզիկական  կառուցվածքների  տեսքով    ներկայացումը։  Ներկայացվել  են  «փափուկ»  և «կոշտ»  բլոկների հատկությունները։ Հետազոտվել են արդի ալգորիթմական լուծումներ՝ գրաֆում  և  ԻՍ-ում  շղթաների  հատումների  քանակի  նվազարկման  և  արագագործ ավտոմատացման միջոց մշակելու նպատակով։ ", "Տրամաբանական տարրերի փոխանջատման ակտիվությունների միջոցով դինամիկ հզորությունների գնահատումը՝ որպես սխեմատեխնիկական առանձնահատկությունների հաշվառմամբ ֆիզիկական կառուցվածքի ստացման Եթե (1.6) արտահայտությունում տարրերի տեսակարար դինամիկ հզորություններն ու  բջիջների  թվային  ստանդարտ  գրադարանի  աշխատանքային  հաճախականությունը միջոց - 62 - հայտնի  են  դառնում  գրադարանի  ընտրության  արդյունքում  և  կախված  չեն  սխեմայի տրամաբանական  ակտիվությունից,  ապա  տարրերի  փոխանջատման  ակտիվությունը ուղղակիորեն  կախված  է  սխեմայի  տրամաբանությունից  և  տվյալ  տարրի  սխեմայում տեղաբաշխման  վայրից:  Ուստի  ֆիզիկական  նախագծման  համար  կարևոր  է  մշակել այնպիսի  միջոցներ,  որոնք  թույլ  կտան  հաշվի  առնել  տրամաբանական  սխեմայում տարրերի  փոխանջատման  ակտիվությունը՝  դրանց  իրական  հզորության  գնահատման ժամանակ: ", "Փոխանջատման  ակտիվության  գնահատականը  հիմնված  է  տրամաբանական տարրի ելքին ազդանշանային հավանականության բնութագրման վրա [68]. Ազդանշանային  հավանականությունը  տրամաբանական  տարրի  ելքին «1» ազդանշանի  առաջացման  հավանականությունն  է,  որը  կարելի  է  հաշվարկել  տվյալ տարրի իսկության աղյուսակով: ", "Հիմնական տրամաբանական տարրերի ելքին ազդանշանային hավանականությունները՝  փոխակերպիչի (ինվերտորի)  տիպի,  և(AND),  կամ(OR), որոշվում են հետևյալ կերպ՝ ,                (2.9) որտեղ Pi –ն  տրամաբանական  տարրի i-րդ մուտքի  ազդանշանային հավանականությունն է, m –ը՝ տրամաբանական մուտքերի քանակը: ", "Նկար 2.2. Մուտքային ինֆորմացիայի ֆիլտրման և դասակարգման հաջորդական գործընթացը Այսպիսով՝ մուտքային տվյալների մշակման մեխանիզմը թույլ է տալիս ստացված տարատեսակ  էլեկտրոնային  նամակներից  զտել  միայն  համակարգի  համար ընդունելիները։  Նամակները  նախ  անցնում  են  ֆիլտրման  գործընթացով՝  ըստ համակարգի  սահմանված  չափորոշիչների,  այնուհետև  որոշվում  է յուրաքանչյուր նամակին համապատասխանող հրահանգը, որից հետո այն ուղարկվում է կատարման (Նկար 2․2)։ ", "Նկ. 3.21 QPSK ազդանշանի ակնթարթային փուլի գրաֆիկը ներկայացված բաղկացուցիչ կետերի միջոցով Նկ.  3.21-ում  պատկերված  գրաֆիկի  վրա  կարելի  է  հստակ  տեսնել  չորս հորիզոնական  գծեր,  որոնք  վկայում  են  այն  մասին,  որ  տվյալ  ազդանշանի ակնթարթային  փուլը  չորս  անգամ  փոփոխվել  է։  Հետևաբար  կարելի  է  եզրակացնել,  որ այս նույն պատկերը կտեսնենք մյուս փուլային մոդուլացված ազդանշանների դեպքում, որում  համապատասխան  գծերի  քանակը  կվկայի  դրա  փուլի  փոփոխությունների քանակի մասին։ ", "Այսպիսով,  կարևորվել  է  ԻՍ-ի  տրամաբանական  նախագծումից  ֆիզիկականին անցնելիս  տրամաբանական  տարրերի  աշխատանքային  հզորությունների  արժեքների հաշվի առնելը  ԻՍ-ի տակդիրի վրա դրանց տեղադրման ժամանակ։ ", "Ֆիզիկական  նախագծման  ընթացքում  տրամաբանական  սխեմայի  աշխատանքի առանձնահատկությունների  տեսանկյունից  հրատապ  է  դառնում,  տրամաբանական տարրերի  աշխատանքային  հզորություններից  ելնելով,  դրանց  տեղաբաշխման մեթոդների  մշակումը:  Եթե  ընդունենք,  որ  հզորության  ստատիկ  բաղադրիչը գործնականում  է  կախված  չէ  սխեմայի  աշխատանքի  տրամաբանությունից,  ապա տարրերի  տեղաբաշխման  փուլում  հզորությունների  գնահատման  համար  կարող  է օգտագործվել միայն հզորությունների դինամիկ բաղադրիչը: ", "Եզրակացություններ որպես սխեմատեխնիկական  առանձնահատկությունների հաշվառմամբ ֆիզիկական  կառուցվածքի  ստացման  միջոց։  Ներկայումս  գոյություն  ունեցող ժամանակային  ուղղորդմամբ  տեղաբաշխման  մեթոդներն  ունեն  որոշակի թերություններ, և կարիք կա դրանց հետագա զարգացման: ", "Մշակվել  է  մեթոդ  ք^\"1\"Լ  կոմպիլյատորների  նախագծման  բնութագրերի  արագ գնահատման  համար'  հիմնված  ռեգրեսիոն  անալիզի  ւիոքրագույն  քառակուսիների մեթոդի  վրա,  որը  բարելավում  է  գնահատման  սխալը:  Մշակված  մեթոդն  առաջին անգամ  ընդլայնվել  է  ք^\"1\"Լ  կոմպիլյատորների  ամբողջ  հիերարխիայի  նախագծման բնութագրերի արագ գնահատման  համար: ՀՆԹՑ-ի նախագծման բնութագրերի  արագ գնահատման  մեթոդի իրականացման ժամանակատարությունը պակասեցնելու համար մշակվել է մեթոդի  ընդլայնում,  որը  հիմնված է մեքենայական  ուսուցման  վրա: ", "նկարագրից  ԱԳՀ-ի  ստացման  այնպիսի  մոտեցման  մշակումը,  որով  հնարավոր կլինի  խուսափել  անցանկալի  մեծ  հիշողության  օգտագործումից  և  ստանալ ավտոմատացված միջոցի ցանկալի մեծ արագագործություն։ ", "կոդ», այն  պահպանում, կցելով ստեղծված հաշվին և SMS հաղորդագրությամբ ուղարկում օգտատիրոջ  հեռախոսահամարին։ ", "կառուցվածքների  տեսքով    ներկայացումը։  Ուսումնասիրվել  են  «փափուկ»  և «կոշտ»  բլոկների հատկությունները։ ", "Այս  պատճառով  մշակվել  է  ազդանշանի  հիմնական  բնութագրող  հատկանիշ,  որը հնարավորություն կտա հայտնաբերել M-QAM ազդանշանի կարգը։ Դիտարկենք 32QAM ազդանշանի  համաստեղության  դիագրամը (նկ.  3.14)։  Ինչպես  արդեն  նշվել  է յուրաքանչյուր  M-QAM  ազդանշանի  համար  ամպլիտուդան  ունի  համապատասխան քանակի արժեքներ (նկ. 3.24)։ ", "Իրատեսական թերությունների մոդելները մշակելը և թերությունների գրադարանը ունենալու  մեկ  այլ  առավելություն  է  այն,  որ  այն  հնարավորություն  է  տալիս  ստուգել թեստային  ալգորիթմները  իրական  թերությունների  գրադարանի  սահմաններում: ", "Ներկայումս  թեստային  ալգորիթմների  և  թերությունների  մոդելների  բարդության աճման  պատճառով  դրանց  ստուգումը  առանց  հատուկ  ծրագրային  ավտոմատ միջոցների դառնում է անհնար [15]: ", "Այս  գլխում  ներկայացված  է  թերությունների  ներդրման  և  հիշողությունը թեստավորող  ալգորիթմը  ստուգող    (ԹՆևՀԹԱՍ)    ծրագրային  ԱՀ,  որի  նպատակն  է կատարել  թեստային  ալգորիթմների  աշխատանքի  ստուգումը,  գնահատել  այդ ալգորիթմների արդյունավետությունը՝ օգտագործելով տարբեր  տեսակի  իրատեսական թերությունների  մոդելներ,  որոնք  կարող  են  տեղադրվել  հիշողության  սարքի  բոլոր հանգույցներում՝  ստեղծելով  տարբեր  վարքագիծ  դրսևորվող  անսարքություններ: ", "Անհրաժեշտության դեպքում ԹՆևՀԹԱՍ ծրագրային ԱՀ-ը հնարավորություն է ընձեռում իրականացնել.  ա) թեստային  ալգորիթմների  աշխատանքի  ամբողջական արդյունավետության հաստատումը, բ) թեստային ալգորիթմների յուրաքանչյուր  Մարշ ալգորիթմի  տարրերի  առանձին  ստուգումը,  գ)  թեստային  ալգորիթմների  քայլ  առ  քայլ ստուգումը: ", "Այսպիսի  մոտեցումը  պետք  է  նպաստի  միջմիացումների  երկարությունների  և հատումների  կրճատմանը։  Այս  մոտեցմամբ  մշակված  են  որոշակի  կանոններ,  որոնք թույլ  են  տալիս  տրամաբանական  սխեմայի  տարրերի  ռանգավորումից  «փափուկ»  և «կոշտ»  բլոկների  սինթեզման  ժամանակ,  ըստ  հնարավորության,  ԻՍ-ի  տակդիրի  վրա տարրերը  տեղաբաշխել  այնպես,  որ  դրանց  ֆիզիկական  հաջորդականությունը համապատասխանի  ազդանշանների  հոսքի  ուղղությանը։  Բացի  այդ,  հատուկ ուշադրություն  է  դարձված  ամենաերկար  կապերի  երկարությունների  կրճատման անհրաժեշտությանը,  որոնք  որոշվում  են  որոշիչ  ուղիների  վրա  ազդանշանների տարածման հապաղմամբ։  Այս նպատակով ներմուծված է  տարրերի փոխկապվածության կարևորության գործակից, որը հաշվի է  առնում համապատասխան շղթայի կարևորությունը սխեմայի արագագործության տեսանկյունից: ", "- 66 - Նկ․ սխեմայի  Verilog  նկարագրից  մինչև «կոշտ» բլոկի  ստացման  գործընթացի ալգորիթմական ապահովումը։ ", "ԲՎՀ-ի  չափերի  փոքրացման  և  հիշողության  բջիջների  քանակի  մեծացմանը զուգընթաց  աճում է հիշողության  անսարքությունների հայտ գալու հավանականությունը: ", "- 67 - հոսքի գրաֆի ԻՍ-երի ֆիզիկական նախագծման ժամանակ սխեմայի ֆունկցիոնալ- տրամաբանական  առանձնահատկությունների  հաշվառման  առաջարկվող  մոտեցումը ենթադրում  է  տվյալների  մշակման  սխեմայի  փականային  մակարդակի  Verilog նկարագրության  նախնական  փոխակերպումը  ազդանշանների  հոսքի  գրաֆի  (ԱՀԳ)՝ G(W,C)  [69-72],  որտեղ  C={c1,  c2,…,cm}–ը  տարրերի  բազմությունն  է  ,  W={w1,  w2,…,wn}  -ը՝ շղթաների  բազմությունը։  Հետագայում,  ստացված  ԱՀԳ-  ի  հիման  վրա,  կատարվում  է սխեմայի տրամաբանական բջիջների դասակարգում, որի արդյունքներն օգտագործվում են դրանց տեղաբաշխման ժամանակ: ", "Այսպիսով,  եթե  տրված  են  ինտեգրալ  սխեմայի  փականային  մակարդակի  Verilog նկարագիրը,  սահմանափակումները  (չափերը՝  {ai,  hi},  i  = },  որտեղ  m-ը  տարրերի քանակն  է)  պարունակող  մուտքային  զանգվածը,  ապա  ԱՀԳ-ի  մոդելի  ստեղծման հիմքում ընկած է հետևյալ հիմնական քայլերից բաղկացած ալգորիթմը․ վերլուծություն  և  ստուգել՝  արդյո՞ք  այն  վավեր  է,  թե  ոչ։  Կատարել համեմատություն նախնապես տրված վավեր ֆայլի հետ, ;  k-ն  մուտքային շղթաների քանակն է, ;  q-ն  ելքային  և մուտքային շղթաների գումարային քանակն է, ;  n-ը  բոլոր ; m-ը տարրերի քանակն է, շղթաների քանակն է, հետ, ստանդարտ  բջիջների  գրադարանի՝ {ai,  hi}, i  = ,  որտեղ  ai  և  hi համապատասխանաբար Ci տարրի երկարությունը և բարձրությունն են, - 68 - , որոնց արժեքները  վերցվում  են  սխեմայի  ստատիկ  ժամանակային  վերլուծության արդյունքից: ", "Այս  աշխատանքում  ներկայացված  ԱՀԳ-ի  ստացման  մոտեցումը,  որը  ավելի մանրամասն նկարագրված է նկ․ 3.2. -ում, նպատակաուղղված է` արագացնելու ԱՀԳ-ի վրա  կիրառվող  հետագա  ռանգավորման  և  ֆիզիկական  կառուցվածքի  ստացման ալգորիթմների  աշխատանքը։  Ալգորիթմի  արագագործությունը հիմնականում ապահովվում է շղթաների և տարրերի անունների փոխարեն` նրանց id (identity number) ինքնության  համարների    կիրառմամբ,  որտեղ  id-ն  բնական  թիվ  է  և  ամեն  տարրի  կամ շղթայի համար եզակի է։ Բացի  id-երի ներմուծումից, արագագործության ապահովմանը ծառայում  են  նաև  զանգվածների  և  բինար  որոնման  բալանսավորված  ծառի  տեսքով տվյալների (տարրեր, շղթաներ․ ․ ․ ) նկարագրությունները։ ", "Դիտարկենք  ալգորիթմի  աշխատանքը  Iscas85  գրադարանի  [46]  թեստային  c17.v վերիլոգ ֆայլի օրինակով (նկ․ 3.2): ", "Նկ․  3․2․   Սխեմայի  փականային  մակարդակի  Iscas85 գրադարանի թեստային c17.v Verilog նկարագիրը - 69 - Ալգորիթմի  նկարագրության  համար  կօգտագործենք  օբյեկտակողմնորոշված ծրագրավորման (ՕԿԾ) որոշակի տերմինաբանություն, որը կնպաստի նկարագրության հակիրճ  և  ձևայնացած  ներկայացմանը:  Ինչպես  հայտնի  է,  ՕԿԾ  –ն  ծրագրավորման մոտեցում է, որի գաղափարական հիմք են հանդիսանում օբյեկտ և դաս հասկացությունները [73, 74]։ ", "Հարկ  է  նշել,  որ  MPT  ծրագրավորող  գործիքը  ունի  հետևյալ  երկու  էական սահմանափակումները.  ա)    MPT-ին    ներարկում  է  թերություններ  միայն  հիշողության բջիջների  զանգվածի  տարածքի  սահմաններում  և չի  կատարում  ներարկման գործողություն  այդ  տարածքից  դուրս՝  հիշողության  սարքի  մյուս  (Մուտքային/Ելքային հանգույցներում բջիջներում, տողերի և սյուների ապակոդավորիչների հանգույցներում,  զգայուն  ուժեղացուցիչների  բջիջներում  և  այլն)  հանգույցներում,  բ) ծրագրավորման  ընթացքում  MPT-ին  կարողանում  է  ներարկել  միայն  երկու  տեսակի՝ ծրագրավորող  թերություններով  բջիջներ,  այսինքն  միայն  երկու  տարբեր  վարքագիծ ունեցող թերություններ կարող են   միաժամանակ ներարկվել և հետազոտվել  հիշողու- թյան  բջիջների  զանգվածում  ԹՆևՀԹԱՍ    ծրագրային  համակարգի  կողմից:  Միաժա- մանակ  այդ  թերություններով  բջիջների  քանակը  սահմանափակվում  է  միայն հիշողության  սարքում  պարունակվող    հիշողության  բջիջների  գումարային  քանակով: ", "Ֆայլից տվյալների կարդալը կատարվում է հետևյալ կերպ՝ դատարկ  տողեր,  ապա  ծրագիրը  դրանք  անտեսում  է,  օրինակ՝  1,  2,  6,  8  և  15-րդ տողերը, (տող 3), ամեն տարրի ինֆորմացիան․ դա կատարվում է մի քանի քայլերով (տող 4, 5, 7 )՝   Հերթական  էլեմենտը  կարդալուց  հետո,  նրան  տրվում  է id։ ", "id-ն ներկայացնում է բնական թիվ, այսինքն՝ ամեն էլեմենտ կունենա իր եզակի թիվը։ Օրինակ 4-րդ տողում 1-ին տարրը կլինի G1-ը, իսկ նրա id-ն կլինի 0, կատարվում է output և wire -ների (տող 5 և 6) դեպքում։ ", "  ԱՀԳ-ում ստեղծվում է map[75, 76](տարրի անունից դեպի իր id) կամ արդեն ստեղծված  map-ի  մեջ  ներմուծվում  է  հերթական  տարրը՝  իրեն  տրված  id- ով։  map-ը  բինար  որոնման  բալանսավորված  ծառ  է։  Նրա  ամեն  տարրը ներկայացնում  է {key,  value}  զույգ։  Որոնումը  և  բալանսավորումը կատարվում  է  key-ի  միջոցով,  որոնք  ծառի  մեջ  չեն  կարող  կրկնվել,  իսկ value-ն  ներկայացնում  է  ցանկացած  տվյալ։  Մեր  օրինակում  key-ը  Id-ն  է, իսկ value-ն՝ G1 կամ G2 … (նկ․ 3․ 5) - 70 -   ԱՀԳ-ում առանձին կոնտեյներում (C++ լեզվի ստանդարտ գրադարանից են, ներկայացնում են՝ զանգված[77,78])  պահվում են input, output, wires՝ իրենց համապատասխան տարրերի id-երով։ Այսպիսով՝ փականների անունների փոխարեն  ստանում  ենք  id-  եր՝  թվի  տեսքով,  ինչն  էլ  հետագայում  կազդի ծրագրի արագագործության վրա։ ", "Նկար 34 DesignWare Տ/\\4Տ-ի օրինակ Բ ր օ շ Ց Տ Տ օ ր -ն   ունի  կարևորագույն  թեստավորման  և  վերանորոգման  ֆունկցիաներ (131Տ1,  Ց ^ ) :   Ներկառուցված  հիշողությունները  թեստավորվում  են  131Տ1-ի  միջոցով:  Այն բաղկացած է յուրաքանչյուր ներկառուցված հիշողության  կողքին գտնվող շարժիչից, որը գրում  է ալգորիթմորեն գեներացված նմուշները  հիշողության  մեջ և այնուհետև կարդում է  դրանք  հիշողությունից'  անսարքությունները  ֆիքսելու  նպատակով:  Ստուգման ալգորիթմները  կարող  են  նախապես  ներդրվել  131Տ1  մոդուլի  մեջ  կամ  կարգավորվել արտաքինից'  միկրոկոդի  միջոցով,  որը  կարող  է  պահվել,  օրինակ,  էներգաանկախ մշտական  հիշողության  մեջ:  Հիշողության  թեստավորումից  հետո  131[^  վերանորոգման և հավել|ալության  տեղաբաշխման  մոդուլը հայտնաբերում է գոյություն  ունեցող հավել|ալ տողերն  ու  սյուները  և  որոշում  է  դրանց  օպտիմալ բաշխման  տարբերակը:  Դրա  համար այն օգտագործում է  անսարքությունների նախապատմությունից ստացվող հիշողությունների  թերությունների  վերաբերյալ  ինֆորմացիան,  որը  տրամադրվում  է սխեմաներ  արտադրող գործարանների  կողմից:  Այսպիսով  Բ ր օ օ Ց Տ Տ օ ր -ը   տեղայնացնում և  վերանորոգում  է  հիշողության  անսարքությունները:  Տեղաբաշխման  մոդուլը  հավելյալ տողերի  և  սյուների  տեղաբաշխման  ինֆորմացիան  վերածում  է  հիշողությանը  հատուկ կոդի  և  գրանցում  է  այն  հիշողությունների  թերությունների  մասին  ինֆորմացիայի գրանցման  պահոցում:  Processor-ը  կարող  է  ստուգել  և  վերանորոգել  բազմաթիվ հիշողություններ  հաջորդական  կամ  զուգահեռ  ռեժիմում:  Բվհ-ում  հիշողության նմուշների  խմբավորումը  Processor-ի  միջոցով  պայմանավորված  է  մակերեսի, հզորության,  արագության,  համակարգային  տակտային  գեներատորի  և  բյուրեղի  վրա մոդուլների  տեղաբաշխման  գործոններով [69],  [70]  : ", "Երկրորդը՝  այդ  տարրերը  իրար  կապող  շղթաների  ինֆորմացիան  (աղ․ 3․ 1, աղ․ 3․ 2)։ ", "Դրանք  աշխատում  են  զուգահեռաբար  մեկը  մյուսից  անկախ։  Բոլոր  սարքերը կառավարվում են  ղեկավարման մոդուլի կողմից (Նկար 2.4)։ ", "Քանի որ ուսուցման ժամանակ տվյալները անցնում են ուղիղ և հակադարձ տարածման փուլերը, ապա ընդհանուր իտերացիաների քանակը վերցվել է 32768, որը հանդիսանում է  երկուսի  աստիճան:  Նկ.  4.2–ում  պատկերված  են  LabVIEW  միջավայրում  մշակված ԱՆՑ-ի  բազային  մոդելի  ուղիղ  տարածման  և  հակադարձ  տարածման  կոդի հատվածները: ", "Այն ներկայացնում է՝   ստանդարտ տարրի անուն՝ nand,   տարրի անուն՝ NAND2_0,   output փականի անուն՝ G8, input փականների անունները՝ G1,G3։ ", "Արդեն ունենալով ամեն տարրի id-ին՝ ԱՀԳ-ում կարողանում ենք ստեղծել Cell-եր և  Wire-ներ  հերթական  տողը  կարդալիս,  որոնք  էլ  ներմուծում  ենք  ԱՀԳ-ում պահվող  g_cells  և  g_wires  զանգվածներում։  Ներոմուծումն  իրականացվում  է այնպես,  որ  զանգվածում  տարրի  համարը  համապատասխանի  տարրի  id-ին, ինչն էլ կարագացնի հետագա ալգորիթմների աշխատանքը (զանգվածում տրված համարով տարրին դիմելը հաստատուն ժամանակում է կատարվում՝ O(1) է)։ "]}