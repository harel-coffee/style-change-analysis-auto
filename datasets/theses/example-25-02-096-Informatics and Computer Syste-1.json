{"paragraphs": ["Ինչպես  արդեն  նշվել  է,  «CA  Simulator»  համակարգը  ապահովում  է բազմաօգտատեր շահագործում, որը հնարավոր է եղել ստանալ Microsoft .Net [52] միջավայրի  միջոցով,  որը  ինքնին  հնարավորություն  է  տալիս  ստեղծել  ծրագրային փաթեթներ, որոնց միջոցով  կարելի է կապել ինչպես օգտագործողներին, այնպես էլ  տարբեր  համակարգեր  և  սարքեր,  դրանով  իսկ  դյուրացնելով  ինֆորմացիայի կիսումը/sharing:  Օգտագործելով  .Net  միջավայրը,  «CA  Simulator»  համակարգում մշակվել  է  հաճախորդ-սերվեր-հաճախորդ  փոխկապակցվածությունը՝  նպատակ ունենալով  հնարավորություն  տալ  օգտագործողներին  կատարել  համատեղ հետազոտություններ  միևնույն  մոդելների  վրա:  Սերվերի  տեղակայման  համար ընտրվել են Microsoft Azure [53] ամպային տեխնոլոգիաների հարթակը: ", "Համատեղ հետազոտություն իրականացնելու համար օգտագործողը պետք է ստեղծի մոդել, որի վրա որ կատարվելու է հետագա համատեղ հետազոտությունը, այնուհետև պետք է կիսվի ստեղծած մոդելով, որի համար ընտրում է «Broadcasting» օպցիան  վերին  վահանակից,  այնուհետև  ընտրում  է  «Start  Broadcasting» տարբերակը՝  մուտքագրելով  ալիքի  անվանումը:  Մինչդեռ  մյուս  օգտագործողները բացելով  ալիքների  ցուցակը  «Broadcasting»  օպցիայից  «Connect to  Chanel» տարբերակը  ընտրելով,  տեսնում  են  ալիքների  պատմությունը  ցուցադրող պատուհանը (նկար 19), որտեղ կարող են ընտրել ցանկալի ալիքը տվյալ ցանկից և միանալ  դրան:  «CA  Simulator»  համակարգի  շատ  կարևոր  առավելություններից  է նաև  այն,  որ  այն  պահպանում  է  մոդելի  վրա  կատարված  հետազոտության ընթացքում  կիրառված  բոլոր  փոփոխությունները,  և  հնարավորություն  տալիս ալիքին  ուշ  միացած  օգտագործողներին  տեսնել  դրանք  քայլ  առ  քայլ,  ամեն  քայլի հետ թարմացնելով բնութագրիչների հաշվարկը: ", "Նկար 19.Ալիքների պատմությունը ցուցադրող պատուհան: ", "Ինչպես արդեն նշվեց, «CA Simulator» համակարգը մշակվել է օգտագործելով .Net  միջավայրը  և  C#  լեզուն:  Իսկ  գլոբալ  ցանցում  աշխատանքի  ապահովման համար  ընտրվել  է  Microsoft  Azure-ը:  Ծրագրավորողների  տեսանկյունից  «CA Simulator»  համակարգը  կարող  ենք  բաժանել  3  մոդուլի.  տեսաբերում,  լոկալ սիմուլացիա և կլիենտ-սերվեր ճարտարապետություն: Տեսաբերման, պտույտների և դիտարկման  հեռավորության  ապահովման  համար  օգտագործվել  են  հենց  .Net միջավայրի գրադարանները: Տեսաբերող դասը կունենա գծապատկեր 1-ի տեսքը: ", "Գծապատկեր 1.Տեսաբերող դասերի կառուցվածքային նկարագրությունը: ", "Լոկալ  սիմուլացիայի  մոդուլում  նախագծվել  է  GuiHelper  դասը,  որը ապահովում է մոդելի ստեղծումը, տեսաբերումը, տեսաբերման ֆունկցիոնալ բոլոր հնարավորությունները, պահպանումը, վերբեռնումը, ավազահատիկների ավելացումը,  գագաթների  փլուզումը,  ինչպես  նաև  ատրիբուտների  հաշվարկը: ", "Տվյալ դասի ֆունկցիոնալ ստեկը ունի Նկար 20-ի տեսքը: ", "Նկար 20.GuiHelper դասի նկարագրություն: ", "Սերվեր-կլիենտ/ Service-client մոդուլի ճարտարապետության շրջանակներում ունենք    BroadcastingHelper  դասը  (Նկար  21),  որը  պարունակում  է  անհրաժեշտ ֆունկցիաները հեռարձակող-բաժանորդ կապի իրականացման համար: ", "Նախագծված  ճարտարապետության  հիմքում  ընկած  է  այն  գաղափարը,  որ հեռարձակողը  ինքնին  հանդիսանում  է  նաև  բաժանորդ  նույն  ալիքի  համար,  որը հնարավորություն է ընձեռում այլ օգտվողների փոփոխությունների ընդունումը նաև հեռարձակողի  կողմից:  Ինչպես  նշվեց  տվյալ  ալիքում  պահպանվում  է  բոլոր բաժանորդների  կողմից  կատարված  բոլոր  փոփոխությունները,  որի  համար ստեղծվել է տվյալների հենք, որի իրականացման համար ընտրվել է SQLite- ը: ", "Նկար 21.BroadcastingHelper դասի նկարագրություն: ", "Ինչպես  արդեն  նշվեց,  CA  simulator  համակարգը  ստեղծվել  է  ավազակույտի մոդելի  օրինակով:  Առկա  են  երկու  հիմնական  գործառույթներ  կապված ավազակույտի հետ. DrawSandpileModel (), որն ապահովում է ավազակույտի տեսաբերումը, մոդելի փոփոխությունների արտացոլումը և •  addgrain(Position pos) ֆունկցիան, որը օգտագործողին հնարավորություն է տալիս կատարել փոփոխությունները ավազակույտի մոդելի վրա: ", "Նկատենք, որ հավելյալ բջջային մոդելի մշակումը նույնպես դժվարություն չի ներկայացնում.  պարզապես  կատարվում  է  տեսաբերման  եւ  մոդելի  փոփոխման գործառույթների  փոփոխություն:  Իսկ  արդեն  տեղեկությունների  փոխանակման համար նոր բջջային ավտոմատի դեպքում անհրաժեշտ է ISeService ինտերֆեյսի մի քանի  գործառույթների  ադապտացում  տվյալ  մոդելին  SeService  դասում:  CA simulator  ծրագրային  համակարգի  աղբյուրները  (source  code)  կարելի  է  գտնել Bitbucket-ում url {https: //nhayk@bitbucket.org/nhayk/ca_simulator.git} հղումով: ", "Նշենք,  որ  «Լուրջ  խաղերը»  հստակ  սահմանում  չունեն,  և  դրանց  յուրաքանչյուր մշակող  յուրովի  է  սահմանում  տվյալ  դասի  խաղերը  [54-55]:  Այնուամենայնիվ, տարածված  կարծիքի  համաձայն  «լուրջ  խաղերը»  (թվային)  խաղերն  են,  որոնք օգտագործվում  են  ոչ  միայն  որպես  զվարճանք,  այլև լուրջ  գիտական հետազոտություններ  և  ուսուցողական  նպատակներ  են  հետապնդում:  Բացի նրանից, որ լուրջ խաղերը հնարավորություն են ընձեռում օգտվողներին փորձարկել ժամանակի, անվտանգության, գումարային արժեքի և այլ պատճառներով իրական կյանքում  անհավանական  իրավիճակներ,  նրանք  կարող  են  նպաստել խաղացողների  մի  շարք  տարբեր  հմտությունների  զարգացմանը:  Սակայն  սա  չի նշանակում,  որ  բոլոր  խաղերը  նպատակահարմար  են  բոլոր  վերոհիշյալ գործընթացներում:  Լուրջ  խաղերի  օգտագործման  վերաբերյալ  գիտական ուսումնասիրություններ կատարվել են [56]-ում: ", "Գոյություն  ունեն  «Լուրջ  խաղերի»  հայտնի  մի  քանի  օրինակներ  որոնք, համարվում  են,  որ  փոխել  են  աշխարհը:  Դրանցից  են՝  «MICROSOFT  FLIGHT SIMULATOR (1982)»-ը [57], TILTFACTOR LABORATORY-ի կողմից ստեղծած խաղերը [58], FORCE MORE POWERFUL (2006) [59] և այլն (Նկար 22): ", "Թռիչքի  սիմուլատորները  հանդիսանում  են  լուրջ  խաղերի  նախապապերը,  իսկ MICROSOFT  FLIGHT  SIMULATOR-ը    նրանցից  ֆինանսապես  ամենահաջողվածն  է: ", "Այսպիսով՝  առաջին  գլխում  դիտարկեցինք  վերջին  տարիներին  կատարված աշխատանքները  օբյեկտների  հայտնաբերման,  ճանաչման  և  համալիր  տեսահսկման համակարգերի  համար։  Չնայած  նարագրված  մեթոդների  բոլոր  առավելություններին՝ կան  նաև  թերություններ  և  չլուծված  խնդիրներ։  Ատենախոսական  աշխատանքի նպատակն  է  մշակել  օբյեկտների  հայտնաբերման,  ճանաչման  և  տեղորոշման արդյունավետ, արագագործ և անսխալ աշխատող համալիր համակարգ։  Համակարգի արագագործությունը և արդյունավետ  աշխատանքը ապահովելու համար հարկավոր է մշակել այնպիսի մեթոդներ, որոնք կտան այդ խնդիրների լուծումները։ Հետևյալ բոլոր խնդիրների լուծումը առաջարկվում է 2-րդ գլխում։ ", "Նկար 22. Հայտնի «լուրջ խաղերի» օրինակներ: ", "լաբորատորիան, վերջին  տարիներին հաջողություններ  գրանցեց իրենց նորարարական  քարտային  խաղերով:  Ընկերության  կարգախոսն  է  «Խաղերի դիզայնը  սոցիալական  փոփոխության  համար»,  իսկ  Pox  և  Awkward  Moment  լուրջ խաղերի միջոցով, նրանք ուսուցանում են խաղացողներին այնպիսի լուրջ թեմաներ, ինչպիսիք  են  հակավակցինային  շարժումները  և  սոցիալական  կարծրատիպերից խուսափումը: ", "մասին:  Այնուհետև  Breakaway  Games-  ը  ստեղծեց  վիդեո  խաղ՝  հիմնված  Սերբիայի Otpor շարժման վրա:  Խաղը նախատեսված էր սովորեցնել վարել հակամարտություն օգտագործելով ոչ բռնի մեթոդներ: ", "Առաջարկված  «CA  simulator»  ծրագրային  համակարգում  ավելացվել  է  նոր մոդուլ,  որը  հանդիսանում  է  «լուրջ  խաղի»  օրինակ  SandGame  անվանմամբ: ", "«SandGame»-ը  [45]  իրականավել  է  հիմնվելով  ավազակույտի  աբելյան  մոդելի  վրա՝ նպատակ ունենալով խթանել ինքնակազմակերպվող համակարգերի հետազոտումը և  դյուրըմբռումը,  և  ունի  լուրջ  մտածված  կրթական  նպատակ,  հետևաբար  չի նախատեսվում օգտագործել միայն զվարճանքի համար, մինչդեռ այն բավականին գրավիչ  է  զվարճանքի  տեսանկյունից:  Իրականացված  խաղի  մոդելի  գաղափարը հիմնված է  ավազակույտի  մոդելին  առնչվող  տարբեր  թեորեմների  և տեսությունների  վրա,  որոնք  իրենց  հերթին  բարելավվում  են  ուսուցման խորությունը  և  բարձրացնում  են  գրավչությունը:  Անշուշտ,  բուհերի  և  դպրոցների համար  անհրաժեշտ  է  գիտական  խաղերի  հագեցած  ուսուցման  մեխանիզմների գոյությունը:  SandGame  խաղում  ավազակույտի  մոդելը  դիտարկվել  է  եռաչափ  և երկչափ  կապակցված  ցանցի  վրա  (Նկար  23):  Ցանցի  կապակցվածությունը հնարավորություն  է  տալիս  մոդելում  ունենալ  հավասարազոր  գագաթներ  ըստ հարևանների  քանակի,  ինչպես  նաև  թույլ չի  տալիս  մոդելին  կորցնել ավազահատիկ: ", "«SandGame»  խաղը  միաժամանակ  ապահովում  է  երկչափ  և  եռաչափ տեսաբերում,  ինչպես  նաև  դիտման  անկյունների  փոփոխություն  և  շերտերի առանձին  դիտման  հնարավորություն:  Վերոնշյալից  զատ,  SandGame-ում  կա  նաև մոդելի տվյալ պահին վերաբերող համապատասխան բնութագրիչների հաշվարկ և տեսաբերում  իրական  ժամանակում,  որոնք,  ավազակույտի  մոդելին  վերաբերող բազմաթիվ  թեորեմների  հետ  մեկտեղ  նպաստում  են  օգտատերերի  ավելի  ճշգրիտ որոշումների կայացմանը: Նշենք նաև, որ SandGame-ը չունի ինչպես հոսթինգների, այնպես էլ միևնույն հոսթինգի օգտատերերի քանակի սահմանափակումներ: ", "Նկար 23.SandGame խաղը երկու խաղացողների դեպքում: ", "Խաղում  օգտագործողների  նպատակն  է  հասնել  անվերջ  անկայուն  վիճակի հերթով  գցելով  ավազահատիկներ՝ օգտագործողների կողմից ընտրված կոորդինատներին:  Խաղը՝  դիտարկված  լինելով  փակ  եզրակետերով  ցանցի  վրա, հնարավորություն  է  ընձեռում  մոդելին  չկորցնել  ավազահատիկ:  Հետևաբար, կարելի  է  վստահ  լինել  վերջավոր  ժամանակում  հաղթող  ճանաչվելու  փաստում: "], "paragraph_source_docs": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1], "source_docs_file": "Informatics and Computer Systems.json"}