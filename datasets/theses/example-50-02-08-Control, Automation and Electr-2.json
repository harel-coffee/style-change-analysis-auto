{"paragraph_source_docs": [2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 2, 2, 0, 4, 2, 2, 2, 2, 2, 2, 2, 1, 2, 0, 2, 2, 2, 3, 3, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2], "paragraphs": ["  Դիտարկման  ավարտի չափորոշիչի  ընտրություն:  Դա  կարող  է լինել դիտարկումների  ֆիքսված  քանակ,  կամ  դիտարկումները  կարող  են  կատարվել, քանի  դեռ  դրանք  փոքրացնում  կամ  զգալիորեն  փոքրացնում  են  հատումների ընդհանուր քանակը: ", "Մեքենայական  ուսուցման  մյուս  կարևոր  առավելությունն  այն  է,  որ  նախագծման բնութագերերի  արագ գնահատման  մեթոդը շատ  արագ կարող է անցում կատարել մեկ տեխնոլոգիայից  մեկ  այլ  տեխնոլոգիայի:  Անհրաժեշտ  է  ստեղծել  նախագծման բնութագրերի  տփալների  բազաներ  տարբեր  տեխնոլոգիաների  դեպքում:  Միևնույն մեքենայական  ոսուցման  մոդելը  հնարավորություն  կտա  գնահատել  նախագծման բնութագրերի  արժեքները  տարբեր  տեխնոլոգիաների  դեպքում:  Ինչպես  նկատում  ենք մեքենայական  ուսուցման  կիրառումը  հնարավորություն  է  տալիս  ամբողջությամբ ավտոմատացնել  նանոչափական  հիշող  սարքերի  համար  թեստային լուծումներ հեներացնող  ք^\"1\"Լ  կոմպիլյատորների  հիերարխիայի  նախագծման  բնութագրերի  արագ գնահատման  գործընթացը'  էապես  կրճատելով  մեթոդի  իրականացման  ժամանակը  և լուծելով նախագծման  բնութագրերի  գնահատման  հետ  կապված բոլոր  խնդիրները: ", "Վերոհիշյալ  մեթոդներից  մեկը  հիմնված  է  տեսակավորման  ալգորիթմների  վրա  [57, նվազագույնի:  Հեշտ  է  նկատել,  որ  ընտրված  երկու  տարրերի  համար՝  u  ∈  R2  և  v  ∈  R2, դրանց  հարևան  տարրերի  հետ  հատումների  քանակը  կախված  է  միայն  այդ  երկու տարրերի  հարաբերական  դիրքերից:  Այսպիսով,  կարող  ենք  դիտարկել  հատումների - 59 - քանակը՝ փոխելով տրված ռանգում տարրերի հարաբերական դիրքերը: Հենց տարրերի հարաբերական դիրքերը փոխելու վրա էլ հիմնված են  տեսակավորման ալգորիթմներն օգտագործող  մեթոդները:  Այդպիսի  մեթոդները  պետք  է  արագ  հաշվեն  հատումների պոտենցիալ  քանակը:  Դա  կարող  է  կատարվել  ուղակի  O(|W|2)  ժամանակում  կամ լավարկել մինչև O( ), որտեղ KUV-ն հատումների քանակն է, որն առաջանում է u և v տարրերի  զույգի  միջոցով:  Հնարավոր  հատումների  հաշվարկը  յուրաքանչյուր  զույգի դեպքում  պետք  է  կատարել  միայն  մեկ  անգամ  (դա  էլ  հենց  տալիս  է  տարրերի բազմության դասավորությունը): ", "Տեսակավորման մեթոդների վրա հիմնված ալգորիթմներից մեկն իր էությամբ նման է պղպջակների  մեթոդին  (bubble  sort)  [57,  59]:  Հերթականությամբ  դիտարկվում  են հարևան գագաթների բոլոր զույգերը, և դրանք տեղերով փոխվում են, եթե այդ դեպքում հատումների  թիվը  կփոքրանա:  Գործընթացն  ավարտվում  է,  երբ  հերթական  լրիվ դիտարկումից  հետո  (բոլոր  տարրերով  անցնելուց  հետո)    հատումների  քանակը  չի նվազում  (չկարգավորված  զույգ  չի  գտնվում):  Այս  ալգորիթմի  բարդությունը  O(|R2|2)  է, քանի որ վերջնական կարգավորություն ստանալու համար կարող են անհրաժեշտ լինել մինչև անգամ |R2| դիտարկումներ: Այսպիսի ալգորիթմի ընտրությունը խիստ կախված է նախնական  դասավորության  ընտրությունից,  քանի  որ  դիտարկվում  և  տեղափոխվում են միայն իրար հարևան տարրերը: ", "Հաջորդ  մեթոդը  հիմնված  է  արագ  տեսակավորման  (quick  sort)  ալգորիթմի գաղափարի վրա [57, 60, 61]: Սկզբում ընտրվում է «միջին» տարր, իսկ մնացած տարրերը բաժանվում  են  երկու  բազմությունների՝  կախված  նրարից,  թե  դրանք  ինչ հարաբերությունների մեջ են գտնվում ընտրված տարրի հետ: Հետո նման պրոցեդուրա ռեկուրսիվ  կիրառվում  է  ստացված  բազմություններից  յուրաքանչյուրի  նկատմամբ: ", "Վատագույն դեպքում տվյալ ալգորիթմի բարդությունը, ինչպես արագ տեսակավորման ալգորիթմի  դեպքում,  համարվում  է  քառակուսային,  սակայն  միջինում  ալգորիթմը պահանջում է ընդամենը O(|R2| log|R2|) գործողություններ: ", "Հաջորդ մեթոդի համաձայն՝ ալգորիթմը ամեն քայլում վերցնում է տարրերից մեկը և փորձում  այն  դնել  այնպիսի  տեղում,  որ  ստացվի  հատումների  փոքրագույն  թիվ:  Դրա համար  ալգորիթմը  փորձում  է  տարրը  տեղադրել  յուրաքանչյուր  հնարավոր  տեղում    և - 60 - հաշվում է ստացված հատումների քանակը: Քանի որ տարրը մի դիրքով տեղափոխելիս շղթաների  հատումների  քանակի  փոփոխությունը  կարելի  է  հաշվել  հաստատուն ժամանակում  (օգտագործելով  լրացուցիչ  հավաքված  ինֆորմացիա),  ապա  ալգորիթմն ունի  քառակուսային  բարդություն  և  իր  էությամբ  նման  է  ներդրումներով տեսակավորման մեթոդին (insertion sort)[57, 62, 63]: ", "Ինչպես արդեն նշվել է, ցանկացած դասավորության որոշման մեթոդ, որը հիմնված է տեսակավորման  ալգորիթմների  վրա  և  պետք  է  աշխատի  տարրերի  զույգերի  հետ,  չի կարող իրագործվել գծային ժամանակում: Հետևաբար, վերոհիշյալ մեթոդներից ոչ մեկը չի կարող ունենալ գծային բարդություն: ", "Գործնականում  ավելի  լայն  կիրառություն  ունեն  բարիկենտրոնի  և    միջին  արժեքի վրա  հիմնված  մեթոդները[64,  65]:  Բարիկենտրոնի  մեթոդի  դեպքում  v  ∈  R2        տարրի կոորդինատը  որոշվում  է  որպես  R1  ռանգին  կապած  բոլոր  տարրերի  կոորդինատների միջին թվաբանական. avg(u) = , որտեղ  N(u) :=  {v | (u,v) ∈ W}։               (2.8) Եթե  վերադասավորելուց  հետո  որոշ  տարրերի  կոորդինատներ  համընկնում  են, ապա  դրանք  տեղադրվում  են  նվազագույն  հեռավորության  վրա՝  կամայական հերթականությամբ:  Այս  մեթոդի  ամենահայտնի  տարբերակը  միջին  արժեքի  մեթոդն  է [66],  երբ  միջին  թվաբանականի  փոխարեն  օգտագործվում  է  x1  ռանգի  միջին  հարևանի կոորդինատը,  այսինքն՝  եթե  u1,  u2,  …,  um  ∈  R1  v  տարրին  հարևան  տարրերն  են,  ընդ որում,  x1(u1)  <  x1(u2)  <  …  <  x1(um),  ապա  x2(v)  =  med(v)-ն  որոշվում  է  որպես  x1(uavg):  Այն դեպքում,  երբ  med(v)  =  med(u),  և  v-ն  ունի  կենտ  աստիճան,  իսկ  u-ն՝  զույգ,  ապա  v-ն տեղադրվում է  u-ից  առաջ։ Իսկ եթե  աստիճանների  զույգությունը համընկնում է,  ապա հերթականությունը  որոշվում  է  կամայականորեն:  [67]  աշխատանքում  ցույց  է  տրված, որ  միջինները  կարող  են  գտնվել  O(|N(u)|)  ժամանակում,  ինչը  այս  մեթոդը  դարձնում  է նուjնքան արագ, որքան բարիկենտրոնի մեթոդը: ", "Ենթադրենք` opt(G,x1)-ն տվյալ գրաֆի համար հնարավոր նվազագույն հատումների քանակն  է,  որտեղ  x1-ը  տարրերի  դիրքերն  է  R1-ում,  avg(G,x1)-ն`  հատումների  քանակy բարիկենտրոնի  մեթոդի  կիրառումից  հետո,  իսկ  med(G,x1)-ը՝  հատումների  քանակը - 61 - միջին  արժեքի  մեթոդից  հետո:  Բերենք  մի  քանի  պնդումներ  բարիկենտրոնի  և  միջին արժեքի մեթոդների վերաբերյալ [54]: ", "հատումների, ապա և՛ բարիկենտրոնի, և՛ միջին արժեքի մեթոդները կգտնեն այդ լուծումը,  այսինքն,  եթե  x1  դասավորությունը  այնպիսին  է,  որ  opt(G,x1)  =  0,  ապա avg(G,x1) = med(G,x1) = 0: ", "|R1|  =  n,  |R2|  =  2,  և  R1-ի  տարրերի  այնպիսի  x1  դասավորություն,  որ  avg(G,x1)/ opt(G,x1) համեմատական է n1/2: ", "որտեղ  |R’1|  =  n,  |R’2|  =  2,  և  R’1-ի  տարրերի  այնպիսի  x’1  դասավորություն,  որ med(G’,x’1)/ opt(G’,x’1) ≥ 3 – O(1/n) (R1,  R2,  W)  երկկողմանի  գրաֆի  և  R1-ի  տարրերի  ցանկացած  x1 դասավորության համար ճիշտ է med(G’,x’1) ≤ 2 * opt(G’,x’1) անհավասարությունը, եթե R2-ի գագաթները չունեն երեքից ավելի շղթաներ: ", "Այս  մեթոդի ձևափոխված տարբերակը կիրառվել է այս  աշխատանքում, որի ավելի մանրամասն նկարագրությունը ներկայացված է 3․ 4 գլխում։ ", "Այսպիսով,  հետազոտվել  է  ինտեգրալ  սխեմաների՝  «փափուկ»  և  «կոշտ»  բլոկների՝ ֆիզիկական  կառուցվածքների  տեսքով    ներկայացումը։  Ներկայացվել  են  «փափուկ»  և «կոշտ»  բլոկների հատկությունները։ Հետազոտվել են արդի ալգորիթմական լուծումներ՝ գրաֆում  և  ԻՍ-ում  շղթաների  հատումների  քանակի  նվազարկման  և  արագագործ ավտոմատացման միջոց մշակելու նպատակով։ ", "Տրամաբանական տարրերի փոխանջատման ակտիվությունների միջոցով դինամիկ հզորությունների գնահատումը՝ որպես սխեմատեխնիկական առանձնահատկությունների հաշվառմամբ ֆիզիկական կառուցվածքի ստացման Եթե (1.6) արտահայտությունում տարրերի տեսակարար դինամիկ հզորություններն ու  բջիջների  թվային  ստանդարտ  գրադարանի  աշխատանքային  հաճախականությունը միջոց - 62 - հայտնի  են  դառնում  գրադարանի  ընտրության  արդյունքում  և  կախված  չեն  սխեմայի տրամաբանական  ակտիվությունից,  ապա  տարրերի  փոխանջատման  ակտիվությունը ուղղակիորեն  կախված  է  սխեմայի  տրամաբանությունից  և  տվյալ  տարրի  սխեմայում տեղաբաշխման  վայրից:  Ուստի  ֆիզիկական  նախագծման  համար  կարևոր  է  մշակել այնպիսի  միջոցներ,  որոնք  թույլ  կտան  հաշվի  առնել  տրամաբանական  սխեմայում տարրերի  փոխանջատման  ակտիվությունը՝  դրանց  իրական  հզորության  գնահատման ժամանակ: ", "Փոխանջատման  ակտիվության  գնահատականը  հիմնված  է  տրամաբանական տարրի ելքին ազդանշանային հավանականության բնութագրման վրա [68]. Ազդանշանային  հավանականությունը  տրամաբանական  տարրի  ելքին «1» ազդանշանի  առաջացման  հավանականությունն  է,  որը  կարելի  է  հաշվարկել  տվյալ տարրի իսկության աղյուսակով: ", "Հիմնական տրամաբանական տարրերի ելքին ազդանշանային hավանականությունները՝  փոխակերպիչի (ինվերտորի)  տիպի,  և(AND),  կամ(OR), որոշվում են հետևյալ կերպ՝ ,                (2.9) որտեղ Pi –ն  տրամաբանական  տարրի i-րդ մուտքի  ազդանշանային հավանականությունն է, m –ը՝ տրամաբանական մուտքերի քանակը: ", "Նկար 2.2. Մուտքային ինֆորմացիայի ֆիլտրման և դասակարգման հաջորդական գործընթացը Այսպիսով՝ մուտքային տվյալների մշակման մեխանիզմը թույլ է տալիս ստացված տարատեսակ  էլեկտրոնային  նամակներից  զտել  միայն  համակարգի  համար ընդունելիները։  Նամակները  նախ  անցնում  են  ֆիլտրման  գործընթացով՝  ըստ համակարգի  սահմանված  չափորոշիչների,  այնուհետև  որոշվում  է յուրաքանչյուր նամակին համապատասխանող հրահանգը, որից հետո այն ուղարկվում է կատարման (Նկար 2․2)։ ", "Մատակարարման  ցանց:  Ցածր լարման  նախագծի  սահմանափակումները բնորոշելու  համար  անհրաժեշտ  է  սահմանել  հզորության  մատակարարման  ցանցը' հզորության  սպառման  նվազեցման  նպատակներով:  Լ ^ - ն   օգտագործելով հնարավոր է աբստրակտ  մակարդակում սահմանել այդ ցանցը:  Այն  բաղկացած է մատակարարման պորտերից, մատակարարման  լարերից, հզորության  անջատիչներից, և բյուրեղի  բարձր- մակարդակի  աբստրակցիայի  էլեկտրական  ցանցից:  Այդ  ցանցը  բաղկացած  է մատակարարման  պորտերից, մատակարաարման լարերից  և հզորության անջատիչներից,  և բյուրեղի  էլեկտրական ցանցի  բարձր  մակարդակի  աբստրակցիայից: ", "Այսպիսով,  կարևորվել  է  ԻՍ-ի  տրամաբանական  նախագծումից  ֆիզիկականին անցնելիս  տրամաբանական  տարրերի  աշխատանքային  հզորությունների  արժեքների հաշվի առնելը  ԻՍ-ի տակդիրի վրա դրանց տեղադրման ժամանակ։ ", "Ֆիզիկական  նախագծման  ընթացքում  տրամաբանական  սխեմայի  աշխատանքի առանձնահատկությունների  տեսանկյունից  հրատապ  է  դառնում,  տրամաբանական տարրերի  աշխատանքային  հզորություններից  ելնելով,  դրանց  տեղաբաշխման մեթոդների  մշակումը:  Եթե  ընդունենք,  որ  հզորության  ստատիկ  բաղադրիչը գործնականում  է  կախված  չէ  սխեմայի  աշխատանքի  տրամաբանությունից,  ապա տարրերի  տեղաբաշխման  փուլում  հզորությունների  գնահատման  համար  կարող  է օգտագործվել միայն հզորությունների դինամիկ բաղադրիչը: ", "Մշակված  մեթոդը։  Մշակվել  է  օգտատերերի  գրանցման  համակարգ։  Այն  թույլ  է տալիս  միարժեք  կերպով  համապատասխանեցել  օգտատիրոջ  հեռախոսահամարն  ու էլեկտրոնային հասցեն։ Գրանցման գործառույթի ապահովման նպատակով  համակարգի արտաքին ինտերֆեյսում ավելացվել է նոր հրահանգ։ ", "Մշակվել  է  մեթոդ  ք^\"1\"Լ  կոմպիլյատորների  նախագծման  բնութագրերի  արագ գնահատման  համար'  հիմնված  ռեգրեսիոն  անալիզի  ւիոքրագույն  քառակուսիների մեթոդի  վրա,  որը  բարելավում  է  գնահատման  սխալը:  Մշակված  մեթոդն  առաջին անգամ  ընդլայնվել  է  ք^\"1\"Լ  կոմպիլյատորների  ամբողջ  հիերարխիայի  նախագծման բնութագրերի արագ գնահատման  համար: ՀՆԹՑ-ի նախագծման բնութագրերի  արագ գնահատման  մեթոդի իրականացման ժամանակատարությունը պակասեցնելու համար մշակվել է մեթոդի  ընդլայնում,  որը  հիմնված է մեքենայական  ուսուցման  վրա: ", "նկարագրից  ԱԳՀ-ի  ստացման  այնպիսի  մոտեցման  մշակումը,  որով  հնարավոր կլինի  խուսափել  անցանկալի  մեծ  հիշողության  օգտագործումից  և  ստանալ ավտոմատացված միջոցի ցանկալի մեծ արագագործություն։ ", "- 64 - սխեմատեխնիկական  առանձնահատկությունների  հաշվառմամբ  ֆիզիկական կառուցվածքի ստացման միջոց։ ", "կառուցվածքների  տեսքով    ներկայացումը։  Ուսումնասիրվել  են  «փափուկ»  և «կոշտ»  բլոկների հատկությունները։ ", "հատումների  քանակի  նվազարկման  և  արագագործ  ավտոմատացման  միջոց մշակելու նպատակով։ ", "տրամաբանական տարրերի տեղաբաշխման ժամանակ, դրանց աշխատանքային հզորությունների արժեքների գնահատումը և հաշվառումը: ", "առանձնահատկությունների տեսանկյունից՝ հրատապ է դառնում, տրամաբանական  տարրերի  աշխատանքային  հզորություններից  ելնելով,  դրանց տեղաբաշխման  մեթոդների  մշակումը:  Եթե  ընդունենք,  որ  հզորության  ստատիկ բաղադրիչը գործնականում կախված չէ սխեմայի աշխատանքի տրամաբանությունից,  ապա  տարրերի  տեղակայման  փուլում  հզորությունների գնահատման  համար  կարող է  օգտագործվել  միայն  հզորությունների դինամիկական բաղադրիչը: ", "գնահատման  մեթոդ՝  կախված  տարրի  տիպից,  սխեմայի  տրամաբանությունից  և դրանում տարրի դիրքից: ", "Անհրաժեշտության դեպքում ԹՆևՀԹԱՍ ծրագրային ԱՀ-ը հնարավորություն է ընձեռում իրականացնել.  ա) թեստային  ալգորիթմների  աշխատանքի  ամբողջական արդյունավետության հաստատումը, բ) թեստային ալգորիթմների յուրաքանչյուր  Մարշ ալգորիթմի  տարրերի  առանձին  ստուգումը,  գ)  թեստային  ալգորիթմների  քայլ  առ  քայլ ստուգումը: ", "Այսպիսի  մոտեցումը  պետք  է  նպաստի  միջմիացումների  երկարությունների  և հատումների  կրճատմանը։  Այս  մոտեցմամբ  մշակված  են  որոշակի  կանոններ,  որոնք թույլ  են  տալիս  տրամաբանական  սխեմայի  տարրերի  ռանգավորումից  «փափուկ»  և «կոշտ»  բլոկների  սինթեզման  ժամանակ,  ըստ  հնարավորության,  ԻՍ-ի  տակդիրի  վրա տարրերը  տեղաբաշխել  այնպես,  որ  դրանց  ֆիզիկական  հաջորդականությունը համապատասխանի  ազդանշանների  հոսքի  ուղղությանը։  Բացի  այդ,  հատուկ ուշադրություն  է  դարձված  ամենաերկար  կապերի  երկարությունների  կրճատման անհրաժեշտությանը,  որոնք  որոշվում  են  որոշիչ  ուղիների  վրա  ազդանշանների տարածման հապաղմամբ։  Այս նպատակով ներմուծված է  տարրերի փոխկապվածության կարևորության գործակից, որը հաշվի է  առնում համապատասխան շղթայի կարևորությունը սխեմայի արագագործության տեսանկյունից: ", "Եզրակացություն։  Այսպիսով՝  համակարգում  գրանցումն  իրականացվում  է  2 փուլով։ Առաջին փուլում օգտատերը համակարգում ստեղծում է հաշիվ, իսկ երկրորդում վավերացնում է մուտքագրված  տվյալների իսկությունը։ Այս մեթոդը հնարավորություն է  տալիս  միարժեք կերպով համապատասխանեցնել օգտատիրոջ բջջային հեռախոսահամարը և նրա էլեկտրոնային հասցեն։ ", "Սխեմայի փականային մակարդակի Veilog նկարագիր G(V,E) V={v1, v2,…,vm}; E={e1, e2,…,en} Ազդանշանների հոսքի գրաֆի կառուցում Տարրերի տրամաբանական ռանգավորում Ֆիզիկական «փափուկ» կառուցվածքով բլոկ v2 v3 v4 v2 v3 v4 v2 v3 v4 v1 v1 v1 v5 v6 v5 v6 v5 v6 v5 v6 Ռանգ 1 Ռանգ 2 Ռանգ 3 Ֆիզիկական «կոշտ» կառուցվածքով բլոկ v2 v1 v3 v4 Նկ․  3․1․   Սխեմատեխնիկական  առանձնահատկությունների հաշվառմամբ  ԻՍ-ի  ֆիզիկական  նախագծման  քայլերի հաջորդականությունը Ներկայացված  ալգորիթմական  ապահովման  համար  որպես  մուտքային  տվյալներ  են ծառայում  1.4  ենթագլխում  ներկայացված  խնդրի  դրվածքին  համապատասխանող մուտքային պարամետրերը։ ", "- 67 - հոսքի գրաֆի ԻՍ-երի ֆիզիկական նախագծման ժամանակ սխեմայի ֆունկցիոնալ- տրամաբանական  առանձնահատկությունների  հաշվառման  առաջարկվող  մոտեցումը ենթադրում  է  տվյալների  մշակման  սխեմայի  փականային  մակարդակի  Verilog նկարագրության  նախնական  փոխակերպումը  ազդանշանների  հոսքի  գրաֆի  (ԱՀԳ)՝ G(W,C)  [69-72],  որտեղ  C={c1,  c2,…,cm}–ը  տարրերի  բազմությունն  է  ,  W={w1,  w2,…,wn}  -ը՝ շղթաների  բազմությունը։  Հետագայում,  ստացված  ԱՀԳ-  ի  հիման  վրա,  կատարվում  է սխեմայի տրամաբանական բջիջների դասակարգում, որի արդյունքներն օգտագործվում են դրանց տեղաբաշխման ժամանակ: ", "Այսպիսով,  եթե  տրված  են  ինտեգրալ  սխեմայի  փականային  մակարդակի  Verilog նկարագիրը,  սահմանափակումները  (չափերը՝  {ai,  hi},  i  = },  որտեղ  m-ը  տարրերի քանակն  է)  պարունակող  մուտքային  զանգվածը,  ապա  ԱՀԳ-ի  մոդելի  ստեղծման հիմքում ընկած է հետևյալ հիմնական քայլերից բաղկացած ալգորիթմը․ վերլուծություն  և  ստուգել՝  արդյո՞ք  այն  վավեր  է,  թե  ոչ։  Կատարել համեմատություն նախնապես տրված վավեր ֆայլի հետ, ;  k-ն  մուտքային շղթաների քանակն է, ;  q-ն  ելքային  և մուտքային շղթաների գումարային քանակն է, ;  n-ը  բոլոր ; m-ը տարրերի քանակն է, շղթաների քանակն է, հետ, ստանդարտ  բջիջների  գրադարանի՝ {ai,  hi}, i  = ,  որտեղ  ai  և  hi համապատասխանաբար Ci տարրի երկարությունը և բարձրությունն են, - 68 - , որոնց արժեքները  վերցվում  են  սխեմայի  ստատիկ  ժամանակային  վերլուծության արդյունքից: ", "Նկ. 4.1 (բ)-ում պատկերված Triangle ազդանշանի սպեկտրից երևում է, որ վերջինիս հարմոնիկաների  հզորության  մակարդակները  բավականին  կտրուկ  են  նվազում  և առաջին ու երկրորդ հարմոնիկաների հզորության մակարդակների միջև տարբերությունը զգալի չափով մեծ է: ", "Ինչպես  երևում  է  նկ.  4.1  (գ)-ում  Square  ազդանշանի  հարմոնիկաների  հզորության մակարդակները նվազում են համեմատաբար սահուն կերպով և ի տարբերություն մյուս ազդանշանների ունեն բարձր արժեքներ: ", "Նկ․  3․2․   Սխեմայի  փականային  մակարդակի  Iscas85 գրադարանի թեստային c17.v Verilog նկարագիրը - 69 - Ալգորիթմի  նկարագրության  համար  կօգտագործենք  օբյեկտակողմնորոշված ծրագրավորման (ՕԿԾ) որոշակի տերմինաբանություն, որը կնպաստի նկարագրության հակիրճ  և  ձևայնացած  ներկայացմանը:  Ինչպես  հայտնի  է,  ՕԿԾ  –ն  ծրագրավորման մոտեցում է, որի գաղափարական հիմք են հանդիսանում օբյեկտ և դաս հասկացությունները [73, 74]։ ", "•  Հիշողությունը չի  անցնում  թեստավորումը:  Անսարք  սյուների քանակն  ավելի քիչ է,  քան  առկա  է  հավելյալության  մեջ:  Այս  դեպքում  հնարավոր  է  վերանորոգել սարքը  և թողարկվում  է վերանորոգման գործընթացը:  Վերանորոգման  դեպքում առո . . ............................................ ՀՆԹՏ-ի  կիրառումը  հնարավորություն  է  տալիս որոշակի համար ՀՆԹՅ֊ը SoC eFUSE Изз 3  . Memory  “ 55J > System  П Т Я Server CPU STAR Memory System Processor IEEE 1500 Wrapper 1 Wrapper 1 Wrapper IP RF DP SRAM RF J   STAR Memory System solution IEEE 1500 Memory  н Controller Memory ^ S y s t e m  eFlash/ STAR Memory System Ext  RAM MRAM Processor Wrapper eFlash/ MRAM Off chip memory Ex. DDR/LPDDR STAR Memory System Silicon Browser STAR Memory System Yield Accelerator Նկար  33-ում  ներկայացված  է  «Մենթոր  Գրաֆիքս»  ընկերության  ներկառուցված հիշողությունների  ՀՆԹՅ-ի ճարտարապետությունը:  Այն  կոչվում է  16ՏՏ6ոէ հ/16րոօ^61Տ1: ", "Ֆայլից տվյալների կարդալը կատարվում է հետևյալ կերպ՝ դատարկ  տողեր,  ապա  ծրագիրը  դրանք  անտեսում  է,  օրինակ՝  1,  2,  6,  8  և  15-րդ տողերը, (տող 3), ամեն տարրի ինֆորմացիան․ դա կատարվում է մի քանի քայլերով (տող 4, 5, 7 )՝   Հերթական  էլեմենտը  կարդալուց  հետո,  նրան  տրվում  է id։ ", "id-ն ներկայացնում է բնական թիվ, այսինքն՝ ամեն էլեմենտ կունենա իր եզակի թիվը։ Օրինակ 4-րդ տողում 1-ին տարրը կլինի G1-ը, իսկ նրա id-ն կլինի 0, կատարվում է output և wire -ների (տող 5 և 6) դեպքում։ ", "  ԱՀԳ-ում ստեղծվում է map[75, 76](տարրի անունից դեպի իր id) կամ արդեն ստեղծված  map-ի  մեջ  ներմուծվում  է  հերթական  տարրը՝  իրեն  տրված  id- ով։  map-ը  բինար  որոնման  բալանսավորված  ծառ  է։  Նրա  ամեն  տարրը ներկայացնում  է {key,  value}  զույգ։  Որոնումը  և  բալանսավորումը կատարվում  է  key-ի  միջոցով,  որոնք  ծառի  մեջ  չեն  կարող  կրկնվել,  իսկ value-ն  ներկայացնում  է  ցանկացած  տվյալ։  Մեր  օրինակում  key-ը  Id-ն  է, իսկ value-ն՝ G1 կամ G2 … (նկ․ 3․ 5) - 70 -   ԱՀԳ-ում առանձին կոնտեյներում (C++ լեզվի ստանդարտ գրադարանից են, ներկայացնում են՝ զանգված[77,78])  պահվում են input, output, wires՝ իրենց համապատասխան տարրերի id-երով։ Այսպիսով՝ փականների անունների փոխարեն  ստանում  ենք  id-  եր՝  թվի  տեսքով,  ինչն  էլ  հետագայում  կազդի ծրագրի արագագործության վրա։ ", "Առաջինը պահում է տրամաբանական տարրի ինֆորմացիան։ ", "Երկրորդը՝  այդ  տարրերը  իրար  կապող  շղթաների  ինֆորմացիան  (աղ․ 3․ 1, աղ․ 3․ 2)։ ", "Օրինակ՝  նկ.2.4  -ում  պատկերված  գրաֆում  NAND2_0,  NAND2_1,  NAND2_2, NAND2_3,  NAND2_4,  NAND2_5  անուններով  տարրերը  գրաֆի  գագաթներն  են, որոնք  էլ  այս  ծրագրում  հանդես  են  գալիս  որպես  Cell-օբյեկտներ,  իսկ  այդ գագաթները իրար կապող շղթաները՝ որպես Wire-ներ՝ G1, G2, G3, G4, G5, G8, G9, G12, G15, G16, G17 ։ ", "կարդալուն(տող  9-14)։  Դիտարկենք  ծրագրի  աշխատանքը  9-րդ  տողում։ ", "Այն ներկայացնում է՝   ստանդարտ տարրի անուն՝ nand,   տարրի անուն՝ NAND2_0,   output փականի անուն՝ G8, input փականների անունները՝ G1,G3։ ", "Արդեն ունենալով ամեն տարրի id-ին՝ ԱՀԳ-ում կարողանում ենք ստեղծել Cell-եր և  Wire-ներ  հերթական  տողը  կարդալիս,  որոնք  էլ  ներմուծում  ենք  ԱՀԳ-ում պահվող  g_cells  և  g_wires  զանգվածներում։  Ներոմուծումն  իրականացվում  է այնպես,  որ  զանգվածում  տարրի  համարը  համապատասխանի  տարրի  id-ին, ինչն էլ կարագացնի հետագա ալգորիթմների աշխատանքը (զանգվածում տրված համարով տարրին դիմելը հաստատուն ժամանակում է կատարվում՝ O(1) է)։ "], "source_docs_file": "Control, Automation and Electrical Engineering.json"}