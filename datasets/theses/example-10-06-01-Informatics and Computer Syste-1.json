{"paragraph_source_docs": [0, 2, 2, 0, 1, 0, 2, 2, 0, 2], "source_docs_file": "Informatics and Computer Systems.json", "paragraphs": ["Վերոհիշյալ  հեշ  ֆունկցիայի  բլոկ-սխեման  ներկայացված  է  նկ.  15-ում:  Գաղտնի բանալին, որը նշանակված է K-ով, ունի 256 բիթ երկարություն և ազդում է բոլոր ներքին ֆունկցիաների  վրա,  բացառությամբ  Pad  և  Distribute:  K-ի  սկզբնական  արժեքը իտերացիայի յուրաքանչյուր փուլում փոփոխվում է KeyMutate ֆունկցիայի օգնությամբ: Այս ֆունկցիան  վերջին  փուլի  համար  ընդունում  է  K  և  Distribute  ելքային  տվյալները՝  որպես մուտքային տվյալներ և արտադրում է նոր փուլային բանալի, որը նշանակվում է RKj –ով, որը  ցույց  է  տալիս  գաղտնի  բանալին  իտերացիայի  j-րդ  փուլի  համար:  SortBlocks ֆունկցիան  ընդունում  է  RKj  և  XOR    արժեքները:  Այս  ֆունկցիան  գեներացնում  է  8 յուրատեսակ  թվային  արժեքներ,  որոնք  գտնվում  են  [0,  7]  միջակայքում:  Այս  արժեքները ցույց  են  տալիս  ֆունկցիաների  կարգավորվածությունը  ֆունկցիաների  զանգվածում: ", "Ճանաչման  գործընթացը  տարբեր  տեսահսկման  միջավայրերում  ապահովելու համար  ստեղծվել  են  հիմնական  օբյեկտների  տեսակներին  համապատասխան ձևանմուշներ։  Մշակվել  է  նաև  ծրագրային  ֆունկցիոնալ  բլոկ,  որը  որպես  մուտքային տվյալ  վերցնելով  թվային  պատկերը,  վերածում  է  համապատասխան  ֆորմատով ձևանմուշի, որը կարող է օգտագործվել ճանաչման գործընթացում։ ", "Մշակվել  է  նաև  մեթոդ,  որը  թույլ  է  տալիս  համակարգից  օգտվողին  կատարել ձևանմուշների  կոնֆիգուրացիա։  Այսինքն՝  օգտատերը  հնարավորություն  կունենա ձևանմուշները  դասավորել  ըստ  նախապատվության՝  ելնելով  տեսահսկվող  տարածքի առանձնահատկությունից։ ", "XOR M: մուտքագրման հաղորդագրություն Pad (M) Բաշխում (Ml) Բլոկ Բանալիի փոփոխում Թույլ կապեր Ուժեղ կապեր փոփոխում (K) HSum(Hl) H: վերջնարդյունք հեշ արժեք Նկ. 15. Հեշ ֆունկցիայի բլոկ-սխեման Նկ.  16-ում  ներկայացվել  է  fi  հաշվարկման  սխեման:  Իտերացիայի  յուրաքանչյուր փուլի համար ցանկացած fi ֆունկցիա ընդունում է RKj և դրա հետ կապված՝ Mi արժեքները և հաշվարկում դրանց համապատասխան a, b, c, d, e և f պարամետրերը: Այս հաշվարկը զբաղեցնում  է  6  ներքին  փուլեր,  իսկ  հաշվարկի  վերջում  ևս  մեկ  փուլ՝  օգտագործելով  Zi ֆունկցիաները, և տալիս  է IV –ի համապատասխան արժեքը: ", "Իսկ արդեն ուսուցումից հետո ունենում ենք այլ պատկեր, որտեղ նեյորնային ցանցը ուսուցման  արդյունքում  արժեքավորած է լինում նեյրոնների կշիռները ակտիվացիոն  ֆունկցիայի  շեմը  ճիշտ  հաղթահարելու  և  ցանկալի  արդյունքներ տալու համար(Նկար 45): ", "Այս  ընթացակարգը  տևում  է  8  փուլ,  և  հաշվարկման  վերջում  mutate  ֆունկցիան ստեղծում  է  նոր  փուլային  բանալու  վեկտոր:  Յուրաքանչյուր  իտերացիայի  սկզբում  RKj փոխանցվում է SortBlocks, և այն փոխակերպվում է XOR-ի օգնությամբ՝ գտագործելով Mi բոլոր արժեքները, որոնք նախատեսված են SortBlocks ֆունկցիայի մուտքային տվյալների ստեղծման համար: Կատարվում է ֆունկցիաների նոր տեսակավորում, և սկսվում է հաջորդ իտերացիան:  Բոլոր  իտերացիաների  վերջում  HSum  ֆունկցիան  ընդունում  է fi ֆունկցիաների ելքային արժեքները և արտադրում է հեշի ելքային արժեքը: ", "RGB  եռաչափ  վեկտորի  անկախ  կանալներիի  արժեքների  վրա  կառուցված գրաֆիկները  համեմատվել  են  յուրաքանչյուր  տոնային  արժեքի  պիքսելների  քանակի հետ, արդյունքում հաշվարկվել են թիրախի և նմուշի պատկերների հիստագրերը։ ", "Նշանակենք –ը  թիրախ  օբյեկտի  հիստագիրը, –ը՝  ձևանմուշի  օբյեկտի հիստագիրը,  որտեղ  i-ն  կարող  է  ընդունել  արժեք  0-ից  մինչև  255-ը։  Վերջինս  RGB-ի յուրաքանչյուր ուղու մակարդակի արժեքն է, և x=(R,G,B). Այսպիսով՝ որտեղ որտեղ (2.14) որտեղ  (r,c)-ը  ցույց  են  տալիս  ձևանմուշի  պատկերի  վերին  ձախ  անկյան  MxN  չափի հարթության  կոորդինատները՝  թիրախ  օբյեկտի  պատկերի  նկատմամբ:  Եթե  թիրախ պատկերն ունի A×B չափը, ապա և : ", "Հավասարում (3.5)-ում l-ը նշանակում է հեշավորման ելքի երկարությունը: ", "Նկար 2.20. Թիրախային և նմուշային պատկերների յուրաքանչյուր փիքսելի արժեքը: "]}