{"paragraph_source_docs": [1, 2, 2, 2, 2, 0, 0, 1, 2, 0, 0, 2, 1, 1, 2, 1, 0, 1, 2, 2, 0, 0, 1, 0, 1], "paragraphs": ["-ի 𝑃𝑃𝑃𝑃𝑠𝑠 𝑃𝑃𝑃𝑃𝑖𝑖 ելքային  արժեքը  կարող  է  օգտագործվել  որպես մուտքային  արժեք 𝑃𝑃𝑃𝑃𝑖𝑖 հետագայում,  կամ  նեյրոնային  ցանցից  որպես  ելքային  արժեք: ", "Քանի  որ  այգորիթմը  աշխատում  է  ուղիղ  ռեժիմով  նկարահանմանը  զուգահեռ, այն  կստանա  նոր  պատկերը,  որում  առկա  է  օբյեկտը  և  կկիրառի  XOR  բիթային համենատություն  սկզբնական  պատկերի  նկատմամբ:  Հետևաբար,  կստանանք  Նկար Նկար 2.3․ XOR բիթային համենատության արդյունքը: ", "Ինչպես  գիտենք,  բիթային  XOR-ը  կատարում  է  համեմատությունը  երկու պիքսելների(բիթերի) միջև՝ արդյունքում վերադարձնելով 1, եթե երկու բիթերը տարբեր են,  և  0,  եթե  դրանք  նույնն  են:  Նկար  2.3-ում  XOR  բիթային  համենատության արդյունքում վերադարձված 1-ը արտահայտված է սպիտակ գույնով, իսկ 0-ն՝ սև: ", "Դիտարկենք այն դեպքը, երբ օբյեկտը հայտնվում է պատկերում նկարահանումը սկսելուց  ոչ  թե  սկզբում,  այլ  երկար  ժամանակ  անց(օր.  4  ժամ  անց),  երբ  պատկերում արևի  պայծառության  փոփոխության  պատճառով  բոլոր  պիքսելների  գունային արժեքները  փոխված  են:  Այս  դեպքում  XOR  բիթային  համենատության  արդյունքում վերադարձվում  է  0  բոլոր  պիքսելների  համար,  և  արդյունքը  կստացվի  լիովին  սև պատկեր,  օբյկետը չի  հայտնաբերվի:  Այսպիսով՝  ցանկացած  եղանակային փոփոխություն դեպքում մեթոդը չհայտնաբերելով օբյեկտը, չի ծառայի իր նպատակին: ", "Այդ  իսկ  պատճառով  մշակվել  է  հետևյալ  մեթոդը,  որը  կաշխատի  անկախ  լույսի  կամ եղանակային փոփոխություններից հիմնված XOR բիթային համենատության վրա: ", "Առաջին փուլում օգտագործելով G մատրիցի  (K * N) դիրքից մինչ  (K * M + N) դիրքում առկա ինդեքսները` ձևավորվում է KK բազմությունը, որտեղ K փոփոխականը համարժեք է տվյալ  բանալու  օգտագործման  քանակին։  KK  բազմության  ցանկացած  Ki  անդամին  R մատրիցում համապատասխանում է RK[i] սիմվոլ, արդյունքում ձևավորվում է N սիմվոլներից բաղկացած PP թվերի բազմություն կամ P տող։ Նախ հաշվարկվում է հրամանի բանալին՝ Ck,  հաշվարկելով  KK  և  PP  բազմությունների  համապատասխան  մասնիկների  XOR արժեքների գումարը (2.9)։ Օգտագործելով հարցման մարմնում առկա KFI փոփոխականը` հաշվարկվում  է  տվյալ  հրամանի  Ci  ինդեքսը  ստորև  գրված  բանաձևով,  որտեղ  CN  առկա հրամանների քանակն է ։ ", "𝑁𝑁 𝐶𝐶𝑘𝑘   = � 𝑃𝑃𝑃𝑃𝑖𝑖 𝑙𝑙=0 ⊕ 𝐾𝐾𝐾𝐾𝑖𝑖; (2.9) Այնուհետև  կատարվում  է  բացահայտած  հրամանի  հեշավորում`  օգտագործելով  P 𝐶𝐶𝑖𝑖   = (𝐶𝐶𝑘𝑘 ∗ 𝐶𝐶𝑁𝑁) ⊕  KFI; տողը  որպես  բանալի։  Հարցման  մարմնում  առկա  VH  հեշի  արժեքի  և  Hp(C  +  Salt)  հեշի արժեքի հավասարության դեպքում հարցումը համարվում է վավեր, և շարժական բանալին նոր հարցում է կատարում  այդ հրամանով  համապատասխան ինտերնետ իրին։ Հակառակ դեպքում  հարցումը  համարվում  է  անվավեր։  Գոյություն  ունի  անվավեր  հարցումների սահմանափակում,  որի  գերազանցման  դեպքում  կատարվում  է  հաջորդ  բանալու հաշվարկումը։ ", "Այստեղ -ն  հաստատուն  է,  որը  սահմանում  է -ի  աշխատանքում ներկայացված  շեմի  մակարդակը:  Այս  տեսակի  գործառույթի  առաջարկած  որոշ 𝑐𝑐 𝑃𝑃𝑃𝑃𝑖𝑖 առավելություններ  հետագայում  ավելի  պարզ  կդառնա  ( հայտնի  է  նաև  որպես «ջերմաստիճան»):  Որոշ  դեպքերում  դրա  արժեքը  կարող  է  սահմանվել արհեստականորեն  բարձր  մակարդակի  վրա,  որը  կստիպի  նեյրոնային  ցանցին ավելի  լավ  կատարել  աշխատանքը,  այսինքն  կբարձրանա  հավանականությունը ավելի կայուն վիճակին հասնելու: ", "Պատկերը  բաղկացած  է  պիքսելներից,  որը  կարելի  է  ներկայացնել  որպես թվային  մատրից  [50]:  Սկզբնական  պատկերը  նշ.  լատինատառ  A  տառով:  A-ն սկզբնական  պատկերի    թվային  մատրիցն  է,  որի  յուրաքանչյուր  տարր  իրենից ներկայացնում է 1 պիքսել՝ եռաչափ վեկտոր (բանաձև 2.1): ", "Ցանկացած վավեր հարցումից հետո K փոփոխականի արժեքը մեծացվում է մեկով, եթե K < N, այլապես K ստանում է 0 արժեք, և R մատրիցի R[n, m-1]  մասնիկը տեղափոխվում է առաջին ինդեքս և վերադասավորում այն, որի շնորհիվ G մատրիցում նշված ինդեքսների արժեքներից ձևավորված KK բազմությունը դառնում է ամբողջովին տարբեր համեմատած մինչև R-մատրիցում կատարված ձևափոխություների հետ։ Երբ տեղափոխումների քանակը հասնում է N * M – 1, ավարտվում է առաջին փուլը և  մինչ 2-րդ փուլին ացնելը կատարվում R  մատրիցի  «transpose»  փոխարկում:  Նախ  տվյալ  փոխարկման  համար  օգտագործելով միաչափ  ինդեքսը,  հաշվարկվում  է  ամեն  մասնիկի  երկչափ  ինդեքսը    հետևյալ  ձևով այնուհետև  կատարվում  է  նոր  ինդեքսի [𝑖𝑖  =  𝑀𝑀𝑀𝑀𝑀𝑀ℎ. 𝑓𝑓𝑓𝑓𝑓𝑓𝑓𝑓𝑓𝑓(𝑖𝑖𝑛𝑛𝑛𝑛𝑛𝑛𝑛𝑛/𝑁𝑁),   𝑗𝑗  =  𝑖𝑖𝑛𝑛𝑛𝑛𝑛𝑛𝑛𝑛 % 𝑁𝑁] հաշվարկում և այդ 2 ինդեքսներին համապատասխան արժեքների փոխարկում։  Տվյալ  գործողությունը  կատարվում  է  ամեն  մատրիցի  մասնիկի  համար։ ", "𝑛𝑛𝑛𝑛𝑛𝑛𝑛𝑛𝑛𝑛𝑛𝑛𝑛𝑛𝑛𝑛  =  𝑗𝑗  ∗  𝑁𝑁  +  𝑖𝑖 Արդյունքում  հնարավոր  է  դառնում  կիրառել  առաջին  փուլում  նկարագրված  նույն գործողությունները  ձևափոխված  մատրիցի  վրա  և  ստանալ  տարբեր  բանալիներ  առանց կրկնվելու հավանականության։ ", "Սկզբնական    պատկերի  յուրաքանչյուր՝  հատվածի  համար  հաշվարկում  ենք  3 առանձին  մեծություն՝  կարմիր,  կանաչ  և  կապույտ  գույների  ինտենսիվության գործակիցները (օր. ):  Յուր.  գործակից  որոշվում  է  տվյալ հատվածում  բոլոր  պիքսելերի  համպատասխան  գույնի(օր.  կարմիրի)  թվային արժեքների  միջին  թվաբանականով  (բանաձև  2.2-2.5):  Այլ  կերպ  ասած  գործակիցը ցույց է տալիս հատվածում գույնի միջին ինտենսիվությունը: ", "Ժամանակակից կլաստերային համակարգերում մուտքագրվող առաջադրանքների  ճշգրիտ  արդյունքներ  ապահովելուց  բացի  առկա  են  նաև  այլ խնդիրներ,  ինչպիսիք  են՝  մուտքագրվող  առաջադրանքների  հավասարաչափ բաշխվածության ապահովումը և էներգիայի խնայողությունը: ", "Ինչպես նշվեց բաժին 1.4-ում, արդեն գոյություն ունեն որոշակի ալգորիթմներ կլաստերային համակարգերում առաջադրանքների տեղաբաշխումը ավազակույտի մոդելի  հիման  վրա  կառուցված:  Մեր  կողմից  ստեղծված  SandScheduler  [46] ծրագրային  փաթեթն  իրենից  ներկայացնում  է  կլաստերային  համակարգերի աշխատանքը  սիմուլացնող  և  տեսաբերող  ծրագրային  փաթեթ,  որտեղ  խնդիրների բաշխիչի  աշխատանքը  հիմված  է  ոչ  միայն  ավազակույտի,  այլև  rotor-router համակարգի հիման վրա: ", "Վերը  նկարագրված  ալգորիթմը  ախատեցվում  է  E  պատկերի  համար  և հաշվարկվում են , , , գործակիցները (2.6): Այնուհետև հաշվարկում ենք  ընթացիկ  և  սկզբնական  պատկերների  գունային  արժեքների  տարբերությունները յուրաքանչյուր հատվածի համար (2.7): ", "Հաշվի  առնելով rotor-router  համակարգի  առանձնահատկությունները նկարագրված բաժին 2.3-ում, նկատվել է դրա նպատակահարմար կիրառումը նաև կլաստերային  համակարգերում:  Արդյունքում  ստացվել  է  կանխատեսումների տեսանելի  արդյունք  SandScheduler-ի  միջոցով,  որոնցից  է,  օրինակ՝  2.3  բաժնում բերված հիփոթեզը: ", "Առաջարկված հեշավորման դասի վրա հիմնված հրամանների փոխանակման համակարգը համեմատվել  է  նաև  այլ  հայտնի  ալգորիթմների  հետ  արագագործության  առումով,  որի արդյունքները  ներկայացված  են  աղյուսակ  7-ում։  CMP  (Command  Message  Protocol)  դա առաջարկված գաղտնահամակագրի կարճ հապավումն է։ ", "•  Ամեն հանգույց ունի «հասանելի»  տիրույթ առաջադրանքների համար, որտեղ կարող են  տեղավորվել վերջավոր քանակությամբ խնդիրներ(տվյալ  դեպքում  ամենաշատը  3  առաջադրանք),  և առաջադրանքի տեղավորվելուն պես այն դիտարկվում է որպես արդեն կատարվող:  Եթե  հանգույցի  «հասանելի»  տիրույթում  կան  3 արաջադրանքներ,  ապա  համարվում  է,  որ  տվյալ  հանգույցը աշխատում է միաժամանակ այդ 3 առաջադրանքների իրականացման շուրջ: ", "-ում  յուրաքանչյուր  պիքսել  արժեքվ  շատ  մոտ  է  համապտասխան  պիքսելին  A պատկերում: ", "պատկերում  օբյեկտի  առկայությունը  կբերի  տվյալ  հատվածի  պիքսելների ավելի մեծ փոփոխությանը A պատկերի նկատմամբ, քան -ի մնացած  պիքսելները, անգամ  այն  դեպքում,  եթե  օբյեկտը  ունի  մեծ  գունային  նմանություն  ֆոնային  E պատկերին  և  անհասանելի  է  անզեն  աչքին: ", "HTTPS արձանագրության մեջ օգտագործվող AES ալգորիթմի արագացման համար օգտագործվել  են  Intel  AES-NI  լրացումները,  որը  թողարկվել  է  հատուկ  Intel  ընկերության պրոցեսորների,  մասնավորապես՝  շարժական  բանալու  սարքի  համար։  Շնորհիվ  այդ լրացումների  հնարավոր  է  AES  ալգորիթմում  օգտագործվող  հաշվողական  մի  քանի հրամաններ  կատարել`  օգտագործելով  ընդամենը  մեկ  հատուկ  հրաման:  Հատուկ հրամաններից  են  ՝  AESENC(AES  Encrypt  Round),  AESENCLAST  (AES  Encrypt  Last  Round), AESDEC  (AES  Decrypt  Round),  AESDECLAST(AES  Decrypt  Last  Round),  AESKEYGENASSIST (AES Key Generation Assist), AESIMC(AES Inverse Mix Columns): ", "Նկ. 12. Շարժական բանալիում առկա կարգաբերումների օրինակ Քանի որ մշակված գաղտնահամակարգը ներդրվելու է ցանցում գտնվող լրացուցիչ սարքում,  կատարվել  է  գոյություն  ունեցող  սարքերի  հետազոտում`  հնարավոր սահմանափակումները հայտնաբերելու նպատակով։ Հաշվի առնելով այդ հետազոտության արդյունքները և վերոհիշյալ պահանջները, ստեղծվել են շարժական բանալու անհրաժեշտ բնութագրերը,  որոնք  են՝  բարձր  արտադրողականությունը,  անլար  ցանց  տրամադրելու հնարավորությունը և լրացուցիչ ծրագրային ապահովման ներդրման հնարավորությունը։ ", "դատարկ/ֆիկտիվ  առաջադրանքներից իրական  առաջադրանքների բաշխման նկատառումներով: Տվյալ դեպքում ցանցի ամեն հանգույց ունենում է  ուղղորդիչ  բնորոշ  rotor-router  մոդելին  և    իրական  առագադրանքը  մուտք լինելով որևէ հանգույցի, զբաղեցնում է տվյալ հանգույցի հասանելի տիրույթը վերջինիս  ազատ  լինելու  դեպքում,  կամ  տեղափոխվում  է  հարևան  հանգույց ըստ տվյալ հանգույցի ուղղորդիչի ուղղության: Այս գործողությունը կրկնվում է այնքան  մինչև  առաջադրանքը  կգտնի  ազատ  հանգույց  և  կզբաղեցնի համապատասխան  տիրույթը:  Հիշեցնեմ  որ  փակ  rotor-router  համակարգում ավազահատիկը  պտտվելով  վերջավոր  քանակությամբ՝  անցում  է  կատարում բոլոր  հանգույցներով  և  վերադառնում  է  հին  դիրքին,  ինչպես  նաև վերադառնալուն պես մոդելը արդեն ընդունած է լինում սկզբնական վիճակը: ", "•  Հետազոտվել են տարատեսակ ինտերնետ իրեր՝ միմյանց հետ փոխազդելու եզակի գլոբալ  հասցեավորման  սխեմայի  և  ծառայությունների  տրամադրման  մեխանիզմների բացահայտման նպատակով: ", "SandScheduler համակարգի տեսքը պատկերված է Նկար 38-ում, որտեղ ՛Create'  կոճակով ստեղծվում է համապատասխան չափի մատրից/կլաստեր: "], "source_docs_file": "Informatics and Computer Systems.json"}