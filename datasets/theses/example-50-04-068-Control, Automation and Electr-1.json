{"source_docs_file": "Control, Automation and Electrical Engineering.json", "paragraph_source_docs": [2, 0, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 3, 1, 1, 4, 1, 1, 4, 1, 1, 1, 3, 1, 2, 3, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "paragraphs": ["ՈՒղու  վրա  հիմնված  մեթոդների  առավելությւնն  է  գլոբալ  օպտիմումին  հասնելու պոտենցիալ հնարավորությունը, իսկ  թերությունն է մեծ ալգորիթմական բարդությունը: ", "Աղյուսակ ցուցադրված  են  հատկանիշների  և  համակարգերի համապատասխանությունները։  Որոշ  հատկանիշներ  առկա են  դիտարկված համակարգերից  մի  քանիսում  և  բացակայում  են  մյուսներում,  օրինակ,  որևէ համակարգում  նամակն  ուղարկողի  ու  հասցեատիրոջ  նախաձեռնությամբ  ծանուցման հնարավորությունները  համատեղ  իրականացված չեն։  Կան  նաև  այնպիսի հատկանիշներ,  որոնք  իրականացված  չեն  որևէ  համակարգում,  սակայն  ֆունկցիոնալ առումով  կարող  են  պահանջված  լինել՝  հատկապես  ներքին  ցանցերում  առավել տեղայնացված  խնդիրների  լուծման  համար։  Օրինակ՝  ներքին  ցանցերում  կիրառման հնարավորությունը,  արգելափակման  հնարավորությունը,  հայատառ  տեքստերի տրանսլիտերացիան, բաց աղբյուր տարբերակով հասանելիությունը։ ", "Հիշողության նմուշի ծրագրավորումը իրականցվում է յուրաքանչյուր հիշողության կոմպիլյատորի  համար  անհատապես  ստեղծվող  «0»  և  «1»  վիճակը  ծրագրավորող բջիջների միջոցով: ", "Նկար  2.3-ում    ներկայացված  են    կարճ  միացումների  միջոցով  ստացվող՝ «ծրագավորման» աջ և ձախ բջիջների գաղափարը ներկայացնող  հիշողության բջիջների էլեկտրական  սխեմաները:  Ինչպես  արդեն  դիտարկել  էինք,  հիշողության  բջջի WL BL WL BL* WL BL* Ձախ կարճ միացում “L” Աջ կարճ միացում “R” Նկար 2.3. SIV ԱՀ-ում հիշողության ծրագրավորող բջիջների էլեկտրական սխեման էլեկտրական  սխեման  (Տես՝  նկ.  1.6  և  2.3)    ունի  լիովին  սիմետրիկ  կառուցվածք: ", "ԻՍ  ֆիզիկական  նախագծման  ժամանակ  սխեմայի  ֆունկցիոնալ-տրամաբանական առանձնահատկությունների  հաշվառման  առաջարկվող  մոտեցումը  ենթադրում  է հետևյալ խնդիրների հաջորդական լուծում.   նախագծվող  սխեմայի  տրամաբանական  մակարդակի  փականային  Verilog նկարագրության փոխակերպում ազդանշանների հոսքի գրաֆի (ԱՀԳ-ի),   սխեմայի տարրերի ռանգավորում,   տարրերի  տեղաբաշխումը՝  համաձայն  դրանց  ռանգավորման,  այսինքն՝ «փափուկ» բլոկի ստացում,   ստացված  «փափուկ»  բլոկի  տարրերի  վերատեղաբաշխում՝  հաշվի  առնելով կոնստրուկտիվ սահմանափակումները, այսինքն՝ «կոշտ» բլոկի ստացում։ ", "Այսպիսով,  կարևորվում  է  ԻՍ-երում  տարրերի  ժամանակային  ուղղորդմամբ տեղաբաշխումը՝ որպես սխեմատեխնիկական առանձնահատկությունների հաշվառմամբ  ֆիզիկական  կառուցվածքի  ստացման  միջոց։  Ներկայումս  գոյություն ունեցող  ժամանակային  ուղղորդմամբ  տեղաբաշխման  մեթոդները[3,20,40]  ունեն որոշակի թերություններ: Առաջարկվում է նոր մոտեցում՝ ԻՍ ֆիզիկական նախագծման ժամանակ  սխեմայի  ֆունկցիոնալ-տրամաբանական  առանձնահատկությունների հաշվառման համար։ ", "Տրամաբանական սխեմայի Verilog նկարագրից ազդանշանների հոսքի գրաֆի ստացման ավտոմատացված միջոցի մշակումը Ազդանշանների հոսքի գրաֆը բաղկացած է հանգույցներից (գագաթներից) և ուղղորդված կողերից, որտեղ ուղղորդված կողերը ներկայացնում են տվյալների կախվածությունը։ Նկ․ 2․ 1-ում պատկերված է (ԱՀԳ-ի) պարզագույն մոդել։ ", "Բջիջիների  սահմանագիծը Տեքստային ինֆորմացիա Բջջի սկզբնակետը Ծրագրավորող միացում Նկար 2.4. Հիշողության ծրագրավորման L և R բջիջների տոպոլոգիայի օրինակը նկարագրությունը Բացի նշված ծրագրերից, SIV հոսքում ծրագրավորված հիշողության նմուշի SPICE ձևաչափի  էլեկտրական  սխեման  ստանալու  համար  օգտագործվում  է  Layout  Vs  SPICE (LVS)  իրականացնող՝  տարբեր  ընկերությունների  կողմից  մշակված  ծրագրեր  (օրինակ calibre,  Hercules,  ICV):    Այնուհետև,  ստացված    SPICE  ֆայլի  մոդելավորման    համար օգտագործվում է  SPICE մոդելավորման գործիքը (HSPICE, HSIM, UltraSIM կամ XA), որն իր  մուտքին  ստանում  է  SPICE  լեզվով  նկարագրությունը,  հիշողությունից  ընթերցելու գործողության համար անհրաժեշտ մուտքային ազդանշանները և սպասվող արժեքների բազմությունը, գեներացնում է սպասվող և ընթերցված արժեքների համեմատությունների արդյունքը պարունակող ֆայլը: ", "Ինչպես  բազմիցս  նշել  ենք,  հիշողության  կառուցվածքային  մոդելը  բաղկացած  է երկու  հիմնական    մասերից՝  հիշողության  գոտիների  բաշխումը  նկարագրող  մասից,  և հիշողության  կառուցվածքային  խճողումները  նկարագրող  պրոցեդուրաների  մասից: ", "- 65 - Կառուցվածքային մոդելի ստուգումը իրականացնող SIV հոսքը, նույնպես,  բաղկացած է երկու  անկախ՝  ա)  հիշողության  գոտիների  բաշխումը  ստուգող  (անգլերեն  Straps MIG scramble.tcl Fail Fail SDV END SIV ASV END Pass SDV ASV Pass Նկար 2.5. SIV ԱՀ-ում Հիշողության Կառուցվածքային մոդելի ստուգման բլոկ-սխեման Distribution  Verification  (SDV))  և  բ)  հիշողության  կառուցվածքային  խճողումները ստուգող (անգլերեն Address Scramble Verification (ASV)) մասերից (Տես՝ նկ. 2.5): ", "Ղեկավարման  հոսքային  մոդելը  ծրագրավորման  մոդել  է,  որտեղ  հրամանները, պրոցեդուրաներն  ու  ֆունկցիաները  կատարվում  են  միայն  այն  ժամանակ,  երբ  բոլոր մուտքային  տվյալները  (փոփոխականներ,  արգումենտներ)  պատրաստ  են։  Ծրագրեր գրելու (մոդելների ստեղծման) համար օգտագործվում են գրաֆիկական լեզուներ, որոնց միջոցով իրականացվում է տվյալների գործընթացների՝ ֆունկցիոնալ սխեմաների, բլոկ - 48 - սխեմաների,  տեսքի  վերափոխման  նկարագրությունը։  Դիտարկենք  տրամաբանական մակարդակի  նկարագրության  վերափոխման  օրինակ,  հիմնված  ISCAS85  գրադարանի c17 verilog նկարագրության վրա [46]։ Ունենք` nand NAND2_1 (N10, N1, N3); nand NAND2_2 (N11, N3, N6); nand NAND2_3 (N16, N2, N11); nand NAND2_4 (N19, N11, N7); nand NAND2_5 (N22, N10, N16); nand NAND2_6 (N23, N16, N19։ ", "Նմուշի տոպոլոգիայի մնացած բոլոր մասերը անվանում են գոտիներ: ", "Կառուցվածքային  մոդելի  գոտիների  բաշխման  ստուգումը  իրականցվում  է  SDV հոսքի  միջոցով:    Սկզբում,  VIG  ծրագիրը,  վերլուծելով  մոդելի  scramble.tcl  ֆայլում նկարագրված  գոտիների  բաշխումը  և  դրան  համատեղ,  հիշողության  կոմպիլյատորի տիրույթի  նկարագրությունը,  գեներացնում  է՝  անհրաժեշտ  քանակությամբ  ստուգող - 66 - նմուշների  կոնֆիգուրացիաների ֆայլերը: Այդ կոնֆիգուրացիաների ֆայլերի քանակը և նմուշների տեսակները այնպես են ընտրված, որ ապահովում են  կոմպիլյատորի ՆՀՍ-ի VIG MC check.rtb SDV configuration file SDV configuration file SDV configuration file MC scramble.tcl VPG GDS of SDV instance GDS of SDV instance GDSII of SDV instance MIG vpg.strap  file vpg.strap  file vpg.strap  file MPT Fail Pass VOG Compare SDV END mpt.strap  file mpt.strap  file mpt.strap  file Նկար 2.6. Հիշողության գոտիների ստուգման SDV ԱՀ-ի բլոկ-սխեման գոտիների բաշխման  լիարժեք ստուգումը: ", "Այս  տեսակի մոդուլացման դեպքում  ազդանշանի  ամպլիտուդան և հաճախականությունը  մնում  են  անփոփոխ։  PSK  թվայի  մոդուլացման  սխեմաn կիրառում  է  սահմանափակ  քանակի  փուլերի  արժեքներ,  որոնցից  յուրաքանչյուրին նշանակված  է  թվային  բիթերի  առանձնահատուկ  կոմբինացիա,  որոնք  կոչվում  են սիմվոլներ։ ", "Դրանից  հետո,  VPG  գործիքը,  իր  հերթին,      կոմպիլյատորի  scramble.tcl  ֆայլից, ստանում  է  գոտիների  բաշխումը՝ յուրաքանչյուր  SDV  կոնֆիգուրացիայի  համար (vpg.straps  անվանումով):  Այսպիսով, յուրաքանչյուր  կոնֆիգուրացիայի  համար ստացվում  են  գոտիների  բաշխումը  նկարագրող  երկու  ֆայլ՝  մեկը  GDSII  ձևաչափից, մյուսը  հիշողության  կառուցվածքային  մոդելի  (scramble.tcl)  ֆայլից:  Ստացված  ֆայլերի համեմատության  միջոցով  (Տես՝  նկ.  2.6),    SIV-ը  ստեղծում  է  արդյունքները  ամփոփող - 67 - ելքային ֆայլը և գեներացնում  է ամփոփիչ հաղորդագրություն SDV ստուգման ընթացիկ վիճակի մասին: Նկար 2.7-ում տրված են  MPT և VPG ֆայլերի օրինակները: ", "mpt.straps H row #0  51.185 H row #6  0.8 H row #8  0.585 V col #0  1.34 V col #320  42.5 V col #640  6.425 ա. Որտեղ Գոտիների տեսակը Գոտիների դիրքը Գոտիների չափսը vpg.straps H row #0 51.185 H row #6:8 1.385 V col #0:4 1.34 V col #320 42.5 V col #640 6.425 բ. - Vertical/Horizontal - row/column - length/heght Նկար 2.7.   Գոտիների  նկարագրությունը՝ ա. MPT   և   բ. VPG ֆայլերում Եթե համեմատության արդյունքը բացասական  է, ապա   ամփոփող  սխալների ֆայլում (Տես՝  նկ.  2.8)  բերվում  են  սխալի  պատճառները  վերլուծելու  համար  անհրաժեշտ  բոլոր տվյալները,  որոնց  հիման  վրա  և  MIG  ծրագրի  օգնությամբ  կատարվում  են  ուղղումներ ******************** m74_sdv ******************** {BK = 1} {CM = 4} {NB = 84} {NW = 48} {N_rows = 12.0 } {N_rows_BK = 12.0 } {N_col = 336 } vdda_enable = 0 pg_enable = 0 bist_enable = 1 redundancy_enable = 1 center_decode = 1 reconfig_reg = 0 Extracted from GDS| ------------------|----------------------------- H row #0  41.76 |  H row #0 41.765  ...<< INVALID SIZE H row #8  0.74  | H row #8 0.74 H row #12  2.81  | V col #0  1.49  | V col #120  22.5  | V col #172  66.49  | V col #228  22.5  | V col #344  1.49  | H row #12 2.81 V col #0:4 1.49 V col #88 22.5 ...<< INVALID LOCATION V col #172:176 66.49 V col #260 22.5 ...<< INVALID LOCATION V col #344 1.49 Generated by scramble.tcl Նկար 2.8.    ԱՀ-ի SDV սխալների ֆայլի օրինակը (հատված) scramble.tcl ֆայլի գոտիների նկարագրման բաժնում:  Ստուգումների  այս հաջորդականությունը  կրկնվում  է  այնքան  ժամանակ  (Տես՝  նկ.  2.6),  մինչև  որ վերջնական  արդյունքում  մոդելի  գոտիների  բաշխման  նկարագրությունը լիովին համապատասխանի հիշողության կոմպիլյատորի GDSII ձևաչափին: ", "- 68 - VIG MC check.rtb ASV configuration file ASV configuration file ASV configuration file MC scramble.tcl VPG GDS of ASV instance GDS of ASV instance GDSII of ASV instance MIG Pattern  file(IPP) Pattern  file (IPP) Pattern file (IPP) MPT SVP&SIM   files SVP&SIM   files SVP&SIM   files Programmed GDS Programmed GDS Programmed GDSII LVS rule deck LVS Fail Pass ASV END VOG Log Analysis SPICE simulation SPICE file SPICE file SPICE file SPICE model Նկար 2.9.   Հիշողության կառուցվածքային խճողումների ստուգման ASV ԱՀ-ի բլոկ-սխեման Նկար 2.9-ում ներկայացված է ASV-ի ստուգման   բլոկ-սխեման:  Ի սկզբանե նշենք, որ  հիշողության  հասցեների  խճողումների  ստուգման  գործընթացը  (ASV  ստուգումը) ավելի  ժամանակատար  է,  քան  հիշողության  գոտիների  բաշխման  ստուգումը  (SDV), քանի  որ    այն  իր  մեջ  ընդգրկում    է  երկու  հաջորդաբար  կատարվող  և    բավականին ժամանակատար  գործողություններ՝  ա)  նմուշի  GDSII  ձևաչափից  նմուշի  SPICE - 69 - ձևաչափի  սխեմատիկայի  ֆայլի  դուրս  բերումը  (ինչպես  նշել  ենք,    դա  կոչվում  է    LVS գործողություն),  և  բ)  LVS-ի  աշխատանքի  արդյունքում  ստացված  նմուշի    SPICE  ֆայլի մոդելավորումը:  ASV-ի  դեպքուն  VGP  գործիքը յուրաքանչյուր  նմուշի  համար գեներացնում է՝ (IPP)) (Տես՝ նկ. 2.10), ա)  ծրագրավորման  օրինակների  ֆայլերը  (անգլերեն՝  Instance  Programming  Pattern բ)  SPICE  մոդելավորման  համար  անհրաժեշտ՝  վեկտորային  օրինակների  մուտքային ֆայլերը (անգլերեն՝ SPICE vector pattern (SVP)),  և գ) SPICE մոդելավորող ծրագիրը աշխատեցնող՝ պարամետրերի ֆայլերը: ", "Կախված  M-PSK  մոդուլացման  կարգից -ն  կարող  է  ունենալ  M  քանակի դիսկրետ արժեքներ։ Ազդանշանի փուլը բնութագրվում է հետևյալ հավասարմամբ կերպ՝ տեսքով՝ [60]՝ որտեղ  =1, 2, …, M: ", "IPP  ծրագրավորման  ֆայլը  իրենից  ներկայացնում  է  տեքստային  ֆայլ,  որը  իր  մեջ Պահեստային սյուները Հիշողության զանգվածի XXXXXXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXX Նկար 2.10.   IPP ֆայլի օրինակը Հիշողության զանգվածի Հավասարա- կշռող տողերը ընդգրկում է տրամաբանական զրոների և մեկերի հավաքածուներ: Այդ հավաքածուները ունեն  նմուշի  զանգվածի  ֆիզիկական  կառուցվածքին  համապատասխան  քանակու- թյամբ  տողեր  և  սյուներ:  IPP  ծրագրավորման  ֆայլերը  մուտքային  տեղեկություններ  են տրամադրում    MPT-ի գործիքի համար: Նկար 2.10 -ում  պատկերված է IPP-ի օրինակը: ", "Համաձայն  այդ  օրինակի՝  հիշողության  նմուշը  ունի    4  տող,  16  սյուն,  2    պահեստային սյուներ  և  2  հավասարակշռող՝  պարապ  տողեր:  Հիշողության  հիմնական  զանգվածից դուրս  գտնվող    պահեստային  և    հավասարակշռող    տողերին  և  սյուներին  պատկանող բջիջների  արժեքները  պարտադիր  ձևով  ծրագրավորվում  են  տրամաբանական  զրո արժեքով:  Իսկ  IPP  ֆայլի  առաջին  տողի  բջիջները  ստանում  են  այնպիսի  արժեքներ, որոնք  կապահովեն  տրամաբանական  զրոյական  արժեքների  ծրագրավորումը  նմուշի - 70 - ֆիզիկական առաջին  տողում  (Տես՝  նկ.  2.10):  Այդ  առաջին  տողը  հնարավորություն  է տալիս  բացահայտել  հիշողության  զանգվածի  բիթային  գծերի  խճողումը  (T,  B): ", "Կլաստերավորում:  Այս  դեպքում անհարաժեշտ  է բացահայտել մուտքային  տվյալների խմբերը:  Օրինակ  գնման  վարքագիծը հաշվի  առնելով հաճախորդների  խմբերը: ", "Ինչպես  տեսնում  ենք,  հիշողության  հիմնական  սյուներից  և  տողերից  ոչ  մեկը  չի պարունակում  ամբողջովին  զրոյական  արժեք,  և  տողերի  (սյուների)  արժեքները  չեն կրկնվում, որը իր հերթին  ապահովում է  խճողումների վերծանման միանշանակությունը:  Այս ստուգող հավաքածուն ապահովում է խճողումների հետևյալ տարրերի  ստուգումները.  հիշողության  հասցեավորման  խճողման,  ֆիզիկական  և տրամաբանական տողերի և սյուների համապատասխանության, ինչպես նաև ստուգում է  հավասարակշռող  և  պահեստային  տողերի  և  սյուների  դիրքերի  բաշխման ճշտությունը:  Նշված  խճողումների  ցանկացած  անհամապատասխան  նկարագրումը Նկար 2.11.   ASV ԱՀ-ի hիմնական անկյունագծային  ստուգող հավաքածուն scramble.tcl  ֆայլում  բերում  է  մոդելավորման  սխալ  արդյունքի:  Կախված  նուշի ֆիզիկական չափսերից՝ անհրաժեշտություն է առաջանում մեկ նմուշի համար կիրառել մեկից  ավելի  ծրագրավորման  ֆայլեր:  Հաշվարկները  ցույց  տվեցին,  որ  մեկ  նմուշի խճողումների  լիովին  ստուգման  համար,  վատագույն  դեպքում,  բավական  է  ունենալ երեք  ծրագրավորող  հավաքածու:  Հավելված  2-ում  տրված  է  SIV  հոսքի`  իրական հիշողության  նմուշի (NW=64, NB=8, CM=4,  PR=16, PC=32 ) IPP-ի  ֆայլի օրինակը: ", "Ինչպես  երևում  է  ASV  ստուգման  բլոկ-սխեմայից  (Տես՝  նկ.  2.9),  MPT    գործիքը ծրագրավորում է նմուշի GDSII ֆայլերը՝ այդ նմուշների IPP-ի ֆայլերին համաձայն: ", "Ռեգրեսիան  կարելի է իրականացնել երկու եղանակներով' նորմալ հավասարումներով (անգլերեն'  Normal  Equation)  և  գրանդիենտային  անկումով (անգլերեն'  Gradient Descent)  [53]: ", "signal CLK ADR[0~3] Q[0~3] Բիթային գծերի խճողում YA, սյուների ապակադավորիչի տեսակը՝ 2x4  {0,1,2,3} Ֆիզիկական 0 տող՝ միշտ զրոյական արժեք YA, սյուների ապակադավորիչի  խճողումը Ֆիզիկական 1 տողի արժեքը XA, տողերի ապակադավորիչի տեսակը՝ 2x4  {0 ,1,3,2} XA, տողերի ապակադավորիչի խճողումը Նկար 2.12.   ԱՀ-Ի SVP ֆայլի օրինակը և դաշտերի մեկնաբանումը Ներկայացված  SVP ֆայլի օրինակում (նկ. 2.12),  փոփոխման են ենթարկվում CLK, ADR[0~3]    և  Q[0`3]  ազդանշանները,  ընդ  որում  հասցեների  (ADR[0~3])  փոփոխման հերթականությունը կատարվում է սյուների և տողերի ապակոդավորիչների խճողմանը համաձայն, իսկ ելքային ազդանշանները (Q[0~3]) նկարագրված են բիթային գծերի, այդ գծերի  և  սյուների    ոլորապտումների  խճողումներին  համաձայն:  Լավագույն  դեպքում, երբ    scramble.tcl  ճիշտ  է  նկարագրված,  մոդելավորման  արդյունքը  սխալի  չի  բերում: ", "Հակառակ դեպքում մենք ստանում ենք մոդելավորման համեմատության - 72 - սխալ/սխալներ,  որի  պատճառը  համապատասխան  խճողման  սխալ  նկարագրություն  է scramble.tcl  ֆայլում:  Վերացնելով  այդ  սխալը scramble.tcl  ֆայլում  և  նորից աշխատեցնելով ASV  ստուգումը, մոդելավորման  արդյունքում  էլ սխալ չենք  հայտնա- բերի,  ինչը  նշանակում  է,  որ  կոմպիլյատորի  խճողումները  ճիշտ  են  նկարագրված scramble.tcl ֆայլում՝ ASV ստուգումը ավարտված է: ", "SIV  ԱՀ-ի  և  ԱՀ-ի  հանգույցների  աշխատանքի  ամբողջական  ղեկավարումը  և կարգաբերումը  կատարվում  է  ղեկավարող  տեքստային  ֆայլի  միջոցով:  Այն կառավարման վահանակի դեր է կատարում ողջ SIV ԱՀ-ի համար և իր մեջ ընդգրկում է յոթ բաժիններ (Տես՝ օրինակը Հավելված 3 -ում). մոդելավորման  գործիքների      ղեկավարումը  և  կարգաբերումը  ապահովող՝ ընդհանուր պարամետրերի բաժին, պարամետրերի բաժին, պարամետրերի բաժին, հիմնական ազդանշանների անունները: Ընդհանուր դեպքում SIV ԱՀ-ը ավտոմատ ձևով ստանում  և  ղեկավարում  է  նմուշից  «կարդալ»  գործողությունը  իրականացնող ազդանշանները,  բայց  մասնակի  (ոչ  ստանդարտ  կոմպիլյատորների)      դեպքերում անհրաժեշտ է լինում նշել այդ ազդանշանների անունները: ", "ASK ամպլիտուդային մոդուլացում Ամպլիտուդային ASK մոդուլացման դեպքում ազդանշանի հաճախականությունն ու փուլը  մնում  են  անփոփոխ,  իսկ  թվային  տվյալները  փոխանցվում  են  ազդանշանի ամպլիտուդայի  փոփոխությունների  միջոցով:  Թվային  ամպլիտուդային  մոդուլացման ամենապարզ  տեսակը  2ASK-ն  է,  որն  ունի  երկու  ամպլիտուդային  մակարդակ  և յուրաքանչյուր  սիմվոլ  ներկայացնում  է  մեկ  բիթ՝  «1»-ը  կրող  ազդանշանի  առկայության դեպքում և «0»-ն դրա բացակայության դեպքում (նկ. 3.12): ", "ձևաչափից դուրս բերման ավտոմատացված համակարգ Առաջին  գլխում  մենք  նկարագրեցինք  հիշողության  խճողումների  տեսակները  և հիշողության  կոմպիլյատորի կառուցվածքային մոդելը  նկարագրող ֆայլը և այդ ֆայլի - 73 - ստուգման ծրագրային ԱՀ-ը:  Խճողումները նկարագրող ֆայլը ստեղծվում է կոմպիլյա- տորը  նախագծող  ճարտարագետի  կողմից  կոմպիլյատորի  ստեղծման  հետ  միաժամա- նակ: Ներկայումս հիշողության կառուցվածքային  մոդելը պարտադիր մաս է հանդիսա- նում  բոլոր  տեսակի  ներդրված  ՆՀՍ-ի  համար:  Այն  օգտագործվում  է    ՆՀՍ-ի  հետ աշխատող  բոլոր  ավտոմատ  ծրագրային  միջոցների  կողմից: ", "- 53 - Ռանգավորման  ժամանակ  հաշվի  է  առնվում,  որ  սխեմայի  մոդելավորումը  սկսելու պահին դրա բոլոր մուտքային ազդանշանները հայտնի են, և դրանց բոլորին տրվում է 0 ռանգ  r  =  0:  Օրինակ,  նկ․   2․ 6-ում  բերված  սխեմայի  ազդանշանների  որոշման հերթականությունը կլինի հետևյալը՝ , , , որտեղ –ն  սխեմայի  մուտքային  ազդանշաններն  են, -ը  տարրերի ելքային  ազդանշաններն  են  (սխեմայի  ելքային  և  ներքին  փոփոխականներն  են), -ը տարրերի ռանգը։ ", "Քանի որ հեռահաղորդակցական ազդանշանի վրա եթերում տարածվելու ընթցքում ազդեցություն  գործած  աղմուկները  հիմնականում  մեծ  հետևանք  են  թողնում  վերջինիս ամպլիտուդայի  վրա,  ապա  հետևաբար  թվային  ամպլիտուդային  մոդուլացումները, ինչպես  և  անալոգային  ամպլիտուդային  մոդուլացումները,  ամենից  ենթական  են աղմուկների ազդեցությանը: ", "Իրականցման տեսակետից այս խնդրի դրվածքը ուղիղ հակադարձ է հիշողության կառուցվածքային  մոդելի  ստուգման  խնդրին:  Եթե  SIV-ի  ժամանակ  ունենք    նմուշի GDSII  ձևաչափը,  և  այն  նկարագրող  մոդելը  և  խնդիր  է  դրվում  մեկ-երկու՝  նախապես արդեն հայտնի, ծրագրավորող հավաքածուների  միջոցով ստուգել  մոդելի համապատասխանությունը  այդ  նմուշի  գրաֆիկական  ներկայացմանը,  ապա  SIE  ԱՀ-ի - 74 - գաղափարն  է՝  յուրաքանչյուր  նմուշի  դեպքում  ստանալ  ծրագրավորող  օրինակների վերջնական հավաքածու, որոնց միջոցով ա) ծրագրավորելով GDSII ֆայլը՝  ստանալ ծրագրավորված GDSII ֆայլեր, բ) ծրագրավորված GDSII ֆայլերից գեներացնել SPICE ֆայլեր, գ) մոդելավորել այդ SPICE ֆայլերը, դ)  SPICE  մոդելավորման  արդյունքները  մշակելուց  հետո  ստանալ  նմուշի խճողումների մասին տեղեկությունները և ե) գեներացնել նմուշի կառուցվածքային մոդելը: ", "Նմուշի կոնֆիգուրացիայի Նմուշի կոնֆիգուրացիոն վերլուծում և ծրագրավորման տվյալները և արտաքին ֆայլերի գեներացումը (PG) պարամետրերը Նմուշի GDSII ֆայլի ծրագրավորումը ըստ ծրագրավորման ֆայլերի (MPT) Նմուշի ծրագրավորման «0» և «1»  բջիջները Ծրագրավորված GDSII ֆայլերից   LVS-ի աշխատանքի SPICE ֆայլի ստացումը և կանոնների ֆայլը, մոդելավորումը   SPICE մոդելները Մոդելավորման արդյունքների  վերլուծում, նմուշի կառուցվածքային  տարրերի և մոդելի գեներացումը (PA) Նկար 2.13.   Կառուցվածքային մոդելը դուրս բերող ծրագրային ԱՀ-ի ֆունկցիոնալ սխեման Նկար  2.13-ում  տրված  է  SIE  ԱՀ-ի  ֆունկցիոնալ  բլոկ-սխեման:    Ֆունկցիոնալ սխեմայից երևում է, որ SIE-ում օգտագործվում են SIV ԱՀ-ի ծրագրային գործիքներից մի - 75 - քանիսը՝ MPT, LVS և SPICE մոդելավորման գործիքները: SIE ԱՀ-ում,  նշված ծրագրային գործիքներին,   ավելացվել են ևս երկուսը՝ PG և PA պրոցեդուրաները: ", "-  Pattern Generater (PG) – կատարում է նմուշի կոնֆիգուրացիայի վերլուծությունը և ծրագրավորման ֆայլերի գեներացումը -  Pattern  Analyzer  (PA)  -  կատարում  է  մոդելավորման  արդյունքների    վերլուծու- թյունը և կառուցվածքային  տարրերի դուրս բերումը (բացահայտումը): ", "Այժմ  ղիտարկենք նվազարկման  իրականացումը նորմալ հավասարումների  միջոցով: ", "SIE  ԱՀ-ի  աշխատանքը  ապահովելու  համար  նախագծվել  են  հետևյալ  լրացուցիչ երկու գործիքները, որոնք կատարում են հետևյալ գործողությունները. -  Pattern  Generater  գործիքը  որպես  մուտք  ընդունում  է  նմուշի  կոնֆիգուրացիայի ֆայլը,  որի  հիման  վրա  գեներացնում  է  նմուշի  ֆիզիկական  կառուցվածքին համապատասխանող ծրագրավորման ֆայլերը: ", "-  Pattern  Analyzer  գործիքը  որպես  մուտք  ստանում  է  SPICE մոդելավորման ընթացքում ստացված արդյունքների ֆայլերը, որոնց վերլուծելուց հետո ստանում է հիշողության նմուշում առկա խճողումները  նկարագրող ֆայլը: ", "ՀԿՄ-ի  ստանալու  նպատակով  նախագծված  ծրագրային  ԱՀ-ը  կատարում  է հետևյալ գործողությունների հաջորդականությունը (նկ.  2.14). նմուշի    ծրագրավորման  ֆայլերը  (IPP):  Գեներացված  IPP-երը  ունեն  տեքստային ձևաչափ  և  պարունակում  են  տեքստային  տեղեկատվություն  հիշողության  մեջ ծրագրավորվող  օրինակների  (ԾՕ)  (programmed  pattern)  մասին:  Այդ  օրինակների քանակը  և  տեսքը  փոփոխական  է  և  կախված  է  հիշողության  նմուշի  ֆիզիկական չափերից:  Լավագույն  տարբերակում  այդ  քանակը  հավասար  է  երկուսի՝  զրոյական  և անկյունագծային,      իսկ  վատագույն  դեպքում  կարող  է  հասնել  մինչև  ութի:  Լավագույն դեպք  է  համարվում  հիշողության  նմուշի  այն  ֆիզիկական կառուցվածքը,  երբ հիշողության բջիջներով զբաղեցված մակերևույթը քառակուսի է՝ ֆիզիկական տողերի և սյուների  քանակները  նույն  են:  Այս  դեպքում  հնարավոր  է  դառնում  մեկ  ծրագրավորող - 77 - «անկյունագծային»  օրինակով  ծածկել  հիշողության    ողջ  մակերևույթը:  Նկար  2.15-ում ներկայացված են զրոյական և անկյունագծային ԾՕ-ները 8 տող և 8 սյուն պարունակող հիշողության  նմուշի  համար:  Զրոյական  ԾՕ-ը  պարտադիր  օրինակ  է  հանդիսանում նմուշների բոլոր կառուցվածքների համար: ", "ա. զրոյական բ. անկյունագծային Նկար 2.15.   Ծրագրվորման ֆայլերի օրինակները միջոցով,  կատարում  է  նմուշի  գրաֆիկական  GDSII  ֆայլի  ծրագրավորում  ԾՕ-րի համաձայն,  որի  արդյունքում  ստացվում  են  ԾՕ-րի  քանակությամբ    ծրագրավորված GDSII ֆայլեր: ", "գործիքը,  մշակելով  ծրագրավորված  GDSII  ֆայլերը,  ստանում  է յուրաքանչյուր ծրագրավորված  նմուշին  համապատասխանող SPICE  ֆայլերը:  Հաջորդ  քայլում կատարում են  այդ  ֆայլերի մոդելավորումը:  Մոդելավորման ընթացքում իրականացվում  է  հիշողության  նմուշից  միայն  «կարդալ»  գործողությունը,  որի արդյունքում  ստացված  և  համապատասխան  ձևով  մշակված  տեքստային    ֆայլերը պարունակում  են  նմուշի  մոդելը  ստանալու  համար  անհրաժեշտ  կառուցվածքային տարրերի, տիպերի մասին  ինֆորմացիան: ", "դեպի  բարդը,  քայլ  առ  քայլ    դուրս  է  բերում  կառուցվածքային  մոդելի  տարրերը:  Այս փուլում  SIE-ի  MPT  գործիքի  օգնությամբ  ավտոմատ  ձևով  հետազոտում  է  GDSII  ֆայլը, ստանում  նմուշի  գոտիների  բաշխումը  և    գեներացնում    գոտիների  նկարագրությունը կառուցվածքային մոդելում: ", "Հետագայում գոտիների բաշխման մասին - 78 - տեղեկությունները  օգտագործվում  են  ԱՀ-ում  (մասնավորապես  գոտիների  դիրքերի բաշխումը) ստացված մոդելի վերջնական ինքնաստուգումը կատարելիս: SIE-ի երկրորդ քայլում  ԱՀ-ը  գեներացնում  է  զրոյական  արժեքով  ԾՕ  (Տես՝  նկ.  2.15  ա.)  և  կատարում մշակումը՝ 2 և 3 քայլերը, այդ զրոյական ծրագրային օրինակի համար: Զրոյական ԾՕ-ը օգտագործվում  է  որպես  առաջնահերթ  ԾՕ,  քանի  որ  այն  հնարավորություն  է  տալիս միանշանակորեն  բացահայտել  նմուշի  զանգվածում.  ա)  բիթային  գծերի  բաշխումը,  բ) բիթային  գծերի  ոլորապտումների  առկայությունը,  և  եթե  այդ  ոլորապտումները  կան, ապա այդ ոլորապտումների դիրքը և տեսակը: ", "Մանրամասնենք  բիթային  գծերի  բացահյատման  գործընթացը:  Ինչպես  արդեն ներկայացրել  ենք  առաջին  գլխում,  հիշողության  զանգվածում  տոպոլոգիայում  բջջի գծերի դասավորվածությունը կարող է ունենալ {T, B} կամ էլ  {B, T} արժեք: Հիշողության զանգվածի  սյուներում  և  տողերում  երկու  հարևան  բջիջները  համապատասխանաբար կարող են ստանալ բիթային գծերի հնարավոր չորս բաշխման տեսակներից որևէ մեկը՝ կառուցվածքը  ենթադրում  է,  որ  տողերում  և  սյուներում  բիթային  գծերի  բաշխումը բաղկացած  կլինի նշված չորս  տեսակների  որևէ  մեկի  կրկնությունից:  Այդ կրկնությունների  քանակը  համապատասխանաբար  հավասար  է  նմուշում  սյուների (#PC)  և  տողերի (#PR)  քանակին:  Ընդունենք,  որ  բիթերի {T,  B}  բաշխումը համապատասխանում  է  հիշողության  բջիջում «0»  արժեքին,  ապա  զրոյական ծրագրավորման օրինակը (նկ. բջիջների ողջ զանգվածում Բիթային գծերի ոլորա- պտումով հատված ա. զրոյական ԾՕ բ. մոդելավորման    արդյունքը և վերծանումը Նկար 2.16.   Զրոյական Ծրագրավորման օրինակը համապատասխանում  է  բիթային  գծերի {T  B}  ֆիզիկական  բաշխվածությանը: ", "- 79 - Այդպիսով, եթե ծրագրավորելով հիշողության զանգվածը «0» արժեքներով հետագայում՝ մոդելավորման արդյունքում ստանանք, որ որևէ բջիջը ունի «1» արժեքը, ապա պարզ է, որ այդ բջջի բիթային գծերը  ունեն {B, T} բաշխում, այլ  ոչ թե {T, B}, ինչպես ենթադրում էինք ծրագրավորման սկզբում: ", "Նախատեսվում է,  որ  համակարգը  աշխատի  պարբերաբար  կրկնվող գործընթացներով։  Յուրաքանչյուր  պարբերության  ժամանակ  վերլուծվի  հավաքված ինֆորմացիան և իրականացվի դրանց համապատասխան գործողությունները։ ", "ա. անկյունագծային բ. մոդելավորման գ. նմուշի տողերի ԾՕ-ը արդյունքը խճողումը Նկար 2.17.   Անկյունագծային ԾՕ-ի կիրառման օրինակը՝ նմուշի տողերի խճողման դեպքում Հաջորդ  հիմնական  ԾՕ  է  հանդիսանում  անկյունագծային  ԾՕ-ը:    Նկար  2.17-ում տրվում  է  անկյունագծային  ԾՕ-ի (նկ.  2.17  ա.)  միջոցով,  տողերի  խճողման - 80 - բացահայտման  օրինակ:  Անկյունագծային ԾՕ-ի  հատկությունն է,  որ  զրոների  (մեկերի) քանակը յուրաքանչյուր տողի (սյան) մեջ յուրահատուկ է՝ չի կրկնվում ողջ զանգվածում: ", "Երբ  ծանուցման  համակարգը  ինտեգրված  է  էլեկտրոնային  փոստում,  դրա  կայք էջում  հնարավոր  է  ավելացնել  հավելյալ  դաշտեր  և  նամակի  ուղարկմանը  զուգահեռ կատարել հավելյալ գործողություններ։ Օրինակ, ինչպես իրականացված է «Յանդեքս»-ի կողմից առաջարկված համակարգում (ուսումնասիրվել է 1-ին գլխում), փոստի կայքում ավելացված է հասցեատիրոջ հեռախոսահամարի գրանցման համար նախատեսված նոր դաշտ՝  նամակի  ուղարկմանը  զուգահեռ  այդ  համարին  SMS  հաղորդագրությամբ ծանուցում ուղարկելու համար։ Այս տարբերակը սակայն կիրառելի չէ, երբ համակարգը առանձնացված է էլեկտրոնային փոստից։ ", "MPT-ի  գործիքը  կատարում  է  նմուշի  GDSII  ֆայլի  ծրագրավորումը  անկյունագծային օրինակով,  որից  հետո  մոդելավորման  արդյունքը  տող  առ  տող  մշակվում  է  PA պրոցեդուրայի  միջոցով,  արդյունքում  ստացվում  է  նմուշի  տողերի  խճողման  (Տես՝  նկ. կներկայացվի նմուշի  կառուցվածքային մոդելի  ֆայլում: Հաջորդ  քայլում կատարվում  է ա. անկյունագծային բ. մոդելավորման գ. նմուշի սյուների ԾՕ-ը արդյունքը խճողումը Նկար 2.18.   Անկյունագծային ԾՕ-ի կիրառման օրինակը՝ նմուշի սյուների խճողման դեպքում սյուների  խճողման  դուրս  բերումը,  նույն  անկյունագծային  ԾՕ-ի  օգնությամբ:  Ի տարբերություն  տողերի  խճողման  բացահայտմանը՝  այս  դեպքում, PA  գործիքը մոդելավորման  արդյունքի  մշակումը  կատարում  է  սյուների  ուղղությամբ  (ներքևից վերև)  և  արդյունքում  ստանում  է  նմուշի  սյուների  խճողումը:  Նկար  2.18-ում պատկերված  է  ՝  անկյունագծային  ԾՕ-ի  միջոցով  նմուշի  սյուների  խճողման  դուրս բերման գործընթացի պարզաբանման օրինակը: ", "- 81 - կապված բարդությունները Հասկանելի  է,  որ  հիշողության  նմուշում  միաժամանակ  մի  քանի  տեսակի խճողումների  առկայությունը  էականորեն  բարդացնում  է  PA  գործիքի  կողմից կատարվող    մոդելավորման    արդյունքների  վերծանման՝  խճողումների  կառուցվածքի բացահայտման,  աշխատանքները:  Այդ  պատճառով,  SIE  ԱՀ-ում  իրականցված ալգորիթմը հիմնված է հետևյալ պարզ հիմունքների վրա. -  Խճողումների  դուրսբերման  և  բացահայտման  ժամանակ  կիրառել    պարզից  դեպի բարդ  սկզբունքը՝  սկզբում  ստանալով  նմուշի  հեշտ վերծանվող  խճողման  մասին տեղեկատվությունը,  օգտագործել  այն  հաջորդ  քայլում  բացահայտվող  խճողման վերծանման  ժամանակ:  Ինչպես  արդեն  նշվեց,  առաջին  քայլով  PA  գործիքը՝ օգտագործելով  զրոյական  ծրագրավորման  օրինակը,  ստանում  է  նմուշի  բիթային գծերի խճողումը; -  Յուրաքանչյուր  խճողումը  բացահայտելու  համար  կիրառել  առանձին՝  լրացուցիչ անհատական,  ծրագրավորման օրինակ: ", "Պարզ  է,  որ  այս  դեպքում  PA  գործիքը  մոդելավորման  արդյունքները  մշակում  է հաջորդաբար, որը ԱՀ-ի աշխատանքի ժամանակի ծախսման տեսակետից օպտիմալ չէ: "]}