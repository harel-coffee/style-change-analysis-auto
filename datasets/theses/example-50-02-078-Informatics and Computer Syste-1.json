{"paragraph_source_docs": [1, 1, 0, 0, 2, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], "paragraphs": ["Ինչպես  արդեն  նշվել  է,  «CA  Simulator»  համակարգը  ապահովում  է բազմաօգտատեր շահագործում, որը հնարավոր է եղել ստանալ Microsoft .Net [52] միջավայրի  միջոցով,  որը  ինքնին  հնարավորություն  է  տալիս  ստեղծել  ծրագրային փաթեթներ, որոնց միջոցով  կարելի է կապել ինչպես օգտագործողներին, այնպես էլ  տարբեր  համակարգեր  և  սարքեր,  դրանով  իսկ  դյուրացնելով  ինֆորմացիայի կիսումը/sharing:  Օգտագործելով  .Net  միջավայրը,  «CA  Simulator»  համակարգում մշակվել  է  հաճախորդ-սերվեր-հաճախորդ  փոխկապակցվածությունը՝  նպատակ ունենալով  հնարավորություն  տալ  օգտագործողներին  կատարել  համատեղ հետազոտություններ  միևնույն  մոդելների  վրա:  Սերվերի  տեղակայման  համար ընտրվել են Microsoft Azure [53] ամպային տեխնոլոգիաների հարթակը: ", "Համատեղ հետազոտություն իրականացնելու համար օգտագործողը պետք է ստեղծի մոդել, որի վրա որ կատարվելու է հետագա համատեղ հետազոտությունը, այնուհետև պետք է կիսվի ստեղծած մոդելով, որի համար ընտրում է «Broadcasting» օպցիան  վերին  վահանակից,  այնուհետև  ընտրում  է  «Start  Broadcasting» տարբերակը՝  մուտքագրելով  ալիքի  անվանումը:  Մինչդեռ  մյուս  օգտագործողները բացելով  ալիքների  ցուցակը  «Broadcasting»  օպցիայից  «Connect to  Chanel» տարբերակը  ընտրելով,  տեսնում  են  ալիքների  պատմությունը  ցուցադրող պատուհանը (նկար 19), որտեղ կարող են ընտրել ցանկալի ալիքը տվյալ ցանկից և միանալ  դրան:  «CA  Simulator»  համակարգի  շատ  կարևոր  առավելություններից  է նաև  այն,  որ  այն  պահպանում  է  մոդելի  վրա  կատարված  հետազոտության ընթացքում  կիրառված  բոլոր  փոփոխությունները,  և  հնարավորություն  տալիս ալիքին  ուշ  միացած  օգտագործողներին  տեսնել  դրանք  քայլ  առ  քայլ,  ամեն  քայլի հետ թարմացնելով բնութագրիչների հաշվարկը: ", "Ծառայության  հանգույցը  դերակատարման  փուլի  ավարտից  հետո  կատարում  է ենթակառուցվածքի  համաչափ  գաղտնագրում  և  բանալու  բաշխում  օգտագործելով գաղտնիքի բաշխման մեթոդը, որի շեմային արժեքն է  [λ – 1, λ] [35]: ", "Իրերի  ինտերնետ  միջավայրի  առաջարկվող  մոդելում  հանգույցների  գործարկումը կատարվում  է  ինքնաբերաբար,  որի  ընթացքում  հանգույցներին  վերագրվում  են համապատասխան դերեր (նկ.4): ", "Մշակվել են բազմաթիվ մեթոդներ՝ դրնաց հետ կապված տեսանելիության խնդիրների լուծման համար:  Օրինակ՝  ֆիքսված  տեսախցիկների դեպքում օբյեկտի հայտնաբերումը օգտագործում է անշարժ ֆոնը: Տարածված մեթոդ է ֆոնի վերացումը Գաուսյան  խառնուրդի  մոդելով  [32]:  Այս  արագ  սովորելու    պրոցեսը  մոդելավորում  է պիկսելի  տարբեր  պայմաններ  տարբեր  դիրքերի  դեպքում  որպես  Գաուսյան բաշխումների խառնուրդ: Գաուսյան յուրաքանչյուր մոդելի կշռի միջին և փոփոխական արժեքները  կարող  են  առցանց  թարմացվել,  և  այն  պիկսելները,  որոնք  չեն համապատասխանում  որևէ  ֆոնային  մոդելի,  արագ  հայտնաբերվում  են:  Ադապտիվ սովորելու  հատկությունը  այս  մեթոդը  դարձնում  է  հարմար  իրական  ժամակաի կիրառությունների  համար    [34],  [35]:  Հայտնաբերման  այլ  մեթոդները  ներառում  են տեղանքի  սեգմենտացիայի  վրա  հիմնված  գրաֆիկական  հատումը,  եզրերի հայտնաբերման  վրա  հիմնված  փոփոխության  մակարդակի  համալիրը  և  սեղմման զգայնությունը: ", "Պարզության  համար  ենթադրենք,  որ  Ttotal  =  Ts t,  որտեղ  t-ն  հանգույցի  ընտրության  և ինքնակարգավորման  փուլերի  ընդհանուր  քանակն  է:  Ինքնակարգավորումը  բխում  է հանգույցների ինքնակազմակերպման բնույթից։ ", "Տվյալ դասի ֆունկցիոնալ ստեկը ունի Նկար 20-ի տեսքը: ", "Նկար 20.GuiHelper դասի նկարագրություն: ", "Սերվեր-կլիենտ/ Service-client մոդուլի ճարտարապետության շրջանակներում ունենք    BroadcastingHelper  դասը  (Նկար  21),  որը  պարունակում  է  անհրաժեշտ ֆունկցիաները հեռարձակող-բաժանորդ կապի իրականացման համար: ", "Նախագծված  ճարտարապետության  հիմքում  ընկած  է  այն  գաղափարը,  որ հեռարձակողը  ինքնին  հանդիսանում  է  նաև  բաժանորդ  նույն  ալիքի  համար,  որը հնարավորություն է ընձեռում այլ օգտվողների փոփոխությունների ընդունումը նաև հեռարձակողի  կողմից:  Ինչպես  նշվեց  տվյալ  ալիքում  պահպանվում  է  բոլոր բաժանորդների  կողմից  կատարված  բոլոր  փոփոխությունները,  որի  համար ստեղծվել է տվյալների հենք, որի իրականացման համար ընտրվել է SQLite- ը: ", "Նկար 21.BroadcastingHelper դասի նկարագրություն: ", "Ինչպես  արդեն  նշվեց,  CA  simulator  համակարգը  ստեղծվել  է  ավազակույտի մոդելի  օրինակով:  Առկա  են  երկու  հիմնական  գործառույթներ  կապված ավազակույտի հետ. DrawSandpileModel (), որն ապահովում է ավազակույտի տեսաբերումը, մոդելի փոփոխությունների արտացոլումը և •  addgrain(Position pos) ֆունկցիան, որը օգտագործողին հնարավորություն է տալիս կատարել փոփոխությունները ավազակույտի մոդելի վրա: ", "Նկատենք, որ հավելյալ բջջային մոդելի մշակումը նույնպես դժվարություն չի ներկայացնում.  պարզապես  կատարվում  է  տեսաբերման  եւ  մոդելի  փոփոխման գործառույթների  փոփոխություն:  Իսկ  արդեն  տեղեկությունների  փոխանակման համար նոր բջջային ավտոմատի դեպքում անհրաժեշտ է ISeService ինտերֆեյսի մի քանի  գործառույթների  ադապտացում  տվյալ  մոդելին  SeService  դասում:  CA simulator  ծրագրային  համակարգի  աղբյուրները  (source  code)  կարելի  է  գտնել Bitbucket-ում url {https: //nhayk@bitbucket.org/nhayk/ca_simulator.git} հղումով: ", "Աղյուսակ  2-ը  ներկայացնում  է  հաղորդագրությունների  ձևաչափը,  որոնք օգտագործվում են աշխատանքային հանգույցի և դրան համապատասխանող ծառայության հանգույցի  միջև  հաղորդագրության  փոխանակման  գործընթացում՝  անվտանգ  կապուղու հաստատման նպատակով: ", "Գոյություն  ունեն  «Լուրջ  խաղերի»  հայտնի  մի  քանի  օրինակներ  որոնք, համարվում  են,  որ  փոխել  են  աշխարհը:  Դրանցից  են՝  «MICROSOFT  FLIGHT SIMULATOR (1982)»-ը [57], TILTFACTOR LABORATORY-ի կողմից ստեղծած խաղերը [58], FORCE MORE POWERFUL (2006) [59] և այլն (Նկար 22): ", "Թռիչքի  սիմուլատորները  հանդիսանում  են  լուրջ  խաղերի  նախապապերը,  իսկ MICROSOFT  FLIGHT  SIMULATOR-ը    նրանցից  ֆինանսապես  ամենահաջողվածն  է: ", "քաղաքացիական  ավիացիայի  համապարփակ  մոդելավորում,  և  մեկն  է  գոյություն ունեցող ստվար քանակով ոչ մարտական սիմուլատորների մեջ: ", "Նկար 22. Հայտնի «լուրջ խաղերի» օրինակներ: ", "լաբորատորիան, վերջին  տարիներին հաջողություններ  գրանցեց իրենց նորարարական  քարտային  խաղերով:  Ընկերության  կարգախոսն  է  «Խաղերի դիզայնը  սոցիալական  փոփոխության  համար»,  իսկ  Pox  և  Awkward  Moment  լուրջ խաղերի միջոցով, նրանք ուսուցանում են խաղացողներին այնպիսի լուրջ թեմաներ, ինչպիսիք  են  հակավակցինային  շարժումները  և  սոցիալական  կարծրատիպերից խուսափումը: ", "մասին:  Այնուհետև  Breakaway  Games-  ը  ստեղծեց  վիդեո  խաղ՝  հիմնված  Սերբիայի Otpor շարժման վրա:  Խաղը նախատեսված էր սովորեցնել վարել հակամարտություն օգտագործելով ոչ բռնի մեթոդներ: ", "Առաջարկված  «CA  simulator»  ծրագրային  համակարգում  ավելացվել  է  նոր մոդուլ,  որը  հանդիսանում  է  «լուրջ  խաղի»  օրինակ  SandGame  անվանմամբ: ", "Նկարագրված  մեթոդը  հաշվի չի  առնում  ֆոնում(ետին  պլանում)  կեղծ թիրախների  առկայությունը,  որը  կհանգնեցնի  հայտնաբերման  սխալ  արդյունքի  և ալգորիթմի ավելորդ ժամանակի ծախսի: ", "Նկար 6-ում պատկերված է ծառայության հանգույցների և հանգույցների ընդհանուր քանակի    հարաբերակցությունը։  Ինչպես  նաև  նկար  7-ում  բերված  է  բանալիների պահպանման  համար  անհրաժեշտ  հիշողության  ծավալը՝  համեմատած  դասական բանալիների պահպանման մեթոդի հետ։ ", "Նկար 23.SandGame խաղը երկու խաղացողների դեպքում: ", "Խաղում  օգտագործողների  նպատակն  է  հասնել  անվերջ  անկայուն  վիճակի հերթով  գցելով  ավազահատիկներ՝ օգտագործողների կողմից ընտրված կոորդինատներին:  Խաղը՝  դիտարկված  լինելով  փակ  եզրակետերով  ցանցի  վրա, հնարավորություն  է  ընձեռում  մոդելին  չկորցնել  ավազահատիկ:  Հետևաբար, կարելի  է  վստահ  լինել  վերջավոր  ժամանակում  հաղթող  ճանաչվելու  փաստում: ", "Այս  պահանջները  բավական  մեղմ  են,  բայց  կարող  են  պահանջել    սարքի  տեխնիկական պարամետրերի  փոփոխությունների  կատարում,  որոնք  զգալիորեն  կբարձրացնեն  նրա ինքնարժեքը: ", "Խաղի  իմաստը  կայանում  է  հետևյալում:  Կա  պատահականության սկզբունքով  սկզբնարժեքավորված  գագաթներով  ավազակույտի  մոդել,  և  կան խաղացողներ,  որոնք  պետք  է  խաղան  միմյանց  դեմ:  Յուրաքանչյուր  խաղացող կարող  է  ավազահատիկ  ավելացնել  տվյալ  մոդելի  ցանկալի  հանգույցին,  և  այս քայլը  կատարվում  է  բոլոր  խաղացողների  կողմից  հերթականությամբ  այնքան, մինչև մոդելը ընկնի անվերջ անկայուն վիճակում: Հաղթողը կլինի այն խաղացողը, ում  գցած  ավազահատիկը  հետևանք  կդառնա  մոդելի  ավերջ  անկայուն  վիճակում ընկնելու: ", "Ներկայացնենք  թե  ինչպես  են  խաղում  SandGame-ը:  Խաղի  քայլերի հերթանականությունը  բաժանենք  3  բաժինների:  նախապատրաստություն, գործողություններ, հաղթողի ճանաչում: ", "•  Նախապատրաստություն  –  նոր  խաղ  սկսելու  համար  խաղացողը ընտրում  է  \"File\"  վերին  պանելից,  այնուհետև  ընտրում  \"New  game\" տարբերակը,  որից  հետո  հայտնվում  է  պատուհան  ցանցի  չափի մուտքագրման համար: Մուտքագրելուց հետո  ստեղծվում  է նոր մոդել, որն արդեն սկզբնարժեքավորված կլինի քանակությամբ ավազահատիկներով:  Մոդելով  կիսվելու  և  խաղի  ալիքը  մյուս խաղացողների  համար  հասանելի  դարձնելու  համար  խաղացողը պետք  է  ընտրի \"Broadcasting\"  տարբերակը  վերևի  պանելից, այնուհետև  ընտրի  \"Start  Broadcasting\"  կոճակը,  որից  հետո  կհայտնվի պատուհան,  որտեղ  խաղացողը  պետք  է  մուտքագրի  խաղի  ալիքի անվանումը(օրինակ ASM students introduction), որով մյուս խաղացողները  կգնտնեն  տվյալ  ալիքը:  Դրանից  հետո  մյուս խաղացողները  կարող  են  բացել  ալիքների  ցուցակը  ընտրելով \"Broadcasting\" օպցիան վերևի պանելից և սեղմելով «Connect to Chanel» կոճակը:  Կբացվի  ալիքների  պատմությունը  ցույց  տվող  պատուհան, որտեղ հասանելի կլինեն ինչպես  ակտիվ,  այնպես էլ պասիվ/ավարտված ալիքները (Նկար 24): Ալիքների ցանկից ընտրելով ցանկալի  ալիքը  (ASM  students  introduction  մեր  դեպքում)  նրանք կմիանան միևնույն ալիքին դիտարկելով միևնույն մոդելը: ", "Նկար 24.Ալիքների ցուցակ: ", "•  Գործողություններ –  Նույն  ալիքին/մոդելին  միանալուց  հետո խաղացողները  կարող  են  սկսել  ավազահատիկների  ավելացման պրոցեսը, որը կատարվում է ըստ  ալիքին միացման հերթականությամբ:  Նշենք  որ  ամեն  խաղացողին  թույլատրվում  է ավելացնել  միայն  մեկ  ավազահատիկ  ամեն  քայլում  (Նկար  25):  Դրա համար  խաղացողը  ընտրում  է  \"Edit\"  օպցիան  վերևի  պանելից, այնուհետև սեղմելով \"Add Grain\" կոճակը հայտնվում է նոր պատուհան, որտեղ խաղացողը մուտքագրում  է իրեն ցանկալի կոորդինատները, և վերջացնելուն պես սեղմում պատուհանի «Add» կոճակը: ", "Նկար 25.Ավազահատիկ ավելացնելու պատուհան: ", "Այսպիսով՝  հայտնաբերման  և  ճանաչման  այդպիսի  համախումբ  համակարգ կլուծի նշված խնդիրը, քանի որ ատենախոսական աշխատանքը նպատակաուղղված է կիրառվելու  այնպիսի  տեսահսկման  տարածքներում, որտեղ օբյկետների տարատեսակները կարող են լինել 10 և ավել։ ", "SandGame-ի  հիմքում  եղած  լուրջ  տեսությունը  դեպի  հաղթանակ  տանող ճանապարհը  ավելի  դժվար  է  դարձնում,  երբ  հակառակորդները  պրոֆեսիոնալ խաղացողներն  են  լինում:  SandGame-ը  հնարավորություն  է  տալիս  յուրաքանչյուր խաղացողի  ստեղծել  իր  սեփական  հաղթանակի  տանող  ռազմավարությունը, սակայն  հաղթողը  կլինի  այն  մեկը,  որի  ռազմավարությունը  ավելի  լավ  կլինի: ", "Օրինակ,  ամենապարզ  ռազմավարություններից  մեկը  կարող  է  լինել  հետևյալ. ավազահատիկներ  ավելացնում  ենք  այն  գագաթներին,  որոնք  ավելի  մոտ  են անկայուն  վիճակի  ընկնելու  համար,  կամ  ավելի  հետաքրքիր  կլինի  մոդելը  փորձել բերել  կրիտիկական  վիճակներից  մեկին,  որի  դեպքում  անվերջ  անկայունության հասնելու համար անհրաժեշտ ավազահատիկների քանակը մոտ է նվազագույնին: ", "ավազահատիկներ և  մաքսիմալ հեռավորություն» խնդրի լուծման դիտարկումը Արհեստական  նեյրոնային  ցանցերը  մաթեմատիկական  մոդելներն  են,  ինչպես նաև  նրանց  ծրագրային  կամ  սարքային  իրականացումներ,  որոնք  կառուցված  են բիոլոգիական  նեյրոնային  ցանցերի  (կենդանի  օրգանիզմի  նեյրոնային  բջիջների) հիման  վրա։  Այս  հասկացությունը  առաջացել  է  գլխուղեղում  առաջացող պրոցեսների  ուսումնասիրման  և  այդ  պրոցեսների  մոդելավորման  փորձերի արդյունքում։ Այդպիսի առաջին փորձը Մակկալոկի և Պիթսի նեյրոնային ցանցերն էին [60]: Հետագայում, ուսուցողական ալգորիթմների մշակումից հետո, ստացված մոդելները  սկսեցին  կիրառել  պրակտիկ  նպատակներով`  կանխատեսման խնդիրներում,  կերպարների  ճանաչման  համար,  կառավարման  խնդիրներում  և այլն։  Մասնավորապես  Նկար  26-ում  պատկերված  է  բնական  ուղեղի  նեյրոնի կառուցվածքը, որտեղ նշված ամեն մաս ունի ուրույն աշխատանքը. •  Dendrite – ստանում են տվյալներ •  Axon – ուղարկում են տվյալներ •  Synaptic terminal – Երկու նեյրոնի միացման կետերն են •  Neurotransmitter – փոխանցում է տվյալներ երկու նեյրոնների միջև Նկար 26.Բիոլոգիական նեյրոնային ցանց:8 Եթե ավելի խորը դիտենք տվյալների փոխանցման հատվածը կունենանք Նկար 27- ի պատկերը, որտեղ. •  Receptor – տվյալների ընդունիչ •  Neurotransmitter transporter – Neurotransmitter-ի փոխադրիչ Նշեմ նաև որ ինչքան կարևոր է նեյրոններում փոխանցվող ինֆորմացիան այնքան ավելի շատ Neurotransmitter-ներ են արտադրվում և փոխանցվում: ", "Նկար 27.Բիոլոգիական նեյրոնային ցանցում ինֆորմացիայի փոխանակում:9 Արհեստական նեյրոնային ցանցերի դեպքում կունենանք Նկար 28-ի պատկերը: ", "Նկար 28.Բիոլոգիական նեյրոնի պարզեցում: ", "տեսահսկում իրագործելիս: ", "Արհեստական նեյրոնային ցանցերն իրենցից ներկայացնում են փոխկապված և  փոխհամագործակցող (արհեստական  նեյրոնների)  պարզ  պրոցեսորների համակարգ:  Այդպիսի  պրոցեսորները  սովորաբար  բավականին  պարզ  են, հատկապես, համեմատած  անհատական համակարգիչներում կիրառվող պրոցեսորների հետ։ Նմանատիպ ցանցի յուրաքանչյուր պրոցեսոր գործ ունի միայն ազդանշանների  հետ,  որոնք  պարբերականորեն  ստանում  է,  և  ազդանշանների, որոնք  պարբերաբար  ուղարկում  է  այլ  պրոցեսորների։  Այնուամենայնիվ,  այդպիսի լոկալ  պարզ  պրոցեսորները  միասին  ընդունակ  են  կատարելու  բավականին  բարդ խնդիրներ։  Մեքենայական  ուսուցման  տեսանկյունից  նեյրոնային  ցանցը  իրենից ներկայացնում է  կերպարների  ճանաչման,  դիսկրիմինանտ  վերլուծության, կլաստերիզացիայի  մեթոդի  և  նմանատիպ  այլ  մեթոդների  լուծման  յուրօրինակ տարբերակ։ Մաթեմատիկական տեսանկյունից, նեյրոնային ցանցերի ուսուցումը ոչ գծային  օպտիմիզացման  բազմապարամետրական  խնդիր  է։  Կիբեռնետիկայի տեսանկյունից  նեյրոնային  ցանցը  կիրառվում  է  հարմարվողական/adaptive կառավարման խնդիրներում և որպես ալգորիթմ կիրառվում է ռոբոտատեխնիկայում։  Հաշվողական  տեխնիկայի  և  ծրագրավորման  զարգացման տեսակյունից  նեյրոնային  ցանցը  արդյունավետ  զուգահեռացման  խնդիրների լուծման միջոց է։ ", "Նեյրոնային  ցանցերը  չեն  ծրագրավորվում  բառից  բուն  իմաստով,  դրանք ուսուցանվում  են:  Ուսուցանելու  հնարավորությունը  նեյրոնային  ցանցերի  գլխավոր առանձնահատկություններից  է։  Տեխնիկապես  ուսուցումը  կայանում  է  նեյրոնների միջև  կապերի  գործակիցների  առկայությամբ։  Ուսուցման  պրոցեսում  նեյրոնային ցանցը  ունակ  է  հայտնաբերել  մուտքային  և  ելքային  տվյալների  միջև  բարդ կախվածություններ,  ինչպես  նաև  կատարել  ընդհանրացում,  որի  հետևանքով «ամրապնդվում»  է  նեյրոնների  միջև  կապերի  կշիռները:  Դա  նշանակում  է,  որ հաջող  ուսուցման  դեպքում  ցանցը  կարող  է  վերադարձնել  ճիշտ  արդյունք  այն տվյալների  հարցումների  դեպքում,  որոնք  բացակայում  էին  ուսուցողական ընտրանքում,  ինչպես  նաև  հնարավոր  են  լինել  ոչ  լիարժեք  և/կամ  «աղմկոտ», մասամբ աղավաղված արդյունքներ։ ", "Նեյրոնային  ցանցերի  ուսուցման  մի  քանի  եղանակ  գոյություն  ունի,  բայց հիմնականում  օգտագործղվողներից  են  «Ուսուցչով/  supervised»  և  «Առանց ուսուցչի/unsupervised» տարբերակները: ", "Այս երկու տարբերակների նկարագրությունները հետևյալն են. Ուսուցչով ուսուցման դեպքում նեյրոնային ցանցը •  փորձում է կանխատեսել սպեցիֆիկ քանակ •  պարունակում է նախնական պիտակավորված ուսուցողական նյութ •  կարողանում է անմիջականորեն չափել ճշգրտությունը Առանց ուսուցչի տեսակի դեպքում նեյրոնային ցանցը •  փորձում է «հասկանալ» տվյալները •  փնտրում է կառուցվածքային կամ շաբլոնային համաչափություն չի պահանջում պիտակավորված ուսուցողական նյութ •  գնահատում է հիմնականում անուղղակի/indirect կամ որակով Արհեստական  նեյորնային  ցանցերի  հիմնական  երկու  տիպերն  են Feedforward ցանցեր և Ռեկուրենտ ցանցեր (Նկար 29 և 30): ", "Նկար 29.Feedforward արհեստական նեյրոնային ցանց: ", "Նկար 30.Ռեկուրենտ արհեստական նեյրոնային ցանց: ", "Feedforward  նեյրոնային  ցանցը  առաջին  և  ամենապարզ  նեյրոնային  ցանցի տիպն  է:  Այս  տեսակի  ցանցերում  տեղեկատվությունը  շարժվում  է  միայն  մեկ ուղղությամբ, մուտքի հանգույցներից, թաքնված հանգույցների միջոցով (եթե առկա է)  դեպի  ելքային  հանգույցներ:  Տվյալ  տիպի  ցանցերում  ցիկլեր  կամ  հանգույցներ չկան ի տարբերություն ռեկուրենտ տիպի ցանցերի: Ռեկուրենտ նեյրոնային ցանցը արհեստական  նեյրոնային  ցանցերի  դաս  է,  որտեղ  հանգույցների  միջև  կապերը հաջորդականությամբ  ուղղորդված  գրաֆիկ  են  կազմում:  Ի  տարբերություն feedforward  նեյրոնային  ցանցերի,  ռեկուրենտ  նեյրոնային  ցանցը  կարող  է օգտագործել  իր  ներքին  վիճակը  (հիշողություն)  մուտքերի  հաջորդականության մշակման համար, որը թույլ է տալիս նմանատիպ ցանցերի կիրառությունը այնպիսի խնդիրների  դեպքում,  ինչպիսիք  են  ոչ  սեգմենտավորված  և  կապված  ձեռագիր գրությունների ճանաչումը կամ խոսքի ճանաչում: ", "Ինչպես  նշվեց,  արհեստական  նեյրոնային  ցանցերը  բաղկացած  են պրոցեսինգային  միավորներից  (նշանակենք՝  PU)  ,  որոնք  հանդիսանում  են արհեստական նեյրոնային ցանցերի հիմնասյուները: PU- ն սովորաբար ունի Նկար ֆունկցիան: ", "Նկար 31.Նեյրոն-պրոցեսինգային միավոր: ", "Հիմնականում  PU-ները  տրամաբանություն  մշակող  մոդուլներ  են,  որոնք օժտված են ֆունդամենտալ ֆունկցիայով, որը  իրենից ներկայացնում է մուտքային «կշռված»  տվյալների  գումարի  և  որոշակի  շեմային  արժեքի  վրա  հիմնված գործառույթով: Մաթեմատիկական առումով սա արտահայտվում է որպես 𝑢𝑢 𝑦𝑦𝑖𝑖 = 𝑓𝑓𝑖𝑖 �� 𝑤𝑤𝑖𝑖𝑗𝑗𝑥𝑥𝑗𝑗 − 𝑠𝑠𝑖𝑖 𝑗𝑗=1 � = 𝑓𝑓𝑖𝑖(𝑎𝑎𝑖𝑖) որտեղ , , ,  և ,  ատրիբուտները  համապատասխանաբար -ի  ելքային 𝑦𝑦𝑖𝑖 տվյալն  է, 𝑤𝑤𝑖𝑖𝑗𝑗 -ից 𝑥𝑥𝑗𝑗 կապուղղու  կշիռն  է, 𝑠𝑠𝑖𝑖 -ի  մուտքային  տվյալն  է, 𝑃𝑃𝑃𝑃 -ի  շեմային արժեքն է: ", "Աղյուսակ 3․ Ձևավորված R մատրիցի օրինակը , . Ընդհանուր  ինդեքսային  բանալիների  կենտրոնը  ամպային  միջավայր  է,  որում կատարվում  է  G  մատրիցների  ձևավորում`  օգտագործելով  այսպես  կոչված  Վարնսդորֆի կանոնը,  ըստ  որի  հաջորդ  քայլը  կատարելիս  գնահատվում  է  բոլոր  հնարավոր  քայլերը, այնուհետև ընտրվում է նվազագույն գնահատական ստացած քայլը։ Քայլերի գնահատումը կատարվում  է`  հաշվարկելով  այդ  քայլի  կատարման  դեպքում  առկա    բոլոր  հնարավոր քայլերի քանակը։ Արդյունքում ձևավորվում է Gi ինդեքսներից / քայլերից բաղկացած M * N չափի մատրից, որտեղ Gi  <= M * N: Շնորհիվ այդ քայլերի հերթականության շարժական բանալին  և  սերվերը  կարող  են  դուրս  բերել  ընդհանուր  հեշավորման  բանալի,  որը կօգտագործվի հարցումները նույնականացնելու նպատակով։ "], "source_docs_file": "Informatics and Computer Systems.json"}