{"paragraphs": ["ա․                                                            բ․ Նկար 2.12. ա) վերահսկվող տարածքը, բ) օբյեկտի առկայությունը վերահսկվող տարածքում: ", "Վերահսկվող  տարածքում  կարող  է  ներթափանցել  ցանկացած  օբյեկտ,  և տարածքի  վերահսկողության  պատասխանատու  անձը  կամ  խումբը  նախօրոք  չի կարող  կանխատեսել,  թե  ինչպիսի  օբյեկտ  կներթափանցի  տարածք:  Նկար  2.12ա-ում պատկերված  երկաթուղային  կայարանում  օբյեկտի  հայտնաբերումը  խիստ  կարևոր  է: ", "Քանի որ վերահսկվող տարածքը բաց է, ապա օրվա ընթացքում արևի դիրքից կամ այլ եղանակային  փոփոխությունից  հնարավոր  է  լույսի  ինտենսիվության  փոփոխություն պատկերում,  նույն  ժամանակ  ներթափանցող  օբյեկտը  անորոշ  է,  ապա  կիրառելով հայտնաբերում,  ինչպես  նկարագրված է  նախորդ` կհայտնաբերենք ցանկացած օբյեկտի [47]: ", "Նկար  2.12ա-ի  և  2.12բ-ի  միջև  ալգորիթմը  կիրառելուց  օբյեկտը  կհայտնաբերվի, ինչպես պատկերված է նկար 2.13-ում: ", "Նկար 2.13. Օբյեկտի հայտնաբերումը վերահսկվող տարածքում: ", "Սակայն դիտարկենք մի տարածք, որում առկա է շարժում առաջացնող օբյեկտ, օրինակ՝  ծառ  (Նկար  2.14):  Օրվա  ընթացքում  անգամ  մեղմ  քամու  առկայության դեպքում վերահսկվող տարածքում գտնվող ծառը կշարժվի: ", "ա.                               բ. Նկար 2.14․ ա) վերահսկվող տարածքը, բ) ծառը տատանման պահին: ", "Նշենք, որ openMP-ն ստանդարտ է C, C++ լեզուներով՝ ստեղծված ծրագրերի զուգահեռացման համար:  Այն նկարագրում է շրջակա միջավայրի փոփոխականները,  գրադարանի  ֆունկցիաները  և  պրոցեդուրաները,  որոնք օգտագործվում  են  բազմահոսքային  ծրագրեր  ծրագրավորելու  համար  ընհանուր հիշողությամբ  բազմապրոցեսային  համակարգերում:  Այն  իրականացնում  է զուգահեռ  հաշվարկ`  օգտագործելով  բազմահոսքությունը  (multi-threading),  որտեղ գլխավոր  հոսքը  ստեղծում  է    \"հպատակ\"  հոսքեր,  և  աշխատանքը  բաժանվում  է նրանց  միջև:  Ենթադրվում  է,  որ  հոսքերը  կատաարվում  են  զուգահեռ, բազմապրոցեսորային մեքենաների վրա, որտեղ պրոցեսների քանակը պարտադիր չէ մեծ կամ հավասար լինի հոսքերի քանակին: ", "Նկար  2.14բ-ում  պատկերված  է  ծառը  քամու  ազդեցության  տակ  տատանման պահը:  Ծառի  տատանման  արդյունքում  պատկերում  առաջանում  է  պիքսելների փոփոխոթւյուն:  Սկզբնական  պատկերը,  որտեղ  ծառը  գտնվում  էր  անշարժ  վիճակում, համեմատենք ընթացիկ պատկերի հետ XOR բիթային համեմատության սկզբունքով: ", "ա.                            բ. Նկար 2․15 . ա) համեմատության արդյունքը, բ) օբյեկտի առկայությունը տեսահսվող տարածքում: ", "Արդյունքում  կստանանք  նկար  2.15-ում  ցույց  տրված  սև  տարածքը:  Ինչպես երևում  է  նկար  2.15ա-ից,  ստացանք  սև  պիքսելներ,  որոնք  միասին  կազմում  են  փոքր սև  տարածքներ,  վերջինս  կանվանենք  շեղումային  տարածքները (որոնք  մեր պարագայում հանդիսանում է կեղծ թիրախներ): ", "Ենթադրենք տեսախցիկի միջոցով նկարահանումը սկսելուց որոշ ժամանակ անց պատկերում հայտնվում է օբյեկտ, որը կենդանի է, օրինակ՝ ձի (Նկար 2.15բ): ", "Ինչպես  համոզվեցինք  նախորդ  օրինակից,  ծառի  բացակայության  դեպքում, համեմատությունից  հետո  դիտարկվող  օբյեկտը՝  ձին,  միանգամից  կհայտնաբերվեր: ", "Քայլ 3. 2-րդ քայլում նշված գործողությունները կատարում ենք 2-րդ, 3-րդ, Քայլ 4. Աշխատանքի ավարտի պահը ֆիքսելու երկու եղանակ կա. գագաթ մնացել է թե ոչ: ", "POW  ֆունկցիաների  առավել  տարածված  տեսակն  օգտագործում  է  պրոցեսորի հաշվողական  ռեսուրսները:  Բացի  այդ,  առաջարկվել  են  նաև  POW  այլ  ֆունկցիաներ, ինչպիսիք  են  հիշողության  ֆունկցիաները:  Այս  տեսակի  ֆունկցիաները  ավելի  դժվար  է իրացնել,  քանի  որ  հիշողության  ծանրաբեռնման  համար  անհրաժեշտ  ժամանակը  ավելի շատ  է,  քան  CPU  ծանրաբեռնման  ժամանակը։  Նաև  հիշողության  ֆունկցիաների գործածումը բարդություն  է ստեղծում ցածր պարամետրերով համակարգիչների կիրառման դեպքում:  Հաշվի  առնելով  վերոհիշյալ  թերությունները՝ ատենախոսությունում նախընտրությունը    տրվել  է  պրոցեսորի  հետ  աշխատող  POW  ֆունկցիաներին,  որն այսուհետև կնշվի որպես դասական POW ֆունկցիաներ։ ", "Դասական POW ֆունկցիաների լուծման խնդիրները հիմնված են NP որոնողական խնդիրների վրա, երբ խնդրի լուծման համար պետք է կատարվի որոնում, մինչդեռ սերվերը պետք  է  ստուգի  միայն  մեկ  առաջարկված  լուծում:  Սովորաբար  վերոնշյալ  խնդիրների բնույթից  ելնելով  լուծման  համար    անհրաժեշտ  հաշվողական  գործառույթըկարող  է իրականացվել միայն վիճակագրականորեն: ", "Ակնհայտ է, թե ինչ կենսական նշանակություն կարող է ունենալ օբյեկտի արագ և ճշտորեն  հայտնաբերումը մարդկային կյանքին սպառնացող վտանգների կանխման տեսանկյունից,  այնպիսի  վայրերում,  ինչպիսիք  են,  օրինակ՝  երկաթուղային ճանապարհները և կայարանները: ", "Առաջարկվող մեթոդը: Մշակվել է շեղումային տարածքների (կեղծ թիրախների) հայտնաբերման  և  զատման  մեթոդ՝  օբյեկտների  հայտնաբերման  անսխալ աշխատանքը ապահովելու համար: Պատկերում կեղծ թիրախներն ընդկրկող տիրույթը կանվանենք  սխալանքի  տիրույթ:  Պարզ  է,  որ  սխալանքի  տիրույթի  հայտնաբերումը կարևոր դեր ունի, քանի որ  նկարների համեմատման ժամանկ այն զատելու շնորհիվ միայն հնարավոր կլինի գտնել իրական օբյեկտը: ", "Կեղծ  թիրախների  հայտնաբերումը:  Բաց  տարածության  մեջ  անգամ  քամու բացակյության  դեպքում  պոտենցիալ  տատանում  ստեղծող  օբյեկտները  բոլորովին անշարժ չեն մնում, օրինակ՝ ծառի դեպքում տերևները փոքրինչ շարժվում են: ", "Նկ. 13. Լոգիստական արտապատկերման երկատման դիագրամը Միաչափ  քաոսային  արտապատկերումների  այլ  օրինակներ  են  սինուսային արտապատկերումները,  որոնք  լոգիստական  արտապատկերման  հետ  ունեն  միանման դրսևորում,  մասնավորապես  սինուսային  արտապատկերումն  իր  քաոսային  վարքագծում ունի լոգիստակաjին  արտապատկերմանը նման երկճյուղավորման դիագրամ և  միևնույն խնդիրները: Այս խնդիրները լուծելու համար Զհոուն և մյուսներն առաջարկել են քաոսային համակարգ՝  երկչափ  արտապատկերումներով,  որոնք  ընդունված  է  նշանակել  LS պարամետրով [53,54]: Գաղտնագրային համակարգերում ցանկացած ոչ հավասարաչափ բաշխում  պատահական  թվերի  գեներատորով  կարող  է  օգտագործվել  գրոհների  կողմից ծածկագրի  կամ  ալգորիթմի  բացահայտման  համար՝  օգտագործելով  դիֆերենցիալ գրոհները: ", "Հայտնաբերման  մեթոդը  կիրառելիս  նկարահանման  ընթացքում  յուրաքանչյուր վայրկյան անց վերցվում է նոր պատկեր և համեմատվում սկզմնական պարտկերի հետ :  Նպատակն  է  գտնել  շեղումային  տարածքները  և  ամեն  անգամ  համեմատություն կիրառելու ընթացքում անտեսել այդ տարածքները: ", "Սկզբնական պատկերը պահպանելուց հետո նկարահանումը շարունակվում է 30 րոպե  (նշված  ժամանակը  նախատեսված  է  կոնֆիգուրացիա  իրագործելու  համար)  և համկարգի կողմից դիտարկվում են պատկերում պոտենցիալ տատանում առաջացնող օբյեկտները,  որոնք  կարող  են  առաջացնել  շեղումային  տարածքներ:  Դիտարկման գործընթացի  ընթացքում  1  վայրկյան  պարբերությամբ  վերցվում  և  պահպանվում  է պատկերը:  Փորձում  ենք  գտնել  և  ֆիքսել  շեղումային  տարածքը  առաջացնող  օբյեկտը իր  ամենամեծ  տատանման  պահին:  Դիտատրկումը  ավարտելուց  հետո  պահպանված պատկերները  մեկ  առ  մեկ  համեատվում  են  սկզբնական  պատկերի  հետ,  որը  հենց կօգնի  գտնել  ամենամեծ  շեղում  ունեցող  պատկերը:  Համեմատության  համար օգտագործվում  է  նախորդ`  2.1.1  ենթավերնագրում  նկարագրված  համեմատություն մեթոդը  [47]:    Այն  պատկերը,  որը  կպարունակի  ամենաշատ  սև  պիքսելները,  այն  էլ կլինի  ամենամեծ  շեղում  ունեցող  պատկերը:  Վերջինս  կրկին  ավտոնոմ  կերպով կընտրվի  համակարգի  կողմից:  Այն  կանվանենք  սխալանքի  պատկեր:  Սխալանքի պատկերի թվային մատրիցը կնշանակենք լատինատառ W տառով: ", "Սխալանքի տիրույթը մեծացնելու սկզբունքը: Քանի որ տարբեր եղանակային պայմաններում  քամու  առկայությունը  կարող  է  բերել  ծառի  ավելի  մեծ  ամպլիտուդով տատանման  (վերջինս  կբերի  սխալանքի  տիրույթի  մեծացման),  և  կարճաժամկետ դիտարկմանան  արդյունքում  հնարավոր  չէ  մեծ  ճշտությամբ  որոշել  սխալանքի տիրույթը,  ապա  հաջորդ  կարևոր  քայլը  կլինի  սխալանքի  տիրույթի  մեծացումը:    Սա կօգնի համակարգին նախատեսել ապագա հնարավոր շեղման տիրույթը: ", "Սխալանքի  տիրույթը մեծացնելու համար կաշխատեցնենք հետևյալ մատրիցային եղանակը W մատրիցի համար: ", "Գծապատկերներից  պարզ  է  դառնում,  որ  ցանցի  մեծացման  հետ ժամանակային  տարբերությունը  ավելի  է  մեծանում:  Ուստի  մեծ  ցանցերի  դեպքում զուգահեռացումը  օգտագործելը  շատ  ավելի  օգտավետ  կլինի:  Հիշեցնեմ  նաև,  որ ժամանակը  ավելի  փոքր  կարող  է  լինել  ճիշտ  ծրագրային  մինիմիզացիաների դեպքում: "], "paragraph_source_docs": [2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 0, 0, 2, 2, 2, 0, 2, 2, 2, 2, 1], "source_docs_file": "Informatics and Computer Systems.json"}