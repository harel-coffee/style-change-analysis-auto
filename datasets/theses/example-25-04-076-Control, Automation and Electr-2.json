{"paragraph_source_docs": [4, 2, 2, 3, 2, 2, 2, 2, 1, 3, 2, 2, 2, 4, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2], "paragraphs": ["Նանոչաւիական  հիշող սարքերի  համար  (Հ1՜Լ  թեստային լուծումներ  գեներացնող կոմպիլյատորների  նախագծման բնութագրերի  արագ գնահատման  մեթոդի  փորձնական արդյունքներն  իրական  1Հ1՜Լ  կոմպիլյատորներում վերանորոգման  խնդիրները Յուրաքանչյուր  նոր  տեխնոլոգիա  հնարավորություն  է  տալիս  ստեղծել  ավելի  փոքր, խիտ,  արագ  և  բազմաֆունկցիոնալ  ԲՎՀ:  Արդի  ԲՎՀ-ը  պարունակում  են  մի  քանի  ՄՍ բլոկներ:  Ներկառուցված  հիշողությունները  հանդիսանում  են  ԲՎՀ-ի  գլխավոր կոմպոնենտները'  զբաղեցնելով  բյուրեղի  մակերեսի  մեծ  մասը  [58]:  Այդ  պատճառով դրանց  արտադրական  ելքն  ազդում  է  ամբողջ  ԲՎՀ-ի  արտադրական  ելքի  վրա: ", "կառուցվածքների  տեսքով    ներկայացումը։  Ուսումնասիրվել  են  «փափուկ»  և «կոշտ»  բլոկների հատկությունները։ ", "հատումների  քանակի  նվազարկման  և  արագագործ  ավտոմատացման  միջոց մշակելու նպատակով։ ", "Նկ. 3.24. 32QAM ազդանշանի ամպլիտուդայի գրաֆիկ Նկ.  3.23-ում  պատկերված  է  32QAM  մոդուլացված  ազդանշանի  ամպլիտուդայի գրաֆիկը՝ ներկայացված բաղկացուցիչ կետերի  միջոցով։  Նկարում հստակ  երևում են 5 գծեր,  որոնք  համապատասխանում  են  ամպլիտուդայի  արժեքների  խտությանը  տվյալ տիրույթներում։  Հետևաբար,  դիտարկելով  ակնթարթային  ամպլիտուդայի  գրաֆիկը կարելի  է  տեսնել  վերջինիս  ակնթարթային  ամպլիտուդայի  փոփոխությունների քանակը, ինչը երևում է նաև նկ․ 3․25-ում հիստոգրամի գրաֆիկից։ ", "առանձնահատկությունների տեսանկյունից՝ հրատապ է դառնում, տրամաբանական  տարրերի  աշխատանքային  հզորություններից  ելնելով,  դրանց տեղաբաշխման  մեթոդների  մշակումը:  Եթե  ընդունենք,  որ  հզորության  ստատիկ բաղադրիչը գործնականում կախված չէ սխեմայի աշխատանքի տրամաբանությունից,  ապա  տարրերի  տեղակայման  փուլում  հզորությունների գնահատման  համար  կարող է  օգտագործվել  միայն  հզորությունների դինամիկական բաղադրիչը: ", "գնահատման  մեթոդ՝  կախված  տարրի  տիպից,  սխեմայի  տրամաբանությունից  և դրանում տարրի դիրքից: ", "- 65 - ՀԱՇՎԱՌՄԱՄԲ ԻՆՏԵԳՐԱԼ ՍԽԵՄԱՆԵՐԻ ՖԻԶԻԿԱԿԱՆ ՆԱԽԱԳԾՄԱՆ ԱՎՏՈՄԱՏԱՑՄԱՆ ԵՆԹԱՀԱՄԱԿԱՐԳԻ ԱԼԳՈՐԻԹՄԱԿԱՆ ԵՎ ԾՐԱԳՐԱՅԻՆ ԱՊԱՀՈՎՈՒՄԸ ավտոմատացված ֆիզիկական նախագծման հիմնական փուլերը Սխեմատեխնիկական  առանձնահատկությունների  հաշվառմամբ  ԻՍ-ի  ֆիզիկական նախագծման  համար  առաջարկվող  և  իրականացված  մոտեցումը  հիմնված  է  հետևյալ քայլերի հաջորդական իրագործման վրա (նկ․ 3․ 1). հաջորդականության ռանգավորման իրականացում, «փափուկ»  կառուցվածքի  բլոկի ավտոմատացված սինթեզը, սինթեզը՝ կառուցվածքային սահմանափակումների հաշվառմամբ: ", "Այսպիսի  մոտեցումը  պետք  է  նպաստի  միջմիացումների  երկարությունների  և հատումների  կրճատմանը։  Այս  մոտեցմամբ  մշակված  են  որոշակի  կանոններ,  որոնք թույլ  են  տալիս  տրամաբանական  սխեմայի  տարրերի  ռանգավորումից  «փափուկ»  և «կոշտ»  բլոկների  սինթեզման  ժամանակ,  ըստ  հնարավորության,  ԻՍ-ի  տակդիրի  վրա տարրերը  տեղաբաշխել  այնպես,  որ  դրանց  ֆիզիկական  հաջորդականությունը համապատասխանի  ազդանշանների  հոսքի  ուղղությանը։  Բացի  այդ,  հատուկ ուշադրություն  է  դարձված  ամենաերկար  կապերի  երկարությունների  կրճատման անհրաժեշտությանը,  որոնք  որոշվում  են  որոշիչ  ուղիների  վրա  ազդանշանների տարածման հապաղմամբ։  Այս նպատակով ներմուծված է  տարրերի փոխկապվածության կարևորության գործակից, որը հաշվի է  առնում համապատասխան շղթայի կարևորությունը սխեմայի արագագործության տեսանկյունից: ", "Ծրագրային  համակարգի  այս  հանգույցը գեներացնում  է. ա) հետազոտվող թեստային ալգորիթմը՝ վերաձևափոխելով այն SPICE մոդելավորմանը  համապատասխան  ձևաչափի;  բ)  մշակում  է  մոդելավորման աշխատանքի ընթացքում օգտագործվող պարամետրերը; գ) յուրաքանչյուր դիտարկվող թերության  համար  գեներացնում  են  մոդելավորման  համար  անհրաժեշտ  տվյալները: ", "Այս  նախնական  փորձնական  աշխատանքի  նպատակն  է  հիմնավորել,  որ  չորս տեսակի  ազդանշանների  ճանաչման  արդյունքների  ճշտության  աստիճանը  բավարար հիմք  է  հանդիսանում  եզրակացնելու,  որ  ԱՆՑ  ալգորիթմի  մշակումը  հնարավոր  է իրականացնել  LabVIEW  միջավայրում  և  զարգացնել  ու  բարելավել  այն  ավելի  բարդ հաշվարկների և կոմպլեկս խնդիրների, մասնավորապես ՄԱՆ խնդրի լուծման համար: ", "- 67 - հոսքի գրաֆի ԻՍ-երի ֆիզիկական նախագծման ժամանակ սխեմայի ֆունկցիոնալ- տրամաբանական  առանձնահատկությունների  հաշվառման  առաջարկվող  մոտեցումը ենթադրում  է  տվյալների  մշակման  սխեմայի  փականային  մակարդակի  Verilog նկարագրության  նախնական  փոխակերպումը  ազդանշանների  հոսքի  գրաֆի  (ԱՀԳ)՝ G(W,C)  [69-72],  որտեղ  C={c1,  c2,…,cm}–ը  տարրերի  բազմությունն  է  ,  W={w1,  w2,…,wn}  -ը՝ շղթաների  բազմությունը։  Հետագայում,  ստացված  ԱՀԳ-  ի  հիման  վրա,  կատարվում  է սխեմայի տրամաբանական բջիջների դասակարգում, որի արդյունքներն օգտագործվում են դրանց տեղաբաշխման ժամանակ: ", "Այսպիսով,  եթե  տրված  են  ինտեգրալ  սխեմայի  փականային  մակարդակի  Verilog նկարագիրը,  սահմանափակումները  (չափերը՝  {ai,  hi},  i  = },  որտեղ  m-ը  տարրերի քանակն  է)  պարունակող  մուտքային  զանգվածը,  ապա  ԱՀԳ-ի  մոդելի  ստեղծման հիմքում ընկած է հետևյալ հիմնական քայլերից բաղկացած ալգորիթմը․ վերլուծություն  և  ստուգել՝  արդյո՞ք  այն  վավեր  է,  թե  ոչ։  Կատարել համեմատություն նախնապես տրված վավեր ֆայլի հետ, ;  k-ն  մուտքային շղթաների քանակն է, ;  q-ն  ելքային  և մուտքային շղթաների գումարային քանակն է, ;  n-ը  բոլոր ; m-ը տարրերի քանակն է, շղթաների քանակն է, հետ, ստանդարտ  բջիջների  գրադարանի՝ {ai,  hi}, i  = ,  որտեղ  ai  և  hi համապատասխանաբար Ci տարրի երկարությունը և բարձրությունն են, - 68 - , որոնց արժեքները  վերցվում  են  սխեմայի  ստատիկ  ժամանակային  վերլուծության արդյունքից: ", "Այս  աշխատանքում  ներկայացված  ԱՀԳ-ի  ստացման  մոտեցումը,  որը  ավելի մանրամասն նկարագրված է նկ․ 3.2. -ում, նպատակաուղղված է` արագացնելու ԱՀԳ-ի վրա  կիրառվող  հետագա  ռանգավորման  և  ֆիզիկական  կառուցվածքի  ստացման ալգորիթմների  աշխատանքը։  Ալգորիթմի  արագագործությունը հիմնականում ապահովվում է շղթաների և տարրերի անունների փոխարեն` նրանց id (identity number) ինքնության  համարների    կիրառմամբ,  որտեղ  id-ն  բնական  թիվ  է  և  ամեն  տարրի  կամ շղթայի համար եզակի է։ Բացի  id-երի ներմուծումից, արագագործության ապահովմանը ծառայում  են  նաև  զանգվածների  և  բինար  որոնման  բալանսավորված  ծառի  տեսքով տվյալների (տարրեր, շղթաներ․ ․ ․ ) նկարագրությունները։ ", "Նկար 31 ՑւՏքՀ-ի ընդհանուր  սխեման [60] Fall_flag-ի  յուրաքանչյուր  ստուգման  դեպքում  երբ  կա  խափանում  հասցեի  արժեքը տրվում  է  վերծանիչին,  որը  վերծանում  է  խափանված  սյունը:  Թեստավորման  վերջում խափանված  սյուների  քանակը  համեմատվում  է  հավել)սղության  մեջ  առկա  սյուների քանակի  հետ:  Հնարավոր  են  թեստավորման  հետևյալ երեք  արդյունքները' •  Հիշողությունն  անցնում  է թեստավորումը: ", "Նկ․  3․2․   Սխեմայի  փականային  մակարդակի  Iscas85 գրադարանի թեստային c17.v Verilog նկարագիրը - 69 - Ալգորիթմի  նկարագրության  համար  կօգտագործենք  օբյեկտակողմնորոշված ծրագրավորման (ՕԿԾ) որոշակի տերմինաբանություն, որը կնպաստի նկարագրության հակիրճ  և  ձևայնացած  ներկայացմանը:  Ինչպես  հայտնի  է,  ՕԿԾ  –ն  ծրագրավորման մոտեցում է, որի գաղափարական հիմք են հանդիսանում օբյեկտ և դաս հասկացությունները [73, 74]։ ", "Այս  ծրագրի  աշխատանքը  կատարվում  է  մի  քանի  հիմնական  դասերի  միջոցով՝ Graph (որը հենց մեր ԱՀԳ-ն է), Cell, Wire (5-րդ կետը)։ Ծրագիրը կարդում է փականային մակարդակի վերիլոգ ֆայլը և ստանում ԱՀԳ։ ", "Ֆայլից տվյալների կարդալը կատարվում է հետևյալ կերպ՝ դատարկ  տողեր,  ապա  ծրագիրը  դրանք  անտեսում  է,  օրինակ՝  1,  2,  6,  8  և  15-րդ տողերը, (տող 3), ամեն տարրի ինֆորմացիան․ դա կատարվում է մի քանի քայլերով (տող 4, 5, 7 )՝   Հերթական  էլեմենտը  կարդալուց  հետո,  նրան  տրվում  է id։ ", "Նկար 33  Tessent MemoryBIST ֊ի ճարտարապետությունը [68] Հետազոտական  աշխատանքներ  իրականացնելու  համար  այս  աշխատանքում օգտագործվել  է  «Սինոփսիս»  ընկերության  DesignWare  SMS-ը,  քանի  որ  այն  իր բարդությամբ  և  կառուցվածքով  համապատասխանում  է  մեր  հետազոտությունների առարկային:  Նկար  34-ում  բերված  է  DesignWare  SMS-ի  ճարտարապետության պարզեցված  մի  օրինակ:  Ինչպես  տեսնում  ենք  այն  ունի  հիերարխիկ  կառուցվածք  և բաղկացած  է  հետևյալ  կոմպոնենտներից' հիշողության նմուշներից  իրենց ինտելեկտուալ  պատյաններով  (անգլերեն'  Wrapper),  պրոցեսորներից (անգլերեն' Processor),  հիերարխիայի  վերին  մակարդակի  սերվերից (անգլերեն'  Server), հիշողությունների  վերանորոգումների տվյալների պահոցից  (Fuse box)  և TAP (Test Access Control)  ինտերֆեյսից  [69],  [70]: ", "  ԱՀԳ-ում ստեղծվում է map[75, 76](տարրի անունից դեպի իր id) կամ արդեն ստեղծված  map-ի  մեջ  ներմուծվում  է  հերթական  տարրը՝  իրեն  տրված  id- ով։  map-ը  բինար  որոնման  բալանսավորված  ծառ  է։  Նրա  ամեն  տարրը ներկայացնում  է {key,  value}  զույգ։  Որոնումը  և  բալանսավորումը կատարվում  է  key-ի  միջոցով,  որոնք  ծառի  մեջ  չեն  կարող  կրկնվել,  իսկ value-ն  ներկայացնում  է  ցանկացած  տվյալ։  Մեր  օրինակում  key-ը  Id-ն  է, իսկ value-ն՝ G1 կամ G2 … (նկ․ 3․ 5) - 70 -   ԱՀԳ-ում առանձին կոնտեյներում (C++ լեզվի ստանդարտ գրադարանից են, ներկայացնում են՝ զանգված[77,78])  պահվում են input, output, wires՝ իրենց համապատասխան տարրերի id-երով։ Այսպիսով՝ փականների անունների փոխարեն  ստանում  ենք  id-  եր՝  թվի  տեսքով,  ինչն  էլ  հետագայում  կազդի ծրագրի արագագործության վրա։ ", "Առաջինը պահում է տրամաբանական տարրի ինֆորմացիան։ ", "Երկրորդը՝  այդ  տարրերը  իրար  կապող  շղթաների  ինֆորմացիան  (աղ․ 3․ 1, աղ․ 3․ 2)։ ", "Օրինակ՝  նկ.2.4  -ում  պատկերված  գրաֆում  NAND2_0,  NAND2_1,  NAND2_2, NAND2_3,  NAND2_4,  NAND2_5  անուններով  տարրերը  գրաֆի  գագաթներն  են, որոնք  էլ  այս  ծրագրում  հանդես  են  գալիս  որպես  Cell-օբյեկտներ,  իսկ  այդ գագաթները իրար կապող շղթաները՝ որպես Wire-ներ՝ G1, G2, G3, G4, G5, G8, G9, G12, G15, G16, G17 ։ ", "կարդալուն(տող  9-14)։  Դիտարկենք  ծրագրի  աշխատանքը  9-րդ  տողում։ ", "Այն ներկայացնում է՝   ստանդարտ տարրի անուն՝ nand,   տարրի անուն՝ NAND2_0,   output փականի անուն՝ G8, input փականների անունները՝ G1,G3։ ", "Արդեն ունենալով ամեն տարրի id-ին՝ ԱՀԳ-ում կարողանում ենք ստեղծել Cell-եր և  Wire-ներ  հերթական  տողը  կարդալիս,  որոնք  էլ  ներմուծում  ենք  ԱՀԳ-ում պահվող  g_cells  և  g_wires  զանգվածներում։  Ներոմուծումն  իրականացվում  է այնպես,  որ  զանգվածում  տարրի  համարը  համապատասխանի  տարրի  id-ին, ինչն էլ կարագացնի հետագա ալգորիթմների աշխատանքը (զանգվածում տրված համարով տարրին դիմելը հաստատուն ժամանակում է կատարվում՝ O(1) է)։ "], "source_docs_file": "Control, Automation and Electrical Engineering.json"}