{"paragraph_source_docs": [2, 1, 2, 2, 0, 1, 0, 2, 1, 2, 2, 2, 1, 2, 0, 0, 0, 1, 1, 1, 1, 2, 2, 1, 0, 0, 0, 1, 1, 2, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 2, 0, 1, 0, 1, 0, 2, 1, 2, 2], "source_docs_file": "Informatics and Computer Systems.json", "paragraphs": ["Նկարահանման  ընթացքում  յուրաքանչյուր  վայրկյան  անց  վերցվում  է  նոր պատկեր  և  համեմատվում  սկզմնական  պատկերի  հետ:  Ենթադրենք  նկարահանումը սկսելուց  30  վայրկյանն  անց  երկաթուղային  հանգույցում  հայտնվել  է  օբյեկտ  (Նկար Նկար 2.2. Օբյեկտի առկայոթյոընը արգելված տարածքում: ", "արժեքը 𝑃𝑃𝑃𝑃𝑠𝑠 սահմանում է, թե որքանով է -ի ելքը ազդում -ի վրա: Կշիռը կարող է փոխվել 𝑤𝑤𝑖𝑖𝑗𝑗 ժամանակի  ընթացքում:  Ոսուցման  ընթացքում,  հիմնականում,  այս  մեխանիզմն  է, 𝑃𝑃𝑃𝑃𝑗𝑗 𝑃𝑃𝑃𝑃𝑖𝑖 որ հնարավորություն է տալիս -ին ադապտացվել նոր արդյունքներ ստանալու և ուսուցումը  իրականցնելու  համար:  Ինչպես  պարզ  կդառնա  ավելի  ուշ,  ամբողջ 𝑃𝑃𝑃𝑃 կշիռների մատրիցան  արտացոլում  է  նեյրոնային  ցանցի  գիտելիքներն  ու հմտությունները,  որոնք  ուսուցանվել  են  նախորդ  վերապատրաստման  միջոցով  և, 𝑊𝑊 հետևաբար, այն կոչվում են նեյրոնային ցանցի երկարատև հիշողություն: ", "Ինչպես  գիտենք,  բիթային  XOR-ը  կատարում  է  համեմատությունը  երկու պիքսելների(բիթերի) միջև՝ արդյունքում վերադարձնելով 1, եթե երկու բիթերը տարբեր են,  և  0,  եթե  դրանք  նույնն  են:  Նկար  2.3-ում  XOR  բիթային  համենատության արդյունքում վերադարձված 1-ը արտահայտված է սպիտակ գույնով, իսկ 0-ն՝ սև: ", "Դիտարկենք այն դեպքը, երբ օբյեկտը հայտնվում է պատկերում նկարահանումը սկսելուց  ոչ  թե  սկզբում,  այլ  երկար  ժամանակ  անց(օր.  4  ժամ  անց),  երբ  պատկերում արևի  պայծառության  փոփոխության  պատճառով  բոլոր  պիքսելների  գունային արժեքները  փոխված  են:  Այս  դեպքում  XOR  բիթային  համենատության  արդյունքում վերադարձվում  է  0  բոլոր  պիքսելների  համար,  և  արդյունքը  կստացվի  լիովին  սև պատկեր,  օբյկետը չի  հայտնաբերվի:  Այսպիսով՝  ցանկացած  եղանակային փոփոխություն դեպքում մեթոդը չհայտնաբերելով օբյեկտը, չի ծառայի իր նպատակին: ", "Աղյուսակ 6. Հաղորդագրությունների ձևաչափը KFI Մարմին VH Salt N / 2 bit Գլխամաս Referrer | UID | MAC Քայլ  3 ․1-ում  օգտագործելով  հարցման  գլխամասում  առկա  PKID-ում  գտնվում  է համապատասխան  բանալին,  որի  միջոցով  կատարվում  է  հարցման  նույնականացում  և հրամանի բացահայտում։  Վերոհիշյալ գործողություններն իրականացվում են ատենախոսությունում  մշակված  ալգորիթմի  միջոցով,  որը  բաղկացած  է  չորս  հիմնական փուլից։ ", "𝑃𝑃𝑃𝑃 𝑎𝑎𝑖𝑖 Նեյրոնային  ցանցեր  կառուցելու  համար  օգտագործվել  են  մի  շարք  ակտիվացման ֆունկցիաներ,  որոնցից  քայլ/step  ֆունկցիան  ամենապարզն է:  Քայլ/step ակտիվացիոն  ֆունկցիայի  միջոցով -ի  ելքային  տվյալները  կարող  են  ընդունել կամ կամ ,  կախված  ակտիվացիոն  ֆունկցիայի  արժեքից  ցածր  կամ  բարձր 𝑃𝑃𝑃𝑃 լինելուց (Նկար 32): Այլ կերպ ասած, ունենք հետևյալը. 𝑦𝑦𝑖𝑖 = � որտեղ եթե հակառակ դեպքում 𝑎𝑎𝑖𝑖 > 0 𝑢𝑢 𝑎𝑎𝑖𝑖 = �� 𝑤𝑤𝑖𝑖𝑗𝑗𝑥𝑥𝑗𝑗 − 𝑠𝑠𝑖𝑖 Այնուամենայնիվ, աղմուկը  զտելու համար, հետևաբար բարելավվելու և իրական 𝑗𝑗=1 կայուն  վիճակի  հասնելու  նկատառումներով  որոշ  նեյրոնային  ցանցերի  համար սովորաբար օգտագործվում է սիգմոիդ ակտիվացումը, արտահայտված Նկար 33-ի ձևով. որտեղ 𝑦𝑦𝑖𝑖 = 𝑓𝑓𝑖𝑖(𝑎𝑎𝑖𝑖) = −𝑐𝑐𝑎𝑎𝑖𝑖 𝑢𝑢 𝑗𝑗=1 𝑎𝑎𝑖𝑖 = �� 𝑤𝑤𝑖𝑖𝑗𝑗𝑥𝑥𝑗𝑗 − 𝑠𝑠𝑖𝑖 Նկար 32.Քայլ/Step ակտիվացիոն ֆունկցիա: ", "𝑁𝑁 𝐶𝐶𝑘𝑘   = � 𝑃𝑃𝑃𝑃𝑖𝑖 𝑙𝑙=0 ⊕ 𝐾𝐾𝐾𝐾𝑖𝑖; (2.9) Այնուհետև  կատարվում  է  բացահայտած  հրամանի  հեշավորում`  օգտագործելով  P 𝐶𝐶𝑖𝑖   = (𝐶𝐶𝑘𝑘 ∗ 𝐶𝐶𝑁𝑁) ⊕  KFI; տողը  որպես  բանալի։  Հարցման  մարմնում  առկա  VH  հեշի  արժեքի  և  Hp(C  +  Salt)  հեշի արժեքի հավասարության դեպքում հարցումը համարվում է վավեր, և շարժական բանալին նոր հարցում է կատարում  այդ հրամանով  համապատասխան ինտերնետ իրին։ Հակառակ դեպքում  հարցումը  համարվում  է  անվավեր։  Գոյություն  ունի  անվավեր  հարցումների սահմանափակում,  որի  գերազանցման  դեպքում  կատարվում  է  հաջորդ  բանալու հաշվարկումը։ ", "Նկար 2.4․ Սկզբնական պատկերը բաժանված 4 մասի: ", "«Մինիմում ավազահատիկներ և  մաքսիմալ հեռավորություն» խնդիր գրավիչ է  այնքանով,  որ  հանդիսանում  են  իրական  կյանքում  որոշ  բնական  երևույթների նկարագիր  ավազակույտի  մոդելի  վրա:  Մինչև  այժմ  չունենալով  ճշգրիտ  լուծում տվյալ  խնդրի  համար,  նեյրոնային  ցանցերի  օգտագործումը  արդիական  նպատակ դարձավ:  Նեյրոնային  ցանցերի  մշակման  հարմարավեր  միջոց  է  Neuroph  Studio-ն [51],  որը  հանդիսանում  է  նեյրոնային  ցանցերի  ֆրեյմվորկ  ստեղծված Java ծրագրավորման  լեզվի  միջոցով  և  նպատակաուղված  է  ընհանուր  նեյրոնային ցանցերի նախագծման և մշակման համար: Neuroph Studio-ն  պարունակում է նաև լավ  նախագծված  բաց  կոդով  Java  գրադարան  քիչ  քանակությամբ  նեյրոնային ցանցերի հիմնական  աշխատանքը սիմուլացնող հիմնական դասերի ամբողջությամբ:  Այն  ունի  նաև  շատ  հարմարատավետ  գրաֆիկական  միջավայր, որը հնարավորություն է տալիս առանց որևէ ծրագրավորման լեզվի տիրապետելու և  օգտագործելու  մշակել  նեյրոնային  ցանցեր:  Մեր  կողմից  նույնպես  ընտրվել  է Neuroph  Studio-ն  «մինիմում  ավազահատիկներ  և    մաքսիմալ  հեռավորություն» խնդրի ուսումնասիրության շրջանակներում նեյրոնյանին ցանցերի ճարտարապետության  մշակման,  տեստավորման  և  արդյունքների  ստացման համար: ", "(2.1) որտեղ , . և  r,g,b-ին  համապատասխանաբար  կարմիր,  կանաչ, կապույտ գույների ինտենսիվությունն է: ", "Քանի  որ  պատկերը  տրոհել  ենք  4  մասի,  յուրաքանչյուր  հատվածի  համար կունենանք մեկ մատրից՝ համապատասխանաբար )1( )2( )3( )4( , , , : ", "Սկզբնական    պատկերի  յուրաքանչյուր՝  հատվածի  համար  հաշվարկում  ենք  3 առանձին  մեծություն՝  կարմիր,  կանաչ  և  կապույտ  գույների  ինտենսիվության գործակիցները (օր. ):  Յուր.  գործակից  որոշվում  է  տվյալ հատվածում  բոլոր  պիքսելերի  համպատասխան  գույնի(օր.  կարմիրի)  թվային արժեքների  միջին  թվաբանականով  (բանաձև  2.2-2.5):  Այլ  կերպ  ասած  գործակիցը ցույց է տալիս հատվածում գույնի միջին ինտենսիվությունը: ", "Ժամանակակից կլաստերային համակարգերում մուտքագրվող առաջադրանքների  ճշգրիտ  արդյունքներ  ապահովելուց  բացի  առկա  են  նաև  այլ խնդիրներ,  ինչպիսիք  են՝  մուտքագրվող  առաջադրանքների  հավասարաչափ բաշխվածության ապահովումը և էներգիայի խնայողությունը: ", "Վիդեոնկարահանման  ընթացքում  մեկ  վայրկյան  պարբերությաբ  վերցվում  է ընթացիկ  պատկերը:  Ընթացիկ  պատկերը  կնշանակենք  E  տառով:  E  պետկերում հնարավոր  է  արևի  պայծառության  փոփոխության  պատճառով  բոլոր  պիքսելների գունային  արժեքները  փոխված  լինեն,  այդ  իսկ  պատճառով  փորձում  ենք  C-ում գունային  ինտենսիվությունը  հնարավորինս  մոտեցնել  A  պատկերի  գունային ինտենսիվությանը,  որը  հնարավորություն  կտա  կիրառել  E  և  A  պատկերների պիքսելային XOR համեմատությունը և որոշել՝ արդյոք պատկերում հայտնվել է օբյեկտ, թե ոչ (ստրեև նկարագրված է մեթոդը): ", "𝑖𝑖  ∗  𝑁𝑁  +  𝑁𝑁  −  𝑗𝑗 –  1 մասնիկների փոխարկում ըստ տեղերի, այնուհետև` ըստ սյուների։ ", "Նշված  հինգ  փուլերի  ընթացքում  կատարվող  ձևափոխություների  օրինակը ներկայացված  է  նկ․  11-ում։  Այս  ձևափոխություների  արդյունքում  հնարավոր  է  ձևավորել Օգտվելով  շարժական  բանալու  կառավարման  վահանակից`  հնարավոր  է կարգավորել այն հարցումները, որոնք պետք է հսկվեն առաջարկած գաղտնահամակարգի կողմից։  Կարգավորման  համար  օգտագործվում  է  պարզ  ինտերնետ  իրերի  տվյալների փոխանակման  վերջավոր  հասցեն,  որը  հսկման  ցուցակում  ավելացնելուց  հետո ապահովում է  ինտերնետ իրերի ելքային և մուտքային հարցումների անվտանգությունը։ ", "Առաջարկված հեշավորման դասի վրա հիմնված հրամանների փոխանակման համակարգը համեմատվել  է  նաև  այլ  հայտնի  ալգորիթմների  հետ  արագագործության  առումով,  որի արդյունքները  ներկայացված  են  աղյուսակ  7-ում։  CMP  (Command  Message  Protocol)  դա առաջարկված գաղտնահամակագրի կարճ հապավումն է։ ", "•  Ամեն հանգույց ունի «հասանելի»  տիրույթ առաջադրանքների համար, որտեղ կարող են  տեղավորվել վերջավոր քանակությամբ խնդիրներ(տվյալ  դեպքում  ամենաշատը  3  առաջադրանք),  և առաջադրանքի տեղավորվելուն պես այն դիտարկվում է որպես արդեն կատարվող:  Եթե  հանգույցի  «հասանելի»  տիրույթում  կան  3 արաջադրանքներ,  ապա  համարվում  է,  որ  տվյալ  հանգույցը աշխատում է միաժամանակ այդ 3 առաջադրանքների իրականացման շուրջ: ", "•  Հանգույցները միացված են իրար կապերով և ամեն հանգույց կարող է ունենալ  ամենաշատը  4  հարևան  (համակարգում  դիտարկվում  է  նաև հանգույցների անսարքության դեպքեր տեխնիկական պատճառներով) •  Մուտքագրվող  առաջադրանքերը  միանման  են  և  տարբերվում  են կատարման համար անհրաժեշտ ժամանակով միայն: Ինչպես նաև կա հնարավորություն մուտքագրվող առաջադրանքերին տալ առաջնահերթություն: ", "երկու եղանակով. Ինչպես արդեն նշվել է, առաջադրանքների տեղաբաշխումը կատարվում է մոդելի  աշխատանքային սկբունքի, որի դեպքում համակարգում  առաջադրանքների  տեղաբաշխումը կատարվում է ավազակույտում  ավազահատիկների  փլուզման  սկզբունքով:  Ավազակույտի մոդելում  ինչպես  արդեն նշվել է ամեն հանգույցին համապատասխանեցված է  արժեք,  որը  համապատասխանում  է  այդ  հանգույցում  ավազահատիկների քանակին:  Բակը,  Թանգը  եւ  Ուիզենֆիլդը  դիտարկել  են  ցանցի  վրա ավազահատիկների  պատահական  տեղադրման  գործընթացը  ցանցում: ", "Ավազահատիկի  տեղադրումը  որոշակի  հանգույցում  կարող  է  որեւէ ազդեցություն չունենալ կամ կարող է առաջացնել փլուզման ալիքներ, որոնք կարող  են  կասկադային  ազդեցություն  ունենալ  բազմաթիվ  հանգույցների վրա:  Հիմնական  հետաքրքրությունը  այս  մոդելի  շրջանակներում  այն  է,  որ ցանցերի  սիմուլյացիայի  ժամանակ,  երբ  ցանցը  բերվում  է  կրիտիկական վիճակի,  այդ  ժամանակ  համակարգի  կորելացիայի  երկարությունը  և տևողությունը  ձգտում  են  անվերջության  առանց  համակագրի  որևէ ատրիբուտի  փոփոխության:  Ավազակույտի  մոդելում  մեկ  ավազահատիկի ավելացումը  որևէ  հանգույցին,  կարող  է  չհանգեցնել  որևէ  փլուզման,  կամ կարող  է  հանգեցնել  հանգույցների  զանգվածային  փլուզմումների:  Մենք օգտագործում  ենք  վերոնշյալ  առանձնահատկությունը  SandScheduler համակարգում դինամիկ խնդիրների տեղաբաշխման համար, որը տեսենալի է  տվյալ  համակարգում  «Debug  enabled»  վիճակում,  Նկար  35:  Այսպիսով SandScheduler  համակարգում  առաջադրանքների  ավազակույտի  մոդելի աշխատանքի  սկզբունքով  տեղաբաշխման  դեպքում  համակարգում  ունենք դատարկ  առաջադրանքներ,  որոնք  չեն  կարող  զբաղեցնել  հանգույցների «հասանելի» տիրույթները: Դատարկ առաջադրանքների իմաստը կայանում է նրանում,  որ  դրանք  ապահովվելով  բավարար  քանակ՝  մոդելը  պահում  են կրիտիկական  վիճակում՝  իրականացնելով  ավազակույտի  մոդելին  բնորոշ փլուզումները,  դրանով  իսկ  ապահովվելով  իրական  առաջադրանքների տեղաշարժը  ցանցում:  Իրական  խնդիրը,  հայտնվելով  հանգույցում,  որի «հասանելի»  տիրույթում  առկա է  ազատ  տեղ, զբաղեցնում է համապատասխան տեղը, դուրս գալով ավազահատիկի մոդելի փլուզումների շարքից,  որտեղ  դրա  դուրս  գալուն  պես  ի  հայտ  է  գալիս  նոր  դատարկ առաջադրանք որպես փոխարինող: ", "(2.9) Եթե անհավասարությունը բավարարվում պայմանին, այսինքն՝ անհավասարության ձախ մասը մեծ է σ գործակցից, ապա E-ի i,j պիքսելը ունի զգալի շեղում  A-ի  i,j  պիքսելից,  որը  և  նշանակում  է,  որ  այդ  պիքսելը  հանդիսանում  է հայտնված  օբյեկտի  պիքսել:  Այդ i,j  պիքսելին  համապատասխան  պիքսելը  D պատկերում  ստանում  է  0,  0,  0  արժեքը  ( =  (0,  0,  0)),  այսինքն՝  սևացվում  է: ", "Սևացված  պիսելների  համախումբը  ցույց  կտա  օբյեկտի  առկայությունը,  արդյունքը կարտապատկերվի D պատկերում (Նկար 2.8): Այսպիսով եթե պատկերում հայտնվել է օբյեկտ,  ապա  նրան  համապատասխան  պիքսելները  սևացվում  են  ըստ  ալգորիթմի, օբյեկտը  հայտնաբերվում  է:  Նկար  2.5-ոմ  պատկերված  է  օբյեկտի  հայտնաբերման ալգորիթմական բլոկ սխեման: ", "Ինչպես  նաև  անդրադառնալով  rotor-router  համակարգի  բաժին  2,3-ում նկարագրված  առանձնահատկությանը,  կարող  ենք  համոզված  լինել,  որ ստատիկ(կատարման  ժամանակը  անվերջ  է)  առաջադրանքների  մեկ  կետից ավելացման  դեպքում  կլաստերային  համակարգում  կունենանք  համասեռ բաշխվածություն  տվյալ  հանգույցի  շուրջ,  կամ  այլ  կերպ  ասված,  մեկ հանգույցում  առաջադրանքներ  ավելացնելու  դեպքու  կարող  ենք  համոզված լինել,  որ  տվյալ  հանգույցից հեռավորություն  ունեցող  հանգույցում  լցված առաջադրանքների քանակը չի կարող ավել լինել հեռավորության վրա գտվնող  հանգույցի  առաջադրանքների  քանակից:  Ասեմ  ավելին  մեր  կողմից r − 1 առաջ է քաշվել հիպոթեզ, որ դինամիկ(կատարման ժամանակը վերջավոր է) խնդիրների  դեպքում  ևս  կունենանք  նույն  պատկերը:  Տրված  հիպոթեզի իսկությունը երևում է SandScheduler ծրագրային համակարգի միջոցով նկար Նկար 36. SandScheduler-ը rotor-router վիճակում: ", "•  Հիմնվելով իրերի ինտերնետ միջավայրում իրերի բնութագրերի վրա՝  առաջարկվել է  բանալիների  կառավարման  անվտանգ  սխեմա՝  տարատեսակ  իրերի  միջև  անլար կապի հաստատման համար: ", "•  Ցույց  է  տրվել,  որ  բանալիների  կառավարման  առաջարկված  սխեմայում յուրաքանչյուր  հանգույց  ընտրվում  է  որպես  ծառայության  հանգույց,  այլընտրանքային ծառայության հանգույց կամ  աշխատանքային հանգույց՝ հանգույցների ինքնակազմակերպման  բնույթի  շնորհիվ՝  ինքնակարգավորման  մշակված  ալգորիթմի միջոցով: ", "•  Հիմնավորվել  է,  որ  ընտրման  գործընթացից  անմիջապես  հետո  ծառայության հանգույցները  գեներացնում  են  բանալիների  ենթակառուցվածք՝  համապատասխան աշխատանքային  հանգույցների  համար:  Արդյունքում  աշխատանքային  հանգույցների զույգերը հաշվարկում են ընդհանուր բանալին։ ", "տեղաբաշխումը  կատարում  է  ավազակույտի  մոդելի  աշխատանքային սկզբունով,  իսկ  նշված  դեպքում  կիրառվում  է rotor-router  մոդելի սկզբունքները: ", "ստեղծելով նշված քանակությամբ մատրիցներ, և վերջում տպում է ստացված միջին արդյունքները ՛Statistics' բաժնում գումարների հարաբերությունը ընդհանուր վանդակների թվին ավազահատիկներ պարունակող վանդակների գումարների հարաբերությունը ընդհանուր վանդակների թվին տակտերի  քանակը  և  մկնիկի  քլիքի  միջոցով  ավելացվող  խնդիրների քանակը լռությամբ որքան կարևոր են մուտքագրվող խնդիրները Նկար 38.SandScheduler համակարգի տեսքը: ", "Պատկերների  բուրգի  կառուցումը.  Բուրգի  հիմք  է  հանդիսանում  տեսաշարից վերցված  օրիգինալ  կադրը,  որը  ենթարվում  է -գործողության,  ապա  պատկերը փոքրացվում  է գործակցով  մի  քանի  անգամ  (Նկար  2.9)։  Սա  թույլ  է  տալիս զգալիորեն  նվազեցնել  պատկերում  աղմուկը  և  ֆոնային  զատման  միջոցով պատկերների  համեմատման  ժամանակ  համեմատել  փոքր  պատկերներ,  որն  էլ  իր հերթին կնպաստի ալգորիթմի արագագործությանը։ ", "Տվյալ  դեպքում  տվյալ  հանգույցի  հարևանները  ավտոմատ  կերպով  ինֆորմացվում են  դրա  անսարքության  մասին  և,  հիմնվելով  ավազակույտի  մոդելի  փլուզումների տրամաբանությանը,  հասկանում  ենք  որ  առաջադրանքների  տեղաշարժ  դեպի վթարված  հանգույց չի լինում:  Միաժամանակ  ընդհանուր  կլաստերային համակարգը  շարունակում  է  աշխատել  սովորականի  պես  առանց  որևէ  խնդրի, բացառությամբ իհարկե վթարված հանգույցներում իրականացվող առաջադրանքների կորստի (Նկար 39): ", "Այդ  նպատակով  միջավայրի  գործառույթների  ավտոմատացման  համար առաջարկվում է ներմուծել հանգույցներին հաղորդվող հաղորդագրությունների` աղյուսակ գաղտնիքի (մյուսների համար անվերծանելի)  մասնաբաժինը։ ", "Աղյուսակ 8. Հաղորդագրության ձևաչափը Առանձին հանգույցների գաղտնագրված տվյալները Գլխամաս E1 E2 E3 E4 E5 Hashcas, N1 -Nm Առաջարկվող  մոդելն  օգտագործում  է  իրերի  ինտերնետ  միջավայրի  համար մշակված  արձանագրությունը  և  ձևաչափը,  որը  հնարավորություն  է  տալիս  իրագործել՝ գործառույթների կառավարումը, տվյալների գաղտնագրումը, սխալների հայտնաբերումը և գործառույթների չեղարկումը։ ", "CA  Simulator  համակարգը  իր  լուրջ  ֆունկցիոնալ  հնարավորություններով ավելի  դյուրին  կդարձնի  ավազակույտի  մոդելի  ուսումնասիրությունները,  ինչպես նաև  հնարավորություն  կնձեռնի  տարբեր  աշխատահգրական  դիրքերում  գտնվող օգտագործողներին կատարել հետազոտություններ միասին միևնույն մոդելի վրա: ", "SandGame  «լուրջ  խաղի»  օրինակը  իր  գրավչությամբ  և  պիտանելիությամբ կարող է հիմք հանդիսանալ շատերի համար ինքնակազմակերպվող կրիտիկականության կոնցեպտի դյուրընկալման: ", "Աղյուսակ 9. Հաղորդագրության գլխամասի ձևաչափը N1 գործառույթ N2 գործառույթ Nm գործառույթ UID| IP6 UID | IP6  L UID | IP6 Տվյալների գաղտնագրումը  կատարվում է 1-ից մինչև N քանակի բանալիներով, որտեղ  N  պարամետրը  փոքր  կամ  հավասար է  ցանցում  առկա  ինտերնետ  իրերի  թվին։ ", "Շնորհիվ  տարբեր  բանալիների  կիրառության՝  հնարավոր  է  ապահովել  առանձին ինտերնետ  իրերին  պատկանող  գաղտնագրված  ինֆորմացիայի  անվտանգությունը ցանցում՝  նույնիսկ  այլ  ինտերնետ  իրերի  խոցելիության  դեպքում։    Գաղտնագրման բանալու ստեղծման համար օգտագործվում է հետևալ բանաձևը՝ K = H * Ki, որտեղ Ki-ն ինտերնետ իրում նախաբեռնված բանալին է,  իսկ H պարամետրը՝ տվյալ ինտերնետ իրին հարցում ուղարկած հանգույցին պատկանող բաց տվյալների հեշ արժեքը, որը ստացվում է կատարած գործառույթի ելքային արժեքը օգտագործոլով որպես հեշավորման բանալի։ ", "Շնորհիվ  L  պարամետրի՝  հաղորդագրության  ձևաչափի  մարմնում  կարելի  է  գտնել կոնկրետ  ինտերնետ  իրի  հաղորդագրության  սկզբնական  և  վերջնական  արժեքները հետևյալ բանաձևով: ", "Մասնավորապես  դիտարկվել  է  «CA  Simulator»  համակարգը,  և  առաջարկված զուգահեռացման  ալգորիթմը  համապատխան  փորձարկումներով:  Սույն  գլխում բերված    է  նաև  ավազակույտի  մոդելի  սիմուլատորի  կողմից  ստացված  ճշգրիտ արդյունքների  և  մշակված  նեյրոնային  ցանցերի  կողմից  ստացված  արդյունքերի համեմատական վերլուծություն: ", "գոյություն ունեցող լուծումների համամետական վերլուծությունը: ", "Ալգորիթմը չի սահմանափակում փնտրվող օյեկտները ըստ տեսակի: ", "Հեշավորման բացակայության,  անհաջող վավերականացման  կամ  սխալ  վերծանման  դեպքում  ինտերնետ  իրն  սկսում  է գործառույթի  չեղարկման  գործնթացը,  որտեղ  չեղարկման  հարցումները  կատարվում  են հակառակ ուղղությամբ: ", "Աղյուսակ 1.Հասանելի համակարգերի և նախագծված CA Simulator-ի համեմատական վերլուծություն: ", "Քանի  որ  ձևաչափը  տեղեկություն  է  պարունակում  տվյալ  հանգույցից  դեպի  այլ՝ տրամաբանորեն  հաջորդ  հանգույց տանող  ճանապարհի  վերաբերյալ,  որը  փաստորեն ենթադրում  է  ցատկ  դեպի  ծառի  ավելի  ստորին  մակարդակում/մակարդակներում տեղակայված  մեկ  կամ  մի  քանի  հանգույցներ,  ապա  ստորին  մակարդակի  ամեն հանգույց՝  ստանալով  նշված  ձևաչափի  հաղորդագրությունը,  նախ՝  փորձում  է  իր կարգային  համարը  գտնել  այդ  հաղորդագրության  մեջ,  որից  հետո  վերծանելով գաղտնիքի իր մասնաբաժինը և արտադրելով համապատասխան հեշը, կառավարումը փոխանցում  է  հաջորդ  հանգույցին։  Արդյունքում  բոլոր  անհրաժեշտ  հանգույցների կողմից մշակված և արտադրված հեշ արժեքների համախումբը վերահսկում է ցանցով փոխանակվող  տվյալների  և  գործառույթների    ամբողջականությունը,  իսկ  բաշխվող բանալիների  ենթակառուցվածքը՝  այդ  նույն  տվյալների  և գործառույթների անվտանգությունը։ ", "տարբերակների ժամանակների համեմատական վերլուծություն: ", "Այն  դեպքում,  երբ  հանգույցը,  որին  փոխանցվել  է  վերոհիշյալ  ձևաչափի հաղորդագրությունը  և,  որն  իր  կարգային  համարը չի  հայտնաբերում  այդ հաղորդագրության  մեջ,  ուստի  ազատ  է  գաղտնիքի  որևէ  մասնաբաժին  վերծանելուց, կառավարումը փոխանցում է հաջորդ հանգույցին՝ ապահովելով միայն հեշավորումը։ ", "•  Զատել կեղծ թիրախները, իրական թիրախի հայտնաբերման ժամանակ։ ", "Ավազակույտի  աշխատանքի զուգահեռացման  արդյունքում որոշ հանգույցներ  պետք  է  փլուզվեն  միաժամանակ։  Առաջարկվող լուծումներում դիտարկվում  է  2  տարբերակ․  առաջինը,  որ  միաժամանակ  փլուզվող  գագաթները կարող են ունենալ ընդհանուր հարևաններ, և երկրորդ՝ չունեն ընդհանուր հարևան։ ", "Բաց  վերահսկվող  տարածքներում,  ինչպիսիք  են  բակերը,  ֆերմաները,  հնարավոր  է այնպիսի  օբյեկտների  առկայություն,  որոնք  բնական  կլիմայական  պայմաններում կարող  են  շարժվել:  Օրինակ՝  վերահսկվող  տարածքում  հանրավոր  է  ծառի առկայություն,  որը  կարող  է  տատանվել  քամու  առաջացման  դեպքում:  Տանտանման արդյունքում ծառի  առաջացրած շարժումը կբերի  պատկերի  պիքսելների փոփոխության:  Փոփոխությունը  անմիջապես  ֆիքսվելով  ալգորիթմի  կողմից,  կբերի նոր  օբյեկտի  առկայության  նախանշանի:  Փոփոխված  տարածքը  կճանաչվի  որպես օբյեկտ: Սա կկանգնեցնի երկու խնդրի առաջ: ", "•  Ավելորդ օբյեկտների հայտնաբերմումը կհանգեցնի սխալ արդյունքի •  Ալգորիթմի ժամանակի ավելորդ ծախսի Դիտարկենք  մի  օրինակ,  որի  դեպքում  անվտանգության  տեսախցիկի  միջոցով վերահսկվում  է  այնպիսի  տարածք,  որտեղ  օբյեկտի  ներթափանցումը  արգելված  է (Նկար 2.12ա): "]}