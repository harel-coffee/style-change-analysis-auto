{"paragraph_source_docs": [1, 0, 0, 2, 1, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0, 1, 2, 2, 2, 1], "paragraphs": ["Նկար 40.Ավազակույտի մոդելի օրինակ: ", "Գաղտնագրային  հեշ  ֆունկցիաների  կարևոր  հատկություններից  են  բախումը  և կայունությունը:  Հեշ  ֆունկցիայի  բախումը    երկու  տարբեր  հաղորդագրության  (M1  և  M2) հեշերի  արժեքների  համընկնումն  է,  երբ    h  (M1)  =  h  (M2):  Հեշ  ֆունկցիայի  բախումների բացահայտումն  իրականացվում  է  պատահական  մուտքային  արժեքների  փորձարկման եղանակով  [46,  47,  48]:  Կարևոր  է  նշել,  եթե  հեշավորված  տվյալի  իմացությամբ հարձակվողը    կարող  է  գտնել  M  հաղորդագրությունը,  որն  արտահայտվում    է  h  (M)  =  H բանաձևով,  ապա    հեշավորման  ֆունկցիան    կայունություն  ապահովող  չի  համարվում: ", "Այսպիսով,    նախօրոք  տրված  ելքի  համար  հաշվողական  առումով  անհնար  է  հաշվարկել այն  մուտքը,  որն  արտադրում  է  միևնույն  ելքը:  Նաև  կայունություն  ցածր  ցուցանիշի արդյունք  է  համարվում  հեշ  ֆունկցիայի  մուտքային  և  ելքային  արժեքների  իմացության դեպքում  մեկ  այլ  մուտքային  արժեք  գտնելու  հնարավորությունը,  որի  ելքային  հեշը կհամընկնի սկզբնական հաղորդագրության ելքային հեշի հետ: ", "Նկար  2.12ա-ի  և  2.12բ-ի  միջև  ալգորիթմը  կիրառելուց  օբյեկտը  կհայտնաբերվի, ինչպես պատկերված է նկար 2.13-ում: ", "Նկար 42.Ավազակույտի ծածկույթները եռաչափ ցանցում: ", "Վանգը և Յուն ցույց են տվել, որ Merkle–Damgård սխեման անվտանգ չէ, քանի որ վերոհիշյալ պահանջների կատարումը չի ապահովում [50]։ Հեշ ֆունկցիան  նաև պետք է ունենա Շենոնի շփոթության և դիֆուզիայի կանոններին համապատասխան հեշավորման դրսևորում  [51]։  Շփոթությունն  ապահովվում  է  այն  դեպքում,  երբ  հաղորդագրության հեշավորած ելքի ցանկացած բիթ ստացվում է բանալու տարբեր մասերի օգնությամբ, ինչը դժվարացնում  է  բանալու  և  հաղորդագրության  կապի  բացահայտումը։  Միաժամանակ հեշավորած  ելքի  ցանկացած  բիթ  փոխելու  դեպքում  պետք  է  փոխվի  հաղորդագրության բիթերի կեսը և  պահպանվի հաղորդագրության և հեշ ֆունկցիայի համապատասխանությունը: ", "Քաոսային մեթոդները բավարարում են վերոհիշյալ կանոններին, սակայն քաոսային հեշ ֆունկցիաների մեծամասնությունը որպես ոչ անվտանգ սխեմա օգտագործում է Merkle– Damgård կամ այդ սխեմայի տարբերակը: ", "Նշենք, որ openMP-ն ստանդարտ է C, C++ լեզուներով՝ ստեղծված ծրագրերի զուգահեռացման համար:  Այն նկարագրում է շրջակա միջավայրի փոփոխականները,  գրադարանի  ֆունկցիաները  և  պրոցեդուրաները,  որոնք օգտագործվում  են  բազմահոսքային  ծրագրեր  ծրագրավորելու  համար  ընհանուր հիշողությամբ  բազմապրոցեսային  համակարգերում:  Այն  իրականացնում  է զուգահեռ  հաշվարկ`  օգտագործելով  բազմահոսքությունը  (multi-threading),  որտեղ գլխավոր  հոսքը  ստեղծում  է    \"հպատակ\"  հոսքեր,  և  աշխատանքը  բաժանվում  է նրանց  միջև:  Ենթադրվում  է,  որ  հոսքերը  կատաարվում  են  զուգահեռ, բազմապրոցեսորային մեքենաների վրա, որտեղ պրոցեսների քանակը պարտադիր չէ մեծ կամ հավասար լինի հոսքերի քանակին: ", "Նկար  2.14բ-ում  պատկերված  է  ծառը  քամու  ազդեցության  տակ  տատանման պահը:  Ծառի  տատանման  արդյունքում  պատկերում  առաջանում  է  պիքսելների փոփոխոթւյուն:  Սկզբնական  պատկերը,  որտեղ  ծառը  գտնվում  էր  անշարժ  վիճակում, համեմատենք ընթացիկ պատկերի հետ XOR բիթային համեմատության սկզբունքով: ", "ա.                            բ. Նկար 2․15 . ա) համեմատության արդյունքը, բ) օբյեկտի առկայությունը տեսահսվող տարածքում: ", "Արդյունքում  կստանանք  նկար  2.15-ում  ցույց  տրված  սև  տարածքը:  Ինչպես երևում  է  նկար  2.15ա-ից,  ստացանք  սև  պիքսելներ,  որոնք  միասին  կազմում  են  փոքր սև  տարածքներ,  վերջինս  կանվանենք  շեղումային  տարածքները (որոնք  մեր պարագայում հանդիսանում է կեղծ թիրախներ): ", "Ենթադրենք տեսախցիկի միջոցով նկարահանումը սկսելուց որոշ ժամանակ անց պատկերում հայտնվում է օբյեկտ, որը կենդանի է, օրինակ՝ ձի (Նկար 2.15բ): ", "Ինչպես  համոզվեցինք  նախորդ  օրինակից,  ծառի  բացակայության  դեպքում, համեմատությունից  հետո  դիտարկվող  օբյեկտը՝  ձին,  միանգամից  կհայտնաբերվեր: ", "Ծառի  առկայության  դեպքում  որպես  արդյունք  ձիու  սև  պատկերի  հետ  մեկտեղ կստանանք նշված շեղումային սև տարածքները (Նկար 2.16): ", "Նկար 2.16. Շեղումային տարածքների առկայությունը օբյկետի հայտնաբերման դեպքում: ", "Ինչպես  տեսանք,  հայտնվում  են  ավելորդ  տարածքներ,  որը  բերում  է`  առաջին հերթին  օբյեկտների  հայտնաբերման  ալգորիթմի  սխալ  աշխատանքի  և  երկրորդ, ժամանակի ավելորդ կորուստի: ", "Ակնհայտ է, թե ինչ կենսական նշանակություն կարող է ունենալ օբյեկտի արագ և ճշտորեն  հայտնաբերումը մարդկային կյանքին սպառնացող վտանգների կանխման տեսանկյունից,  այնպիսի  վայրերում,  ինչպիսիք  են,  օրինակ՝  երկաթուղային ճանապարհները և կայարանները: ", "Առաջին  և  երկրորդ  դեպքերը  պետք  է  ընտրվեն  կախված  խնդրից  և  ցանցի չափերից:  Նույն  տրամաբանությամբ  կարելի  է  իրականացնել չափանի խորանարդային  ցանցերի  վրա  դիտարկվող  ավազակույտի  մոդելի  աշխատանքի սիմուլացիայի զուգահեռացում: ", "Այժմ  ներկայացնենք  տարբեր  հզորությամբ  CPU-ների  և  GPU-ների  վրա փորձարկված արդյունքների վիճակագրական վերլուծությունը: ", "Նկ. 13. Լոգիստական արտապատկերման երկատման դիագրամը Միաչափ  քաոսային  արտապատկերումների  այլ  օրինակներ  են  սինուսային արտապատկերումները,  որոնք  լոգիստական  արտապատկերման  հետ  ունեն  միանման դրսևորում,  մասնավորապես  սինուսային  արտապատկերումն  իր  քաոսային  վարքագծում ունի լոգիստակաjին  արտապատկերմանը նման երկճյուղավորման դիագրամ և  միևնույն խնդիրները: Այս խնդիրները լուծելու համար Զհոուն և մյուսներն առաջարկել են քաոսային համակարգ՝  երկչափ  արտապատկերումներով,  որոնք  ընդունված  է  նշանակել  LS պարամետրով [53,54]: Գաղտնագրային համակարգերում ցանկացած ոչ հավասարաչափ բաշխում  պատահական  թվերի  գեներատորով  կարող  է  օգտագործվել  գրոհների  կողմից ծածկագրի  կամ  ալգորիթմի  բացահայտման  համար՝  օգտագործելով  դիֆերենցիալ գրոհները: ", "openMP normal Գծապատկեր 2. 1. CPU-ի մոդելը. Intel i7 2670QM. Ցանցի չափերը. 90.000 հանգույց .Ավազահատիկների քանակը. 9.000.000 ավազահատիկ: ", "Սկզբնական պատկերը պահպանելուց հետո նկարահանումը շարունակվում է 30 րոպե  (նշված  ժամանակը  նախատեսված  է  կոնֆիգուրացիա  իրագործելու  համար)  և համկարգի կողմից դիտարկվում են պատկերում պոտենցիալ տատանում առաջացնող օբյեկտները,  որոնք  կարող  են  առաջացնել  շեղումային  տարածքներ:  Դիտարկման գործընթացի  ընթացքում  1  վայրկյան  պարբերությամբ  վերցվում  և  պահպանվում  է պատկերը:  Փորձում  ենք  գտնել  և  ֆիքսել  շեղումային  տարածքը  առաջացնող  օբյեկտը իր  ամենամեծ  տատանման  պահին:  Դիտատրկումը  ավարտելուց  հետո  պահպանված պատկերները  մեկ  առ  մեկ  համեատվում  են  սկզբնական  պատկերի  հետ,  որը  հենց կօգնի  գտնել  ամենամեծ  շեղում  ունեցող  պատկերը:  Համեմատության  համար օգտագործվում  է  նախորդ`  2.1.1  ենթավերնագրում  նկարագրված  համեմատություն մեթոդը  [47]:    Այն  պատկերը,  որը  կպարունակի  ամենաշատ  սև  պիքսելները,  այն  էլ կլինի  ամենամեծ  շեղում  ունեցող  պատկերը:  Վերջինս  կրկին  ավտոնոմ  կերպով կընտրվի  համակարգի  կողմից:  Այն  կանվանենք  սխալանքի  պատկեր:  Սխալանքի պատկերի թվային մատրիցը կնշանակենք լատինատառ W տառով: ", "Սխալանքի տիրույթը մեծացնելու սկզբունքը: Քանի որ տարբեր եղանակային պայմաններում  քամու  առկայությունը  կարող  է  բերել  ծառի  ավելի  մեծ  ամպլիտուդով տատանման  (վերջինս  կբերի  սխալանքի  տիրույթի  մեծացման),  և  կարճաժամկետ դիտարկմանան  արդյունքում  հնարավոր  չէ  մեծ  ճշտությամբ  որոշել  սխալանքի տիրույթը,  ապա  հաջորդ  կարևոր  քայլը  կլինի  սխալանքի  տիրույթի  մեծացումը:    Սա կօգնի համակարգին նախատեսել ապագա հնարավոր շեղման տիրույթը: ", "Սխալանքի  տիրույթը մեծացնելու համար կաշխատեցնենք հետևյալ մատրիցային եղանակը W մատրիցի համար: ", "Գծապատկերներից  պարզ  է  դառնում,  որ  ցանցի  մեծացման  հետ ժամանակային  տարբերությունը  ավելի  է  մեծանում:  Ուստի  մեծ  ցանցերի  դեպքում զուգահեռացումը  օգտագործելը  շատ  ավելի  օգտավետ  կլինի:  Հիշեցնեմ  նաև,  որ ժամանակը  ավելի  փոքր  կարող  է  լինել  ճիշտ  ծրագրային  մինիմիզացիաների դեպքում: "], "source_docs_file": "Informatics and Computer Systems.json"}