{"source_docs_file": "Control, Automation and Electrical Engineering.json", "paragraph_source_docs": [2, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1, 3, 0, 0, 2, 2, 1, 0, 0, 1, 3, 1, 4, 1, 3, 4, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 4, 4, 1, 1, 4, 1, 1, 4, 1, 3], "paragraphs": ["  Դիտարկման  ավարտի չափորոշիչի  ընտրություն:  Դա  կարող  է լինել դիտարկումների  ֆիքսված  քանակ,  կամ  դիտարկումները  կարող  են  կատարվել, քանի  դեռ  դրանք  փոքրացնում  կամ  զգալիորեն  փոքրացնում  են  հատումների ընդհանուր քանակը: ", "SIE ԱՀ-ում  մեկ այլ կարևոր խնդիր է կիրառվող ԾՕ-ների քանակի լավարկումը: ", "Զրոյական և անկյունագծային  ԾՕ-ները (Տես՝ նկ. 2.17, նկ. 2.18) հիմնական  ԾՕ-ներ են հանդիսանում  այն  հիշողության  նմուշների  դեպքում,  որոնց  հիշողության  բջիջների զանգվածի երկրաչափական տեսքը քառակուսի է (այսինքն՝ զանգվածում տողերի (#PR) և սյուների (#PC) քանակները համընկնում են` #PC = #PR) կամ էլ մոտ է քառակուսիին: ", "Այդ  դեպքերում  հնարավոր  է  դառնում    կառուցել  անկյունագծային    ԾՕ,  որը  լիովին կընդգրկվի հիշողության զանգվածը պատկերող մակերևույթում (Տես՝ նկ. 2.19 ա.) և այդ դեպքում՝  PG  գործիքով  գեներացված    ԾՕ-ների  քանակը  մոտ  կլինի  նվազագույնին: ", "Երկրորդ  տարբերակում,  համակարգում  ներդրվում  է  սեփական  էլեկտրոնային փոստի  սերվեր։  Այս  դեպքում  ստացված  նամակները  պահվում  են  այն  նույն միջավայրում, որտեղ գործարկվում է համակարգը և հետևաբար առանց հավելյալ ցանցի առկայության  համակարգը  ստանում  է  ամբողջական  հասանելիություն  անհրաժեշտ տվյալներին։ ", "ա. բ. դ. ե. Նկար 2.19.   ԱՀ-ի անկյունագծային ԾՕ-ի կիրառման օրինակները Իսկ  երբ  զանգվածի  տողերի  և  սյուների  հարաբերությունը  մեծ  է  երեքից,  ապա  այդ դեպքերի  համար  նախատեսված  է  կիրառել  ոչ  անկյունագծային՝ լրացուցիչ, ծրագրավորող  օրինակներ:  Այդ    ԾՕ-ների  կիրառումը  նախատեսված  է  միայն  մեծ չափսեր  ունեցող  հիշողության  նմուշների  դեպքերում  (այդ  պատճառով  այս  դեպքի օրինակը  ներկայացնելը  դժվար  է):  Ոչ  անկյունագծային  ծրագրավորման  օրինակները՝ ֆիզիկական  մակարդակում,  յուրաքանչյուր  տողին  (իսկ  #PC  >  #PR  դեպքում՝  սյունին) վերագրում  են  չկրկնվող  կոդ,  այսպես  ասած,  «համարակալում»  են  տողերը:  Ոչ անկյունագծային  ԾՕ-ները  կիրառվում  են  միայն  անկյունագծային  ԾՕ-ներից  հետո որպես  լրացուցիչ  ծրագրավորման  օրինակներ:  SIE-ի  հոսքում  բացի  պարտադիր զրոյական և անկյունագծային ԾՕ-ներից, կարող են գեներացվել   առավելագույնը մինչև վեց  լրացուցիչ  ԾՕ-ներ:  ՀՍ-ի  նմուշի  լրացուցիչ  ԾՕ-ի    ֆայլի  օրինակը  ներկայացված  է հավելված 4-ում: ", "Ներքին  էլեկտրոնային  սերվերում  ստեղծված  էլեկտրոնային  հասցեներից  մեկը կիրառվում  է  որպես  համակարգի  մուտքային  տվյալների  հոսքուղի։  Համակարգին Նկար 2.1. Համակարգի մուտքային նամակի լրացված դաշտերով օրինակ դիմելու միջոցը այդ հասցեով էլեկտրոնային նամակի կամ դրա պատճենի ուղարկումն է։ ", "Ա յժմ  դ ի տ ա ր կ ե ն ք   հիշողութ յա ն  Հ Ն Թ Յ -ի   խ մբա վորմա ն  մե թ ո դ ը '  հա շվի  ա ռ ն ե լո վ տ րվ ա ծ  ա ռ ա վելա գույն  հզորութ յա ն  սպ ա ռմա ն  և  տ ա րրերի  քա ն ա կ ի   ա րժ եքները, հիշողութ յա ն  դ ո մ ե ն ն ե ր ը   և  օ պ տ ի մ ա լ  թ ե ս տ ա վորմա ն  ժ ա մա նա կը: ", "-ը Նկ. 3.18 -ի հաշվարկը Այստեղ  մոդուլացված  ազդանշանի  զանգվածից  առանձնացվում  է  ակնթարթային ամպլիտուդաների  արժեքների  զանգվածը,  ինչից  հետո  իրականացվում  է  դրանց նորմավորումը  և  կենտրոնացումը  և  հավասարում  (3.37)-ի  համաձայն  կատարված հաշվարկները։ ", "Դա  բացատրվում  է  այն  բանով,  որ  գեներացումը  կատարող՝  ժամանակակից  (32  նմ,  22 նմ,  14  նմ  տեխնոլոգիաների  համար  օգտագործվող)    համակարգչային  ռեսուրսները ավելի հզոր են, քան նախկինում (90 նմ, 60 նմ  տեխնոլոգիաների համար)  օգտագործվող ռեսուրսները: ", "Աղյուսակ  2.2-ում  տրված  են  հիշողության  կոմպիլյատորների  բնութագրերը  և դրանց համապատասխան  ASV  ալգորիթմի  աշխատանքի ժամանակային գնահատականները, որտեղ  «K» դա –կիլոբիթ է իսկ  «M» - մեգաբիթ: ", "Նկ. 3.19 -ի հաշվարկը Այս  բնութագրող  հատկանիշի  հաշվարկն  իրականացնելու  համար  ակնթարթային փուլի  ածանցելու  միջոցով  ստացվել  է  ակնթարթային  հաճախականությունը,  որը այնուհետև  կենտրոնացվում  և  նորմավորվում  է  ըստ  սիմվոլների  հաճախության արժեքի։  Հաջորդիվ  վերցվում  են  այն  ակնթարթային  հաճախականության  արժեքները, որոնց  դեպքում  ակնթարթային  ամպլիտուդան  մեծ  է  նախորոք  որոշված  շեմային արժեքից։  Վերջում  իրականացվում    է  հավասարում  (3.38)-ով  սահմանված  հաշվարկը։ ", "Ֆիլտրման համար կատարվում են հետևյալ քայլերը՝ ստացված հրահանգի վավերությունը; առկայությունը  և  գտնելու  դեպքում  որոշ  հրահանգների  համար  ստուգվում  է  նաև  դրա ձևաչափի ճիշտ լինելը։ ", "Արդյունքում՝  նամակներից  յուրաքանչյուրը  ստուգվում  է  վերոնշված  քայլերով, իսկ  քայլերից  որևէ  մեկին չբավարարելու  դեպքում՝  անտեսվում։  Ֆիլտրման գործողությունից  հետո  ֆիլտրված  նամակները  փոխանցվում  են  մյուս՝  դասակարգման մեթոդին, որը տեսակավորում է դրանք։ ", "Այսպիսով,  հետազոտվել  է  ինտեգրալ  սխեմաների՝  «փափուկ»  և  «կոշտ»  բլոկների՝ ֆիզիկական  կառուցվածքների  տեսքով    ներկայացումը։  Ներկայացվել  են  «փափուկ»  և «կոշտ»  բլոկների հատկությունները։ Հետազոտվել են արդի ալգորիթմական լուծումներ՝ գրաֆում  և  ԻՍ-ում  շղթաների  հատումների  քանակի  նվազարկման  և  արագագործ ավտոմատացման միջոց մշակելու նպատակով։ ", "Տրամաբանական տարրերի փոխանջատման ակտիվությունների միջոցով դինամիկ հզորությունների գնահատումը՝ որպես սխեմատեխնիկական առանձնահատկությունների հաշվառմամբ ֆիզիկական կառուցվածքի ստացման Եթե (1.6) արտահայտությունում տարրերի տեսակարար դինամիկ հզորություններն ու  բջիջների  թվային  ստանդարտ  գրադարանի  աշխատանքային  հաճախականությունը միջոց - 62 - հայտնի  են  դառնում  գրադարանի  ընտրության  արդյունքում  և  կախված  չեն  սխեմայի տրամաբանական  ակտիվությունից,  ապա  տարրերի  փոխանջատման  ակտիվությունը ուղղակիորեն  կախված  է  սխեմայի  տրամաբանությունից  և  տվյալ  տարրի  սխեմայում տեղաբաշխման  վայրից:  Ուստի  ֆիզիկական  նախագծման  համար  կարևոր  է  մշակել այնպիսի  միջոցներ,  որոնք  թույլ  կտան  հաշվի  առնել  տրամաբանական  սխեմայում տարրերի  փոխանջատման  ակտիվությունը՝  դրանց  իրական  հզորության  գնահատման ժամանակ: ", "օրինակների քանակը, րոպեներով, Փորձերի  ընթացքում  նկատվեց,  որ  չնայած  նրան,  որ    մոդելի  դուրսբերման ժամանակը  կախված է  հիշողության  պատրաստման  տեխնոլոգիայից,  ԱՀ-ի աշխատանքի  տևողությունը  հիմնականում  կախված  է  նմուշի  կոնֆիգուրացիայի պարամետրերից  (NW,  NB,  CM,  BK)  և  կատարվող  մոդելավորման  աշխատանքի տևողության ժամանակից: ", "Յուրաքանչյուր նամակի համար որոշվում է այն գործողությունների ցանկը, որոնք անհրաժեշտ  են  տվյալ  հրահանգի  կատարման  համար,  որից  հետո  զուգահեռաբար սկսվում է հրահանգների կատարման գործընթացը։ ", "Նկար 2.2. Մուտքային ինֆորմացիայի ֆիլտրման և դասակարգման հաջորդական գործընթացը Այսպիսով՝ մուտքային տվյալների մշակման մեխանիզմը թույլ է տալիս ստացված տարատեսակ  էլեկտրոնային  նամակներից  զտել  միայն  համակարգի  համար ընդունելիները։  Նամակները  նախ  անցնում  են  ֆիլտրման  գործընթացով՝  ըստ համակարգի  սահմանված  չափորոշիչների,  այնուհետև  որոշվում  է յուրաքանչյուր նամակին համապատասխանող հրահանգը, որից հետո այն ուղարկվում է կատարման (Նկար 2․2)։ ", "Ինչպես  և  SIV  ԱՀ-ի  դեպքում,  SIE  ԱՀ-ի  կառավարումը,  մուտքային  պարամետրերի արժեքների  փոխանցումը  ծրագրերին,  նույնպես,  իրականացված  է  կառավարող տեքստային ֆայլի միջոցով: ", "Այսպիսով՝  տվյալ  հիմնական  բնութագրող  հատկանիշը  մշակվել  է  ակնթարթային փուլի  փոփոխությունների  քանակի  միջոցով  փուլային  մոդուլացված  ազդանշանի կարգը  հայտնաբերելու  համար։  Որոշված  արժեքների  տիրույթում  փուլերի  կրկնման քանակի  մասին  տեղեկատվությունը  ստացվել  է  հիստորգրամի  միջոցով [85]։ ", "Ներկայացված են ծրագրային ԱՀ-ի  ֆունկցիոնալ, կառուցվածքային սխեմաները; -  SIE ավտոմատ ծրագրային համակարգի նկարագրությունը, որը հնարավորություն է տալիս ստանալ Ստատիկ պատահական դիմումով հիշողության (ՍՊԴՀ) նմուշի կառուցվածքային  մոդելը  այդ  հիշողության  նմուշի  արտադրության  մեջ օգտագործվող  GDSII  ձևաչափով  ներկայացված  ֆայլից:  Ներկայացված  են ծրագրային  ԱՀ-ի    ֆունկցիոնալ,  կառուցվածքային  սխեմաները,  մոդելի  դուրս բերման հետ կապված հիմնախնդիրները, բարդությունները և սահմանափակումները: ", "Եզրակացություն  երկրորդ գլխի  վերաբերյալ Հետազոտության  արդյունքում  ներկայացվել  է  ք^\"1\"Լ  կոմպիլյատորների  կողմից գեներացված  նկարագրությունների  նախագծման  բնութագրերի  և  մուտքային պարամետրերի  միջև  կախվածությունն  արտահայտող մոդելի  ընդլայնումը,  որը  հաշվի է առնում նանոտեխնոլոգիային  բնորոշ  առանձնահատկությունները: ", "- 88 - ԵՎ ՎԱՐՔԱԳԾԱՅԻՆ ԹԵՐՈՒԹՅՈՒՆՆԵՐԻ ՆԵՐԱՐԿՄԱՆ ԵՎ ԱԼԳՈՐԻԹՄՆԵՐԻ ՍՏՈՒԳՄԱՆ  ԱՎՏՈՄԱՏ  ՀԱՄԱԿԱՐԳ հայտնաբերող ալգորիթմների ստեղծման խնդիրը Ինչպես արդեն նշել ենք, հիշողությունների թեստավորումը կարևոր և բարդ խնդիր է  մանավանդ  ներդված  հիշողությունների  դեպքում:  ՆՀՍ-ի  արագ  և լիարժեք թեստավորումը  ապահովելու  նպատակով  ներդրված  ՆՀՍ-ի  հետ    նույն  միջավայրում ներդրվում  են  լրացուցիչ  էլեկտրոնային  սխեմաներ,  պրոցեսորներ,  որոնց  նպատակն  է. ա)  օգտագործելով  ներդրված  ինքնաթեստավորման  ալգորիթմները    (անգլերեն  Built  in self-test)`  կատարել  ՆՀՍ-ի  անմիջական  ստուգումը,    և  բ)  հնարավորության  դեպքում, հիշողության  աշխատունակության  վերականգնումը  (անգլերեն  Built  in  redundancy analysis) [2], [17-21]:  Այդ  ներդրված  պրոցեսորների  կողմից  իրականցվող ինքնաթեստավորումը (ՆԻԹ) ստուգման  և  վերահսկման  հիմնական  միջոց  է հանդիսանում  ներդրված  հիշողության  սարքերի  համար:  ՆԻԹ  արդյունավետությունը բնութագրվում  է  երկու  չափանիշներով.  ա)  օգտագործված  թեստային  ալգորիթմի ծածկույթը՝  ՆԻԹ ալգորիթմի միջոցով հնարավոր անսարքությունների հայտնաբերման ունակությունը,  բ) այդ  լրացուցիչ  սխեմաների օգտագործման  հետևանքով հիշողության սարքի  տոպոլոգիայի  ավելացված  մակերևույթի  տոկոսը:  Այս  երկու  չափանիշները փոխկապակցված  են,  քանի  որ  շատ  բարդ  թեստավորման  ալգորիթմի  իրականացումը միկրոսխեմայում  պահանջում  է  սարքի  թիթեղի  վրա  ավելի  շատ  մակերևույթ  և հակառակը,  անհնար  է  իրականացնել  լիարժեք  ծածկույթ  ունեցող    ՆԻԹ  ալգորիթմ թիթեղի  սահմանափակ մակերևույթում: ", "Նկ. 3.23 – հաշվարկի ծրագրային կոդը Նկ.3.23-ում պատկերված կոդում ակնթարթային փուլի բաշխվածության քանակը նշված արժեքների  տիրույթներում  որոշվում  է  LabVIEW  ծրագրավորման  միջավայրի «Histogram  VI»  վիրտուալ  գործիքի  միջոցով [86]։  Այնուհետև  հաշվարկվում  է հիստոգրամի  հաջարդականության  միջին  արժեքը։  Հաջորդականության  բոլոր անդամները  ներմուծվում  են  For  օղակման  մեջ,  որտեղ  կատարվում  է  հիստոգրամի հաջորդականության  յուրաքանչյուր  անդամի  համեմատությունը  հաշվարկված  միջին արժեքի հետ և ելքում ստացվում են այն արժեքները, որոնք մեծ են այդ միջին արժեքից։ ", "Նանոչաւիական  հիշող սարքերի  համար  (Հ1՜Լ  թեստային լուծումներ  գեներացնող կոմպիլյատորների  նախագծման բնութագրերի  արագ գնահատման  մեթոդի  փորձնական արդյունքներն  իրական  1Հ1՜Լ  կոմպիլյատորներում վերանորոգման  խնդիրները Յուրաքանչյուր  նոր  տեխնոլոգիա  հնարավորություն  է  տալիս  ստեղծել  ավելի  փոքր, խիտ,  արագ  և  բազմաֆունկցիոնալ  ԲՎՀ:  Արդի  ԲՎՀ-ը  պարունակում  են  մի  քանի  ՄՍ բլոկներ:  Ներկառուցված  հիշողությունները  հանդիսանում  են  ԲՎՀ-ի  գլխավոր կոմպոնենտները'  զբաղեցնելով  բյուրեղի  մակերեսի  մեծ  մասը  [58]:  Այդ  պատճառով դրանց  արտադրական  ելքն  ազդում  է  ամբողջ  ԲՎՀ-ի  արտադրական  ելքի  վրա: ", "«Փափուկ»  անսարքությունների  հայտնաբերումը  կատարվում  է  նույն  ծրագրային միջոցների օգնությամբ, ինչ որ օգտագործվում են  «Կոշտ»  անսարքությունների համար: ", "Մինչդեռ «Փափուկ» և «Կոշտ» անսարքությունների ազդեցության հետևանքով վնասված - 90 - ՆՀՍ-ի  աշխատունակությունը  վերականգնելու  համար    կատարվող    մոտեցումները  և գործողությունները տարբերվում  են  մեկը  մյուսից  [7]:  Այս  ատենախոսության սահմաններում, մենք  դիտարկում ենք միայն «Կոշտ»՝ հաստատուն վարքագիծ ունեցող թերությունների հետևանքով առաջացած անսարքությունները: ", "Իրատեսական թերությունների մոդելները մշակելը և թերությունների գրադարանը ունենալու  մեկ  այլ  առավելություն  է  այն,  որ  այն  հնարավորություն  է  տալիս  ստուգել թեստային  ալգորիթմները  իրական  թերությունների  գրադարանի  սահմաններում: ", "Ներկայումս  թեստային  ալգորիթմների  և  թերությունների  մոդելների  բարդության աճման  պատճառով  դրանց  ստուգումը  առանց  հատուկ  ծրագրային  ավտոմատ միջոցների դառնում է անհնար [15]: ", "Այս  գլխում  ներկայացված  է  թերությունների  ներդրման  և  հիշողությունը թեստավորող  ալգորիթմը  ստուգող    (ԹՆևՀԹԱՍ)    ծրագրային  ԱՀ,  որի  նպատակն  է կատարել  թեստային  ալգորիթմների  աշխատանքի  ստուգումը,  գնահատել  այդ ալգորիթմների արդյունավետությունը՝ օգտագործելով տարբեր  տեսակի  իրատեսական թերությունների  մոդելներ,  որոնք  կարող  են  տեղադրվել  հիշողության  սարքի  բոլոր հանգույցներում՝  ստեղծելով  տարբեր  վարքագիծ  դրսևորվող  անսարքություններ: ", "Անհրաժեշտության դեպքում ԹՆևՀԹԱՍ ծրագրային ԱՀ-ը հնարավորություն է ընձեռում իրականացնել.  ա) թեստային  ալգորիթմների  աշխատանքի  ամբողջական արդյունավետության հաստատումը, բ) թեստային ալգորիթմների յուրաքանչյուր  Մարշ ալգորիթմի  տարրերի  առանձին  ստուգումը,  գ)  թեստային  ալգորիթմների  քայլ  առ  քայլ ստուգումը: ", "համակարգի կառուցվածքը և աշխատանքը ԹՆևՀԹԱՍ  ծրագրային ԱՀ-ը բաղկացած է հետևյալ ֆունկցիոնալ մասերից. ապահովում  է  հետազոտվող  թերություններ  պարունակող  բջջի/բջիջների  ներարկումը հիշողության  նմուշի  տոպոլոգիայի՝  GDSII  ձևաչափի  ֆայլի,  մեջ:  Թերությունների ներարկումը  իրականացվում  է  ֆիզիկական  մակարդակով՝  առանց  հաշվի  առնելու - 91 - հիշողության  նմուշի  կառուցվածքային  խճողումները (scramble):  Ներարկման արդյունքում  ստացվում  է  տոպոլոգիայի  մակարդակով  թերությունը  պարունակող՝ Թերությունների ներարկում  և Թերություններով կապերի ցուցակի` SPICE  ֆայլի բջիջների գրադարանը Հիշողության նմուշի տոպոլոգիան (GDSII ֆայլը) գեներացումը  (1) Անսարքություներով SPICE ֆայլի մոդելավորումը   (2) Մոդելավորման արդյունքների վերլուծումը  (3) Հետազոտվող թեստային ալգորիթմը Նմուշի կառուցվածքային խճողման ինֆորմացիան Ելքային ֆայլերի գեներացումը Նկար 3.1.   ԹՆևՀԹԱՍ  ծրագրային ԱՀ -ի ֆունկցիոնալ սխեման «արատավոր»  նմուշը:  Այդ  նմուշից  գեներացվում  է  SPICE  ձևաչափի  ֆայլը՝  թերություն պարունակող SPICE ֆայլը: ", "- 66 - Նկ․ սխեմայի  Verilog  նկարագրից  մինչև «կոշտ» բլոկի  ստացման  գործընթացի ալգորիթմական ապահովումը։ ", "Երբ SPICE ֆայլերի նախապատրաստման  աշխատանքը  ավարտվում է, մոդելավորման հանգույցը  սկսում  է  մոդելավորումը՝  օգտագործելով  թերությունների  դիմադրության տարբեր  արժեքներ, և,  անհրաժեշտության դեպքերում՝  անսարքությունների հայտնաբերման  համար  ստեղծելով  անհրաժեշտ  լրացուցիչ  սթրեսային  իրավիճակներ, կիրառելով մոտքային  պարամետրերի (սնուցման լարում,  աշխատանքային ջերմաստիճան,  աշխատանքային  հաճախականություն  և  այլն)  տարբեր  արժեքներ: ", "- 67 - հոսքի գրաֆի ԻՍ-երի ֆիզիկական նախագծման ժամանակ սխեմայի ֆունկցիոնալ- տրամաբանական  առանձնահատկությունների  հաշվառման  առաջարկվող  մոտեցումը ենթադրում  է  տվյալների  մշակման  սխեմայի  փականային  մակարդակի  Verilog նկարագրության  նախնական  փոխակերպումը  ազդանշանների  հոսքի  գրաֆի  (ԱՀԳ)՝ G(W,C)  [69-72],  որտեղ  C={c1,  c2,…,cm}–ը  տարրերի  բազմությունն  է  ,  W={w1,  w2,…,wn}  -ը՝ շղթաների  բազմությունը։  Հետագայում,  ստացված  ԱՀԳ-  ի  հիման  վրա,  կատարվում  է սխեմայի տրամաբանական բջիջների դասակարգում, որի արդյունքներն օգտագործվում են դրանց տեղաբաշխման ժամանակ: ", "ստացված  մոդելավորման  արդյունքների  մշակումը,  կատարվում  է  արդյունքների վերջնական  վերլուծումը,  ելքային ֆայլերի  ստեղծումը:  ԱՀ-ի  աշխատանքի  այս հատվածում օգտագործվում է հիշողության նմուշի կառուցվածքային մոդելը: ", "բջիջների ներարկման ձևերը Ծրագրային  ԱՀ-ում  ֆիզիկական  թերությունների ներարկումը նմուշի տոպոլոգիայի (GDSII) ֆայլի մեջ իրականցվում է  երկու  մեթոդով: ", "ծրագրավորման մեթոդի նկարագրությունը Թերություններ ներարկման այս եղանակը հնարավորություն է տալիս ավտոմատ ձևով  ներարկել  մեկ  կամ  ավելի  հետազոտվող  թերությունները՝  նմուշի  հիշողության բջիջների  մակերևույթի  տարբեր  դիրքերում:  Հհամեմատած  այն  եղանակի  հետ,  երբ հետազոտվող    թերությունը  տեղադրվում  է  SPICE  ձևաչափի  ֆայլում  անմիջապես հիշողության տարածքում թերություններ  ներարկելու մոտեցումը ունի մի քանի էական առավելություններ [41]: Առաջին առավելությունը այն է որ թերությունները ներարկվում են  հիշողության  տարածքի  նախապես  որոշված  հատվածում՝  որոշակի  համարի ֆիզիկական    տողում  և  սյունում:    Այս  որոշակիությունը  հետագայում  մշակման աշխատանքի  ընթացքում  հնարավորություն  է  ընձեռում  վերահսկել  հետազոտվող թեստային ալգորիթմի աշխատանքի յուրաքանչյուր քայլը, հետազոտման յուրաքանչյուր ժամանակային  հատվածում  և  մակարդակում:  Եկրորդ  առավելություն  է,  որ  ԱՀ  -ում հաճախականության    ժամանակացույցի  կիրառումը  հնարավորություն  է  տալիս.  ա) հաշվարկել թեստային  ալգորիթմի աշխատանքի  տևողությունը՝ BIST-ի աշխատանքային  հաճախականության  մասին  տվյալի  առկայության  դեպքում,  բ) - 93 - կատարել  թեստավորվող  ալգորիթմի    քայլ  առ  քայլ  կարգաբերումը,  որը  էապես լավացնում է ալգորիթմի կարգաբերման աշխատանքի գործընթացը [15], [17]: ", "Հիշողության  զանգվածի  ծրագրավորումը  իրականացվում  է  հիշողության ծրագրավորման  MPT  գործիքի  միջոցով:  Ինչպես  արդեն  նշել  ենք,  MPT  գործիքը ներարկում  է  թերություններ  պարունակող  բջիջները  բացառապես  հիշողության զանգվածի  մեջ՝  համաձայն  իրենց  ֆիզիկական  դիրքերի,  որոնք  նկարագրվում  են ծրագրավորման օրինակների  ֆայլում: ", "•  Հիշողությունը չի  անցնում  թեստավորումը:  Անսարք  սյուների քանակն  ավելի քիչ է,  քան  առկա  է  հավելյալության  մեջ:  Այս  դեպքում  հնարավոր  է  վերանորոգել սարքը  և թողարկվում  է վերանորոգման գործընթացը:  Վերանորոգման  դեպքում առո . . ............................................ ՀՆԹՏ-ի  կիրառումը  հնարավորություն  է  տալիս որոշակի համար ՀՆԹՅ֊ը SoC eFUSE Изз 3  . Memory  “ 55J > System  П Т Я Server CPU STAR Memory System Processor IEEE 1500 Wrapper 1 Wrapper 1 Wrapper IP RF DP SRAM RF J   STAR Memory System solution IEEE 1500 Memory  н Controller Memory ^ S y s t e m  eFlash/ STAR Memory System Ext  RAM MRAM Processor Wrapper eFlash/ MRAM Off chip memory Ex. DDR/LPDDR STAR Memory System Silicon Browser STAR Memory System Yield Accelerator Նկար  33-ում  ներկայացված  է  «Մենթոր  Գրաֆիքս»  ընկերության  ներկառուցված հիշողությունների  ՀՆԹՅ-ի ճարտարապետությունը:  Այն  կոչվում է  16ՏՏ6ոէ հ/16րոօ^61Տ1: ", "Ինչպես  նկատում  ենք  երկու  օրինակների  դեպքում  էլ  ճարտարապետությունն  ունի հիերարխիկ  կառուցվածք  և բաղկացած է նմանատիպ  կոմպոնենտներից: ", "Թերությունների ամբողջական գրադարանների առկայությունը հնարավորություն է ընձեռում լիարժեք ստուգել թեստավորման ալգորիթմները [41-44]: ", "ա. xxxxxxxx xxxxxxxx բ. xxxxxx1x xxx1xxxx xxxxxxxx xxxx10xx xx0xxxxx գ. Նկար 3.2.   ԾՕ ֆայլերի օրինակները - 94 - Նկար 3.2-ում ներկայացված են  ծրագրավորման ֆայլերի օրինակները, որոնք ստեղծվել են 4 տող և 8 սյուն ունեցող հիշողության բջիջների զանգվածի համար: Նկարի հիշողության  զանգվածը  ներարկված  է  «1»  տեսակի  թերություններով:  Նույն    ձևով՝  բ. օրինակին համաձայն, զանգվածում ներարկվելու են «0» տեսակի թերություններով: Իսկ գ. օրինակում ներկայացված է դեպք, երբ  «0» տեսակի թերությունները ներարկվելու են ներարկվելու են երեք բջիջներում՝ 7-րդ տողի 5-րդ սյան մեջ, 2-րդ տողի 4-րդ սյան մեջ և ներդրվում են հարևան բջիջներում: Թերությունների այդ տեսակ դիրքավորումը կարող է  բերել  յուրահատուկ  վարքագծով  անսարքությանը  և  լրացուցիչ  ստուգման  գործոն հանդիսանա  թեստային  ալգորիթմի  համար:  «1»  և  «0»  տեսակի  թերությունների օրինակներ են հանդիսանում առաջին գլխում նկարագրված, «ծրագրավորող» բջիջները (Տես՝  նկ.  1.25  և  նկ.  1.26):  Այս    «ծրագրավորող»  բջիջների  կիրառումը  ԹՆևՀԹԱՍ ծրագրային ԱՀ -ում համարժեք է «Stacked 0»  և «Stacked 1»  տեսակի անսարքությունների ներդրմանը հիշողության զանգվածի բջիջներում: ", "Նկար 34 DesignWare Տ/\\4Տ-ի օրինակ Բ ր օ շ Ց Տ Տ օ ր -ն   ունի  կարևորագույն  թեստավորման  և  վերանորոգման  ֆունկցիաներ (131Տ1,  Ց ^ ) :   Ներկառուցված  հիշողությունները  թեստավորվում  են  131Տ1-ի  միջոցով:  Այն բաղկացած է յուրաքանչյուր ներկառուցված հիշողության  կողքին գտնվող շարժիչից, որը գրում  է ալգորիթմորեն գեներացված նմուշները  հիշողության  մեջ և այնուհետև կարդում է  դրանք  հիշողությունից'  անսարքությունները  ֆիքսելու  նպատակով:  Ստուգման ալգորիթմները  կարող  են  նախապես  ներդրվել  131Տ1  մոդուլի  մեջ  կամ  կարգավորվել արտաքինից'  միկրոկոդի  միջոցով,  որը  կարող  է  պահվել,  օրինակ,  էներգաանկախ մշտական  հիշողության  մեջ:  Հիշողության  թեստավորումից  հետո  131[^  վերանորոգման և հավել|ալության  տեղաբաշխման  մոդուլը հայտնաբերում է գոյություն  ունեցող հավել|ալ տողերն  ու  սյուները  և  որոշում  է  դրանց  օպտիմալ բաշխման  տարբերակը:  Դրա  համար այն օգտագործում է  անսարքությունների նախապատմությունից ստացվող հիշողությունների  թերությունների  վերաբերյալ  ինֆորմացիան,  որը  տրամադրվում  է սխեմաներ  արտադրող գործարանների  կողմից:  Այսպիսով  Բ ր օ օ Ց Տ Տ օ ր -ը   տեղայնացնում և  վերանորոգում  է  հիշողության  անսարքությունները:  Տեղաբաշխման  մոդուլը  հավելյալ տողերի  և  սյուների  տեղաբաշխման  ինֆորմացիան  վերածում  է  հիշողությանը  հատուկ կոդի  և  գրանցում  է  այն  հիշողությունների  թերությունների  մասին  ինֆորմացիայի գրանցման  պահոցում:  Processor-ը  կարող  է  ստուգել  և  վերանորոգել  բազմաթիվ հիշողություններ  հաջորդական  կամ  զուգահեռ  ռեժիմում:  Բվհ-ում  հիշողության նմուշների  խմբավորումը  Processor-ի  միջոցով  պայմանավորված  է  մակերեսի, հզորության,  արագության,  համակարգային  տակտային  գեներատորի  և  բյուրեղի  վրա մոդուլների  տեղաբաշխման  գործոններով [69],  [70]  : ", "Հիշողության  մակերևույթում  թերությունների  մեխանիկական  ներարկման մեթոդը կիրառվում է այն դեպքերում, երբ ա) հետազոտվող թերությունը անհրաժեշտ է ներարկել հիշողության սարքի  հիշողության բջիջների զանգվածի սահմաններից դուրս՝ հիշողության  այլ  հանգուցներում;  բ)  ներդրվող  թերությունը  ունի  բարդ  կառուցվածք,  և այդ  թերությունը  ստանալու  համար  պետք  է լինում  բջիջի  տոպոլոգիայում մեխանիկական  ձևով  կատարել բարդ  ձևափոխություններ:  Բնականաբար, օգտագործվող  թեստային  ալգորիթմը  պարտավոր  է  հայտնաբերել  այդ  հանգույցներում գտնվող թերությունները ևս: ", "Ներդրված թերությունը Նկար 3.4.   Տողերի ապակոդավորման բջիջի տոպոլոգիայում ներարկված «դիմադրության բաց» թերություն Նկար    3.4-ում  տրված  է  թերության  ներդրման  օրինակ  տողերի    ապակոդա- վորման  հանգույցում՝  ազդանշանի ժամանակային  ուշացման վարքագծով անսարքություն  ստանալու  համար:  Ներարկման  արդյունքում  «pnt1»  և  «pnt2»  կետերի միջև  ընկած  դիմադրողական  անսարքության  մոդելը  հնարավորություն  է  ընձեռում մշակել, ստուգել և հղկել այդ անսարքությունը հայտնաբերող թեստային ալգորիթմը: ", "Դրանից  հետո  այն  փոխանցվում  է  Fuse  box-ին,  և  այնտեղ  պահված  ինֆորմացիայի հիման  վրա  իրականացվում  է  հիշողության  անսարք  բջիջների  վերականգնում: ", "հասցեավորման ձևերը հետևյալն են.   U  (անգլերեն  -  Upward  addressing)  –  Ներքևից  դեպի  վերև  հասցեավորում:  Այս հասցեավորմամ ժամանակ  թեստավորումը սկսվում  է զրոյական  հասցեից և աճելով շարունակվում  հասնում    է  հիշողության  նմուշի  վերջին    առավելագույն  (maximal)   D  (անգլերեն - Downward addressing - reverse to U)՝ – Վերևից դեպի ներքև՝ հակառակ է հասցեին, U հասցեավորման ձևին: ", "Աղյուսակ 4.2. Ելքային նեյրոնների սխալները բոլոր ազդանշանների համար Նեյրոնի № Sine Triangle Square Sawtooth Աղյուսակ  4.2-ում  բերված  տվյալներից  երևում  է,  որ  ստացված  սխալների  չափերը շատ փոքր են, ինչը վկայում է նրա մասին, որ ուսուցումը արդյունավետ է անցել բոլոր ազդանշանների տեսակների համար: "]}