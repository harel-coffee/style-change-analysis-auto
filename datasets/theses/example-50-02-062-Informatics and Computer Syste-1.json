{"paragraph_source_docs": [1, 1, 1, 2, 0, 1, 0, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 2, 0, 0, 1, 0, 0, 2, 2, 1, 2, 1, 2, 1, 1, 0, 1, 1, 1, 0, 1, 1], "paragraphs": ["-ի 𝑃𝑃𝑃𝑃𝑠𝑠 𝑃𝑃𝑃𝑃𝑖𝑖 ելքային  արժեքը  կարող  է  օգտագործվել  որպես մուտքային  արժեք 𝑃𝑃𝑃𝑃𝑖𝑖 հետագայում,  կամ  նեյրոնային  ցանցից  որպես  ելքային  արժեք: ", "արժեքը 𝑃𝑃𝑃𝑃𝑠𝑠 սահմանում է, թե որքանով է -ի ելքը ազդում -ի վրա: Կշիռը կարող է փոխվել 𝑤𝑤𝑖𝑖𝑗𝑗 ժամանակի  ընթացքում:  Ոսուցման  ընթացքում,  հիմնականում,  այս  մեխանիզմն  է, 𝑃𝑃𝑃𝑃𝑗𝑗 𝑃𝑃𝑃𝑃𝑖𝑖 որ հնարավորություն է տալիս -ին ադապտացվել նոր արդյունքներ ստանալու և ուսուցումը  իրականցնելու  համար:  Ինչպես  պարզ  կդառնա  ավելի  ուշ,  ամբողջ 𝑃𝑃𝑃𝑃 կշիռների մատրիցան  արտացոլում  է  նեյրոնային  ցանցի  գիտելիքներն  ու հմտությունները,  որոնք  ուսուցանվել  են  նախորդ  վերապատրաստման  միջոցով  և, 𝑊𝑊 հետևաբար, այն կոչվում են նեյրոնային ցանցի երկարատև հիշողություն: ", "Նկատենք,  որ շեմը  գործում  է  որպես  մուտքային  ազդանշանների  ֆիլտր: ", "Դիտարկենք այն դեպքը, երբ օբյեկտը հայտնվում է պատկերում նկարահանումը սկսելուց  ոչ  թե  սկզբում,  այլ  երկար  ժամանակ  անց(օր.  4  ժամ  անց),  երբ  պատկերում արևի  պայծառության  փոփոխության  պատճառով  բոլոր  պիքսելների  գունային արժեքները  փոխված  են:  Այս  դեպքում  XOR  բիթային  համենատության  արդյունքում վերադարձվում  է  0  բոլոր  պիքսելների  համար,  և  արդյունքը  կստացվի  լիովին  սև պատկեր,  օբյկետը չի  հայտնաբերվի:  Այսպիսով՝  ցանկացած  եղանակային փոփոխություն դեպքում մեթոդը չհայտնաբերելով օբյեկտը, չի ծառայի իր նպատակին: ", "Աղյուսակ 6. Հաղորդագրությունների ձևաչափը KFI Մարմին VH Salt N / 2 bit Գլխամաս Referrer | UID | MAC Քայլ  3 ․1-ում  օգտագործելով  հարցման  գլխամասում  առկա  PKID-ում  գտնվում  է համապատասխան  բանալին,  որի  միջոցով  կատարվում  է  հարցման  նույնականացում  և հրամանի բացահայտում։  Վերոհիշյալ գործողություններն իրականացվում են ատենախոսությունում  մշակված  ալգորիթմի  միջոցով,  որը  բաղկացած  է  չորս  հիմնական փուլից։ ", "𝑃𝑃𝑃𝑃 𝑎𝑎𝑖𝑖 Նեյրոնային  ցանցեր  կառուցելու  համար  օգտագործվել  են  մի  շարք  ակտիվացման ֆունկցիաներ,  որոնցից  քայլ/step  ֆունկցիան  ամենապարզն է:  Քայլ/step ակտիվացիոն  ֆունկցիայի  միջոցով -ի  ելքային  տվյալները  կարող  են  ընդունել կամ կամ ,  կախված  ակտիվացիոն  ֆունկցիայի  արժեքից  ցածր  կամ  բարձր 𝑃𝑃𝑃𝑃 լինելուց (Նկար 32): Այլ կերպ ասած, ունենք հետևյալը. 𝑦𝑦𝑖𝑖 = � որտեղ եթե հակառակ դեպքում 𝑎𝑎𝑖𝑖 > 0 𝑢𝑢 𝑎𝑎𝑖𝑖 = �� 𝑤𝑤𝑖𝑖𝑗𝑗𝑥𝑥𝑗𝑗 − 𝑠𝑠𝑖𝑖 Այնուամենայնիվ, աղմուկը  զտելու համար, հետևաբար բարելավվելու և իրական 𝑗𝑗=1 կայուն  վիճակի  հասնելու  նկատառումներով  որոշ  նեյրոնային  ցանցերի  համար սովորաբար օգտագործվում է սիգմոիդ ակտիվացումը, արտահայտված Նկար 33-ի ձևով. որտեղ 𝑦𝑦𝑖𝑖 = 𝑓𝑓𝑖𝑖(𝑎𝑎𝑖𝑖) = −𝑐𝑐𝑎𝑎𝑖𝑖 𝑢𝑢 𝑗𝑗=1 𝑎𝑎𝑖𝑖 = �� 𝑤𝑤𝑖𝑖𝑗𝑗𝑥𝑥𝑗𝑗 − 𝑠𝑠𝑖𝑖 Նկար 32.Քայլ/Step ակտիվացիոն ֆունկցիա: ", "𝑁𝑁 𝐶𝐶𝑘𝑘   = � 𝑃𝑃𝑃𝑃𝑖𝑖 𝑙𝑙=0 ⊕ 𝐾𝐾𝐾𝐾𝑖𝑖; (2.9) Այնուհետև  կատարվում  է  բացահայտած  հրամանի  հեշավորում`  օգտագործելով  P 𝐶𝐶𝑖𝑖   = (𝐶𝐶𝑘𝑘 ∗ 𝐶𝐶𝑁𝑁) ⊕  KFI; տողը  որպես  բանալի։  Հարցման  մարմնում  առկա  VH  հեշի  արժեքի  և  Hp(C  +  Salt)  հեշի արժեքի հավասարության դեպքում հարցումը համարվում է վավեր, և շարժական բանալին նոր հարցում է կատարում  այդ հրամանով  համապատասխան ինտերնետ իրին։ Հակառակ դեպքում  հարցումը  համարվում  է  անվավեր։  Գոյություն  ունի  անվավեր  հարցումների սահմանափակում,  որի  գերազանցման  դեպքում  կատարվում  է  հաջորդ  բանալու հաշվարկումը։ ", "Այստեղ -ն  հաստատուն  է,  որը  սահմանում  է -ի  աշխատանքում ներկայացված  շեմի  մակարդակը:  Այս  տեսակի  գործառույթի  առաջարկած  որոշ 𝑐𝑐 𝑃𝑃𝑃𝑃𝑖𝑖 առավելություններ  հետագայում  ավելի  պարզ  կդառնա  ( հայտնի  է  նաև  որպես «ջերմաստիճան»):  Որոշ  դեպքերում  դրա  արժեքը  կարող  է  սահմանվել արհեստականորեն  բարձր  մակարդակի  վրա,  որը  կստիպի  նեյրոնային  ցանցին ավելի  լավ  կատարել  աշխատանքը,  այսինքն  կբարձրանա  հավանականությունը ավելի կայուն վիճակին հասնելու: ", "«Մինիմում ավազահատիկներ և  մաքսիմալ հեռավորություն» խնդիր գրավիչ է  այնքանով,  որ  հանդիսանում  են  իրական  կյանքում  որոշ  բնական  երևույթների նկարագիր  ավազակույտի  մոդելի  վրա:  Մինչև  այժմ  չունենալով  ճշգրիտ  լուծում տվյալ  խնդրի  համար,  նեյրոնային  ցանցերի  օգտագործումը  արդիական  նպատակ դարձավ:  Նեյրոնային  ցանցերի  մշակման  հարմարավեր  միջոց  է  Neuroph  Studio-ն [51],  որը  հանդիսանում  է  նեյրոնային  ցանցերի  ֆրեյմվորկ  ստեղծված Java ծրագրավորման  լեզվի  միջոցով  և  նպատակաուղված  է  ընհանուր  նեյրոնային ցանցերի նախագծման և մշակման համար: Neuroph Studio-ն  պարունակում է նաև լավ  նախագծված  բաց  կոդով  Java  գրադարան  քիչ  քանակությամբ  նեյրոնային ցանցերի հիմնական  աշխատանքը սիմուլացնող հիմնական դասերի ամբողջությամբ:  Այն  ունի  նաև  շատ  հարմարատավետ  գրաֆիկական  միջավայր, որը հնարավորություն է տալիս առանց որևէ ծրագրավորման լեզվի տիրապետելու և  օգտագործելու  մշակել  նեյրոնային  ցանցեր:  Մեր  կողմից  նույնպես  ընտրվել  է Neuroph  Studio-ն  «մինիմում  ավազահատիկներ  և    մաքսիմալ  հեռավորություն» խնդրի ուսումնասիրության շրջանակներում նեյրոնյանին ցանցերի ճարտարապետության  մշակման,  տեստավորման  և  արդյունքների  ստացման համար: ", "Մասնավորապես, մեր կողմից առաջարկվող տարբերակում  [61] ընտրվել են բազմաշերտ բաղադրիչ(multilayer perceptron) տիպի նեյրոնային ցանցերի տեսակը մեկ մուտքային և մեկ ելքային նեյրոններով: Նեյրոնային ցանցերում օգտագործվել են  Bias  նեյրոնները,  որպես  փոխանցման  ֆունկցիա  ընտրվել  է  սիգմոիդ  տիպը, մինչդեռ  ուսուցողական  կանոնը  մշակվում  է  back-propagation  մեթոդաբանության հիման վրա: ", "Դիտարկված  նեյրոնային  ցանցերում  կա  միայն  մեկ  մակադակի  թաքնված շերտ  (Նկար  34),  որի  նեյրոնների  քանակությունը  տարբերակվում  է  նշված համեմատական անալիզներում: ", "Սկզբնական    պատկերի  յուրաքանչյուր՝  հատվածի  համար  հաշվարկում  ենք  3 առանձին  մեծություն՝  կարմիր,  կանաչ  և  կապույտ  գույների  ինտենսիվության գործակիցները (օր. ):  Յուր.  գործակից  որոշվում  է  տվյալ հատվածում  բոլոր  պիքսելերի  համպատասխան  գույնի(օր.  կարմիրի)  թվային արժեքների  միջին  թվաբանականով  (բանաձև  2.2-2.5):  Այլ  կերպ  ասած  գործակիցը ցույց է տալիս հատվածում գույնի միջին ինտենսիվությունը: ", "Ժամանակակից կլաստերային համակարգերում մուտքագրվող առաջադրանքների  ճշգրիտ  արդյունքներ  ապահովելուց  բացի  առկա  են  նաև  այլ խնդիրներ,  ինչպիսիք  են՝  մուտքագրվող  առաջադրանքների  հավասարաչափ բաշխվածության ապահովումը և էներգիայի խնայողությունը: ", "Ինչպես նշվեց բաժին 1.4-ում, արդեն գոյություն ունեն որոշակի ալգորիթմներ կլաստերային համակարգերում առաջադրանքների տեղաբաշխումը ավազակույտի մոդելի  հիման  վրա  կառուցված:  Մեր  կողմից  ստեղծված  SandScheduler  [46] ծրագրային  փաթեթն  իրենից  ներկայացնում  է  կլաստերային  համակարգերի աշխատանքը  սիմուլացնող  և  տեսաբերող  ծրագրային  փաթեթ,  որտեղ  խնդիրների բաշխիչի  աշխատանքը  հիմված  է  ոչ  միայն  ավազակույտի,  այլև  rotor-router համակարգի հիման վրա: ", "Վերը  նկարագրված  ալգորիթմը  ախատեցվում  է  E  պատկերի  համար  և հաշվարկվում են , , , գործակիցները (2.6): Այնուհետև հաշվարկում ենք  ընթացիկ  և  սկզբնական  պատկերների  գունային  արժեքների  տարբերությունները յուրաքանչյուր հատվածի համար (2.7): ", ", (2.6) (2.7) -ն եռաչափ վեկտոր է (բանաձ 2.8): ", "Կլաստերային  համակարգի  սիմուլացիան  կատարվել է  երկչափանի քառակուսային  ցանցի  վրա,  որտեղ  ամեն  հանգույց  իրենցից  ներկայացնում  են առանձին  հաշվողական  բլոկ,  այլ  կերպ  ասած  համակարգիչ  իր  առանձին հիշողության  տիրույթով:  Կախված  տվյալ  հանգույցում  առաջադարանքների ծանրաբերնվածության,  տվյալ  հանգույցն  է  որոշում  ուղարկել  առաջադրանքը հարևան  հանգույցներից  մեկին  թե  ոչ:  Դիտարկված  մոդելում  գոյություն  ունեն հետևյալ նախապայմանները. •  Մոդելում ունենք նախորոք մուտքագրված քանակությամբ քառակուսային  ցանցի  տեսք  ունեցող  համասեռ  հանգույցները, այսինքն  հանգույցներում  տեղադրված  հիշողության  տիրույթները, պրոցեսսները,  օպերատիվ  հիշողությունները  և  մնացած  բոլոր տեխնիկական պարամետրները նույն են: ", "•  Ամեն հանգույց ունի «հասանելի»  տիրույթ առաջադրանքների համար, որտեղ կարող են  տեղավորվել վերջավոր քանակությամբ խնդիրներ(տվյալ  դեպքում  ամենաշատը  3  առաջադրանք),  և առաջադրանքի տեղավորվելուն պես այն դիտարկվում է որպես արդեն կատարվող:  Եթե  հանգույցի  «հասանելի»  տիրույթում  կան  3 արաջադրանքներ,  ապա  համարվում  է,  որ  տվյալ  հանգույցը աշխատում է միաժամանակ այդ 3 առաջադրանքների իրականացման շուրջ: ", "•  Հանգույցները միացված են իրար կապերով և ամեն հանգույց կարող է ունենալ  ամենաշատը  4  հարևան  (համակարգում  դիտարկվում  է  նաև հանգույցների անսարքության դեպքեր տեխնիկական պատճառներով) •  Մուտքագրվող  առաջադրանքերը  միանման  են  և  տարբերվում  են կատարման համար անհրաժեշտ ժամանակով միայն: Ինչպես նաև կա հնարավորություն մուտքագրվող առաջադրանքերին տալ առաջնահերթություն: ", "Նկ.11. Փուլերի ընթացքում R մատրիցի ձևափոխման օրինակը Աղյուսակ 7. Առաջարկված գաղտնահամակարգի արագագործության համեմատականը Կատարման քանակը Ժամանակը միլիվայրկյաններով AES 128 RSA 1024 CMP SHA 256 CMP SHA 384 CMP SHA 512 Եթե  հարցումը  պարունակում  է  այնպիսի  տվյալներ,  որոնք  հրամաններ  չեն,  ապա իրականացվում  է  համապատասխան  վերահասցեավորում`  օգտագործելով  HTTPS արձանագրությունը, որի կապի հաստատման գործառույթի (handshake)  ընթացքում որպես գաղտնագրման  ալգորիթմ    ընտրվում  է  AES։  Շարժական  բանալին,  ստանալով  անլար ցանցին  միացած  սարքավորումներից  հարցումներ,  նախքան  վերահասցեավորումը ստուգում է  այդ հարցումների վերջնական հասցեներին համապատասխան կարգաբերումների  գոյությունը։  Եթե  այդպիսի  կարգաբերումներ  գոյություն  չունեն, հարցումն ուղարկվում է առանց փոփոխության[44]: ", "Ավազահատիկի  տեղադրումը  որոշակի  հանգույցում  կարող  է  որեւէ ազդեցություն չունենալ կամ կարող է առաջացնել փլուզման ալիքներ, որոնք կարող  են  կասկադային  ազդեցություն  ունենալ  բազմաթիվ  հանգույցների վրա:  Հիմնական  հետաքրքրությունը  այս  մոդելի  շրջանակներում  այն  է,  որ ցանցերի  սիմուլյացիայի  ժամանակ,  երբ  ցանցը  բերվում  է  կրիտիկական վիճակի,  այդ  ժամանակ  համակարգի  կորելացիայի  երկարությունը  և տևողությունը  ձգտում  են  անվերջության  առանց  համակագրի  որևէ ատրիբուտի  փոփոխության:  Ավազակույտի  մոդելում  մեկ  ավազահատիկի ավելացումը  որևէ  հանգույցին,  կարող  է  չհանգեցնել  որևէ  փլուզման,  կամ կարող  է  հանգեցնել  հանգույցների  զանգվածային  փլուզմումների:  Մենք օգտագործում  ենք  վերոնշյալ  առանձնահատկությունը  SandScheduler համակարգում դինամիկ խնդիրների տեղաբաշխման համար, որը տեսենալի է  տվյալ  համակարգում  «Debug  enabled»  վիճակում,  Նկար  35:  Այսպիսով SandScheduler  համակարգում  առաջադրանքների  ավազակույտի  մոդելի աշխատանքի  սկզբունքով  տեղաբաշխման  դեպքում  համակարգում  ունենք դատարկ  առաջադրանքներ,  որոնք  չեն  կարող  զբաղեցնել  հանգույցների «հասանելի» տիրույթները: Դատարկ առաջադրանքների իմաստը կայանում է նրանում,  որ  դրանք  ապահովվելով  բավարար  քանակ՝  մոդելը  պահում  են կրիտիկական  վիճակում՝  իրականացնելով  ավազակույտի  մոդելին  բնորոշ փլուզումները,  դրանով  իսկ  ապահովվելով  իրական  առաջադրանքների տեղաշարժը  ցանցում:  Իրական  խնդիրը,  հայտնվելով  հանգույցում,  որի «հասանելի»  տիրույթում  առկա է  ազատ  տեղ, զբաղեցնում է համապատասխան տեղը, դուրս գալով ավազահատիկի մոդելի փլուզումների շարքից,  որտեղ  դրա  դուրս  գալուն  պես  ի  հայտ  է  գալիս  նոր  դատարկ առաջադրանք որպես փոխարինող: ", "Նկար 35.SandScheduler ծրագրային փաթեթ: ", "Վերոհիշյալ պահանջներին համապատասխանում են Intel-ի կողմից արտադրվող և համեմատաբար  բարձր  հաշվողական  ռեսուրսներ  ունեցող  ինտերնետ  իրերը:  Տվյալ սարքերը տրամադրում են համապատասխան միջավայր` տեխնիկական փոփոխություններ և լրացումներ կատարելու համար։ Գոյություն ունեցող հավելվածների միջոցով հնարավոր է  հեշտությամբ  փոխել  այդ  սարքերի  կարգավորումները  և  կառավարել  բոլոր  ծրագրային գործընթացները: Տվյալ սարքերում հնարավոր է տեղադրել Ubilinux, որը  հնարավորություն է  տալիս  առանց  բարդությունների  ինտեգրել  անլար  ցանցային  կապի  համար նախատեսված ծրագրային փաթեթները: ", "Ինչպես  նաև  անդրադառնալով  rotor-router  համակարգի  բաժին  2,3-ում նկարագրված  առանձնահատկությանը,  կարող  ենք  համոզված  լինել,  որ ստատիկ(կատարման  ժամանակը  անվերջ  է)  առաջադրանքների  մեկ  կետից ավելացման  դեպքում  կլաստերային  համակարգում  կունենանք  համասեռ բաշխվածություն  տվյալ  հանգույցի  շուրջ,  կամ  այլ  կերպ  ասված,  մեկ հանգույցում  առաջադրանքներ  ավելացնելու  դեպքու  կարող  ենք  համոզված լինել,  որ  տվյալ  հանգույցից հեռավորություն  ունեցող  հանգույցում  լցված առաջադրանքների քանակը չի կարող ավել լինել հեռավորության վրա գտվնող  հանգույցի  առաջադրանքների  քանակից:  Ասեմ  ավելին  մեր  կողմից r − 1 առաջ է քաշվել հիպոթեզ, որ դինամիկ(կատարման ժամանակը վերջավոր է) խնդիրների  դեպքում  ևս  կունենանք  նույն  պատկերը:  Տրված  հիպոթեզի իսկությունը երևում է SandScheduler ծրագրային համակարգի միջոցով նկար Նկար 36. SandScheduler-ը rotor-router վիճակում: ", "SandScheduler համակարգի տեսքը պատկերված է Նկար 38-ում, որտեղ ՛Create'  կոճակով ստեղծվում է համապատասխան չափի մատրից/կլաստեր: ", "համապատասխանաբար  նաև  խնդիրների  տեղաբաշխման  պրոցեսը ստեղծելով նշված քանակությամբ մատրիցներ, և վերջում տպում է ստացված միջին արդյունքները «Statistics» բաժնում համար  պահանջվում են գրաֆի  տարբեր ներկայացումներ, կա երկու տեսակ ներկայացում. a.  Մեծ  շրջաններ,  որը  հարմար  է  ավազահատիկների  փլուզումը  ցույց տալու համար նկար 37 b.  Մեծ ուղղանկյուններ, որը հարմար է ցույց տալու խնդիրների բաշխման անիմացիան, որտեղ յուրաքանչյուր վանդակ պետք է ցույց տա իր մեջ գտնվող,  կատարվող  և  հերթի  մեջ  գտնվող  խնդիրները  նկար  35: ", "Նկար 37.SandScheduler համակարգում շրջաններով տեսաբերում: ", "տեղաբաշխումը  կատարում  է  ավազակույտի  մոդելի  աշխատանքային սկզբունով,  իսկ  նշված  դեպքում  կիրառվում  է rotor-router  մոդելի սկզբունքները: ", "ստեղծելով նշված քանակությամբ մատրիցներ, և վերջում տպում է ստացված միջին արդյունքները ՛Statistics' բաժնում գումարների հարաբերությունը ընդհանուր վանդակների թվին ավազահատիկներ պարունակող վանդակների գումարների հարաբերությունը ընդհանուր վանդակների թվին տակտերի  քանակը  և  մկնիկի  քլիքի  միջոցով  ավելացվող  խնդիրների քանակը լռությամբ որքան կարևոր են մուտքագրվող խնդիրները Նկար 38.SandScheduler համակարգի տեսքը: ", "Պատկերների  բուրգի  կառուցումը.  Բուրգի  հիմք  է  հանդիսանում  տեսաշարից վերցված  օրիգինալ  կադրը,  որը  ենթարվում  է -գործողության,  ապա  պատկերը փոքրացվում  է գործակցով  մի  քանի  անգամ  (Նկար  2.9)։  Սա  թույլ  է  տալիս զգալիորեն  նվազեցնել  պատկերում  աղմուկը  և  ֆոնային  զատման  միջոցով պատկերների  համեմատման  ժամանակ  համեմատել  փոքր  պատկերներ,  որն  էլ  իր հերթին կնպաստի ալգորիթմի արագագործությանը։ ", "Հաշվի առնելով վերոգրյալը` առաջարկվում է իրերի ինտերնետի մոդելը կառուցել ուղղորդված  ծառի  տեսքով,  որտեղ  հանգույցներն  ինքնակազմակերպվող  են,  իսկ հրահանգների  և  տվյալների  փոխանակումը  հանգույցների  միջև  վերահսկվում  է տեղեկատվության անվտանգության և ամբողջականության մեխանիզմների միջոցով։ ", "Այդ  նպատակով  միջավայրի  գործառույթների  ավտոմատացման  համար առաջարկվում է ներմուծել հանգույցներին հաղորդվող հաղորդագրությունների` աղյուսակ գաղտնիքի (մյուսների համար անվերծանելի)  մասնաբաժինը։ ", "Եզրակացություն երրորդ գլխի վերաբերյալ Այս  գլխում  նկարագրվեցին  CA  Simulator,  SandGame,  SandScheduler ծրագրային փաթեթները, ինչպես նաև նկարագրվեցին «մինիմում ավազահատիկներ և մաքսիմալ հեռավորություն» խնդրի լուծմանը նպատակաուղղված մշակված նեյրոնային ցանցերը: ", "Գործառույթների  կառավարումը  կատարվում  է  ձևաչափում  նկարագրված հաջորդականության  շնորհիվ,  որը  M  չափի  զանգված  է  բաղկացած  168  բայթ երկարություն ունեցող Ni տեղեկատվությունից (աղյուսակ 9), որտեղ առաջին 128 բայթը եզակի նշիչ (UID) է կամ IP6 հասցե։ Հասցեին հաջորդող 32 բայթ երկարությամբ Լ տվյալը ցույց  է  տալիս  ձևաչափի  մարմնում  գտնվող  գաղտնագրված  տեղեկատվության  չափը: ", "Վերջին  8  բայթը՝  D-ն,  ցույց  է  տալիս  համապատասխան  ինտերնետ  իրի  գործառույթի խորությունը գործառույթների ծառում։ ", "Նկար 2.11․ Օբյեկտի հայտնաբերման համար մշակված իտերացիոն մեթոդը: ", "Մեթոդի  արագագործությունը  ուղիղ  համեմատական  է  կատարվող  ընդհանուր պիքսելային ստուգումների հետ։ ", "ՎԵՐԼՈՒԾՈՒԹՅՈՒՆԸ և ԳՆԱՀԱՏԱԿԱՆԸ Ատենախոսության  չորրորդ  գլխում  զետեղված  են  ինքնակազմակերպվող համակարգերի  ուսումնասիրմանը  նվիրված  ծրագրային  փաթեթների  և  արդեն գոյություն ունեցող լուծումների միջև համամետական վերլուծությունը: ", "Եզրակացություն.  Այսպիսով՝  մշակվել  է  մեթոդ,  որը  տեսաշարում  հայտնաբերում  է օբյեկտները,  որոնք  կարող  են  լինել  թաքնված  (մարդու  աչքի  համար  աննկատ  և ֆոնային  պատկերին  մեծ  գունային  նմանություն  ունեցող)  և  անհայտ  (նախապես չսահմանված):  Ընդ որում՝ օբյեկտը կարող է լինել թե՛ անշարժ, թե՛ շարժման մեջ: ", "գոյություն ունեցող լուծումների համամետական վերլուծությունը: ", "Ալգորիթմը չի սահմանափակում փնտրվող օյեկտները ըստ տեսակի: ", "Նշենք  նաև,  որ    «CA  Simulator»  փաթեթի  միջոցով  կարելի    է  կատարել բազմաթիվ  տարանջատված  համատեղ  հետազոտություններ,  և  պահպանել հետազոտությունների  ընթացքում  կամայական  պահին  մոդելի  վիճակը՝  հետագա ինչպես  համատեղ,  այնպես  էլ  միանձնյա  հետազոտությունների  համար:    «CA Simulator»-ը ստեղծվել է օգտագործելով .Net միջավայրը և C# լեզուն, իսկ սերվերի տեղակայման  համար  ընտրվել  է  Microsoft  Azure-ը:  Իրականացման  ընթացքում պահպանվել  են  ՕԿԾ-ի  (OOP)  բոլոր  ստանդարտները  և  SOLID-ի  սկզբունքները, որոնք  խիստ  անհրաժեշտ  են  այնքանով,  որ  հնարավորություն  են  ընձեռում  ավելի դյուրին կերպով կատարել համակարգի ֆունկցիոնալ ընդլայնումը և հավելումը այլ բջջային ավտոմատերի մոդելներով: ", "Աղյուսակ 1.Հասանելի համակարգերի և նախագծված CA Simulator-ի համեմատական վերլուծություն: ", "Քանի  որ  ձևաչափը  տեղեկություն  է  պարունակում  տվյալ  հանգույցից  դեպի  այլ՝ տրամաբանորեն  հաջորդ  հանգույց տանող  ճանապարհի  վերաբերյալ,  որը  փաստորեն ենթադրում  է  ցատկ  դեպի  ծառի  ավելի  ստորին  մակարդակում/մակարդակներում տեղակայված  մեկ  կամ  մի  քանի  հանգույցներ,  ապա  ստորին  մակարդակի  ամեն հանգույց՝  ստանալով  նշված  ձևաչափի  հաղորդագրությունը,  նախ՝  փորձում  է  իր կարգային  համարը  գտնել  այդ  հաղորդագրության  մեջ,  որից  հետո  վերծանելով գաղտնիքի իր մասնաբաժինը և արտադրելով համապատասխան հեշը, կառավարումը փոխանցում  է  հաջորդ  հանգույցին։  Արդյունքում  բոլոր  անհրաժեշտ  հանգույցների կողմից մշակված և արտադրված հեշ արժեքների համախումբը վերահսկում է ցանցով փոխանակվող  տվյալների  և  գործառույթների    ամբողջականությունը,  իսկ  բաշխվող բանալիների  ենթակառուցվածքը՝  այդ  նույն  տվյալների  և գործառույթների անվտանգությունը։ ", "տարբերակների ժամանակների համեմատական վերլուծություն: ", "Հիմնվելով  բաժին  2,1-ում  նկարագրված չափանի  խորանարդային ցանցերում  աստղային  ծածկույթները  նկարագրող  բանաձևի  վրա,  կատարվել  է չափանի խորանարդային ցանցերում ավազակույտի աբելյան մոդելի աշխատանքի զուգահեռացումը:  Ինչպես  նշվել  է  բաժին  1,2-ում,  արդեն  գոյություն  ունեն ավազակույտի    մոդելի  սիմուլացիայի  արագագործությանը  նպատակաուղված ծրագրային փաթեթներ: ", "Առաջարկվող լուծման հիմքում ընկած է զուգահեռ ծրագրավորման և խնդրի զուգահեռացման  մեթոդաբանությունը:  Տարաբնույթ  հաշվարկների  զուգահեռ իրականացումը  թույլ է տալիս առավել մեծ ու բարդ խնդիրները  տրոհել մասերի և այն  հաշվարկել  իրարից  անկախ  գործողություններով,  դրանք  իրականացնելով միաժամանակ։  Խնդիրների  լուծման  նման  մոտեցումը  մարդկությանը  հայտնի  էր վաղուց,  սակայն  նրա  հանդեպ  հետաքրքրվածությունը  մեծացավ  միայն  վերջին տասնամյակում,  երբ  սկսվեցին  արտադրվել  մեկից  ավելի  պրոցեսորներ  ունեցող համակարգիչներ և մշակվեցին մեթոդներ ցանցային ծրագրավորման զարգացման համար՝ այսինքն իրական հնարավորություններ  ստեղծվեցին որևէ խնդրի իրարից անկախ  մասերը  զուգահեռ  լուծել՝  օգտագործելով  մի  քանի  պրոցեսորներ։  Իսկ քանի  որ  արդեն  աշխարհում  բոլոր  համակարգիչները  բազմապրոցեսոր  են,  դա նշանակում է, որ մինչ այս միայն մեկ հաշվարկող պրոցեսորի համար նախագծված բոլոր ալգորիթմները կորցնում են իրենց արդիականությունը, եթէ դրանք կարելի է լուծել զուգահեռացված տարբերակով։ ", "Հաջողության  դեպքում  հանգույցը  որոշում  է  ստացված  հաղորդագրությունը փոխանցել անհրաժեշտ հանգույցին՝ ըստ UID-ի։ Ամեն հաջորդ հանգույցում ձևավորված հեշերի  շղթան  երաշխիք  է՝  ցանցի  գործողությունների  վավեր  լինելը  հավաստիացնելու համար։ ", "Քննարկվող  երկրորդ  տարբերակի  առավելությունը  ի  տարբերություն  առաջինին այն  է,  որ  2  կամ  ավել  գագաթների  միաժամանակյա  փլուզումը  չի  հանգեցնի միևնույն  հանգույցին  միաժամանակյա  դիմումի  խնդրի,  որի  հետևանքով  մոդելի կայունացման ժամանակը կերկարեր։ ", "Դիտարկենք  զուգահեռացման  ալգորիթմներից  առաջինը։  Ավազակույտի մոդելների  օրինակներից  մեկը  պատկերված  է  Նկար  40-ում:  Այս  օրինակի ուսումնասիությունը  հնարավորություն է  տվել  կապ  տեսնել  և  ստեղծել ինտերվալային  ներկումների  և  ավազակույտի  մոդելի  միջև,  ինչպես  նաև դիտարկվել  են  ինֆորմացիոն  ինտերպոլացիա  տալու  համար,  որի  միջոցով հայտնաբերվել  են  ցանցում  ինֆորմացիա  տարածելու  արդեն  հայտնի  կարճագույն ճանապարհներ։ "], "source_docs_file": "Informatics and Computer Systems.json"}