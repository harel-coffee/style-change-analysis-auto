{"paragraph_source_docs": [0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 2, 0, 1], "paragraphs": ["Հեշ  ֆունկցիան  համարվում  է  միակողմանի,  եթե  M  կամայական  երկարության հաղորդագրությունը  փոխակերպվում  է  ոչ  գծային  հաշվարկների  միջոցով  և  արդյունքում ստեղծում  է  h(M)  հեշավորումը,  որն  էլ    կարող  է  ունենալ  հաստատուն  կամ  փոփոխական երկարություն:  Այս  ֆունկցիաները  կարող  են  դասակարգվել  երկու  դասերի՝ գաղտնագրային և ոչ գաղտնագրային: Վերոհիշյալ ոչ գաղտնագրային  հեշ ֆունկցիաներն օգտագործվում են հիշողության և պահեստավորված տվյալների ինդեքսավորման համար։ ", "Գաղտնագրային  հեշ  ֆունկցիաների  կարևոր  հատկություններից  են  բախումը  և կայունությունը:  Հեշ  ֆունկցիայի  բախումը    երկու  տարբեր  հաղորդագրության  (M1  և  M2) հեշերի  արժեքների  համընկնումն  է,  երբ    h  (M1)  =  h  (M2):  Հեշ  ֆունկցիայի  բախումների բացահայտումն  իրականացվում  է  պատահական  մուտքային  արժեքների  փորձարկման եղանակով  [46,  47,  48]:  Կարևոր  է  նշել,  եթե  հեշավորված  տվյալի  իմացությամբ հարձակվողը    կարող  է  գտնել  M  հաղորդագրությունը,  որն  արտահայտվում    է  h  (M)  =  H բանաձևով,  ապա    հեշավորման  ֆունկցիան    կայունություն  ապահովող  չի  համարվում: ", "Այսպիսով,    նախօրոք  տրված  ելքի  համար  հաշվողական  առումով  անհնար  է  հաշվարկել այն  մուտքը,  որն  արտադրում  է  միևնույն  ելքը:  Նաև  կայունություն  ցածր  ցուցանիշի արդյունք  է  համարվում  հեշ  ֆունկցիայի  մուտքային  և  ելքային  արժեքների  իմացության դեպքում  մեկ  այլ  մուտքային  արժեք  գտնելու  հնարավորությունը,  որի  ելքային  հեշը կհամընկնի սկզբնական հաղորդագրության ելքային հեշի հետ: ", "Հեշ  ֆունկցիան    կարող  է  դասակարգվել  բանալիով  կամ  առանց  բանալու հեշավորման  ֆունկցիաների:  Բանալիով  հեշ  ֆունկցիան  ունի  լրացուցիչ  մուտք,  որն ընդունված  է  նշանակել  k  պարամետրով:  Արդյունքում  առանց  k-ի  իմացության  hk(M) հեշավորման աշխատանքն անհնար է իրականացնել։ Ինչպես նաև հաղորդագրության և ելքային  հեշի  իմացության  պարագայում  բանալու  որոնումը  հաշվողական  առումով նույնպես անհնար է: ", "Հեշավորման  ֆունկցիաների  մեծամասնությունը,  ինչպիսիք  են՝  MD4,  MD5,  MD6, SHA1  և  SHA2  հեշ  ֆունկցիաները,  օգտագործում  են  Merkle–Damgård  սխեման  և  բիթային գործողություններ  կատարում  մուտքային  հաղորդագրության  վրա՝      վերջնական  հեշ արժեքը ստանալու նպատակով [47, 49, 50]։ ", "Անկախ  հանգույցները  կարող  են  միաժամանակ  փլուզվել`  բերվել  կայուն վիճակի, առանց «խանգարելու» միմյանց: ", "Քաոսային մեթոդները բավարարում են վերոհիշյալ կանոններին, սակայն քաոսային հեշ ֆունկցիաների մեծամասնությունը որպես ոչ անվտանգ սխեմա օգտագործում է Merkle– Damgård կամ այդ սխեմայի տարբերակը: ", "ծառի առկայության դեպքում: ", "Որոշ  կրիպտոարժույթներ  օգտագործում  են  Sha256  HashCash  ֆունկցիան,  որպես՝ այսպես  կոչված  «աշխատանքի  ապացույց»,  որն  ապահովում  է  հանգույցների  կատարած գործառույթների  անվտանգությունը։  HashCash-ն  օգտագործվում  է  նաև  սպամերի կանխարգելման  համար՝    ստիպելով  գրոհող  կողմին  ծախսել  որոշակի  ժամանակ ցանկացած  հաղորդագրության և էլեկտրոնային նամակին կից ուղարկվող հեշի ստեղծման հաշվարկների  վրա:  Եթե  հաղորդագրությունը  կամ  էլեկտրոնային  նամակը  ստացվում  է առանց հեշի, կամ ստացված հեշը վավերականացում չի ացնում, ապա այն մերժվում է և համարվում՝  սպամ:  HashCash-ը  Proof-of-Work  (POW)  ֆունկցիայի  իրականացումն  է,  որը հայտնի  է  նաև,  որպես  աշխատանքային  ֆունկցիա,  հետաձգման  ֆունկցիա  կամ պայքարի համար: Այս ֆունկիցայի գաղափարը այն է, որ նախքան հարցում ուղարկելը այդ հարցմանը պետք է կցել լուծված որոշակի հաշվողական խնդիր, որն այնուհետև հնարավոր է  վավերացնել  հարցումն  ընդունող  կողմում:  Այսպիսով,  սահմանափակ  հաշվողական ռեսուրսների  պատճառով  վերոհիշյալ  հարցումների  ընդհանուր  քանակը,  որը  կարող  է ուղարկել  մեկ  համակարգիչը,  բավականին  նվազում  է  և  դառնում  սահմանափակ:  Այս լուծումն  օգտագործվում  է  էլեկտրոնային  փոստով  ուղարկվող  սպամերի  քանակը նվազեցնելու համար: ", "Գոյություն  ունեն  տարբեր  POW  ֆունկցիաներ,  և  անհրաժեշտ  է  դիտարկել  ստորև թվարկված այդ ֆունկցիաների ընդհանուր բնութագրերը. •  POW ֆունկցիաները պետք է լուծեն հաշվողական խնդիրներ, որոնց լուծման համար պահանջում են որոշակի քանակությամբ ռեսուրսներ։ ", "•  Պետք  է  բացառվի  որևէ  լուծման  գոյությունը,  որը  թույլ  կտա  գեներացնել արդյունքներն  ավելի  արագ  առանց հստակ որոշված հաշվարկների իրականացման: ", "•  Կատարած հաշվարկների լուծման արդյունքը պետք է հնարավոր լինի հեշտությամբ և արագ վավերացնել, քանի որ այն կատարվելու է սերվերային միջավայրում, որտեղ վավերացում պահանջող հարցումների քանակը կարող է բավականին շատ լինել: ", "•  POW  ֆունկցիայի  լուծման  արդյունքում  առաջացած  ելքային  տվյալները  պետք  է ունենան  փոքր  ծավալ,  քանի  որ  այն  պետք  է  փոխանցվի  համացանցով  այլ վերջնակետ, որտեղ կկատարվի ստուգումը: ", "•  POW  ֆունկցիայի լուծման  դժվարությունները  պետք  է լինեն  հնարավորինս կարգավորվող: ", "POW  ֆունկցիաների  առավել  տարածված  տեսակն  օգտագործում  է  պրոցեսորի հաշվողական  ռեսուրսները:  Բացի  այդ,  առաջարկվել  են  նաև  POW  այլ  ֆունկցիաներ, ինչպիսիք  են  հիշողության  ֆունկցիաները:  Այս  տեսակի  ֆունկցիաները  ավելի  դժվար  է իրացնել,  քանի  որ  հիշողության  ծանրաբեռնման  համար  անհրաժեշտ  ժամանակը  ավելի շատ  է,  քան  CPU  ծանրաբեռնման  ժամանակը։  Նաև  հիշողության  ֆունկցիաների գործածումը բարդություն  է ստեղծում ցածր պարամետրերով համակարգիչների կիրառման դեպքում:  Հաշվի  առնելով  վերոհիշյալ  թերությունները՝ ատենախոսությունում նախընտրությունը    տրվել  է  պրոցեսորի  հետ  աշխատող  POW  ֆունկցիաներին,  որն այսուհետև կնշվի որպես դասական POW ֆունկցիաներ։ ", "Դասական POW ֆունկցիաների լուծման խնդիրները հիմնված են NP որոնողական խնդիրների վրա, երբ խնդրի լուծման համար պետք է կատարվի որոնում, մինչդեռ սերվերը պետք  է  ստուգի  միայն  մեկ  առաջարկված  լուծում:  Սովորաբար  վերոնշյալ  խնդիրների բնույթից  ելնելով  լուծման  համար    անհրաժեշտ  հաշվողական  գործառույթըկարող  է իրականացվել միայն վիճակագրականորեն: ", "Աշխատանքի  ավարտի  պահը  ֆիքսելու  երկրորդի  թերությունը  հետևյալումն է:  Եթե  մենք  կատարում  ենք  զուգահեռ  աշխատանք  ,  այսինքն  ամեն  հոսք կատարում  է  իրեն  հատկացված  աշխատանքը,  ապա  ամեն  հոսք  պարտավոր  է աշխատել  isBoardReady  փոփոխականի  հետ  թափում  կատարելու  դեպքում,  իսկ քանի  որ  բոլորը  միաժամանակ  միևնույն  հիշողության  հետ  աշխատել  չեն  կարող, ստիպված  պետք  է  շատերը  սպասման  վիճակի  անցնեն,  իսկ  դա  երկարացնում  է ալգորիթմի աշխատանքի ժամանակահատվածը: ", "Իրականացման պարզության և միաչափ քաոսային արտապատկերումների  բարդ վարքագիծի  շնորհիվ  քաոսային  հեշ  ֆունկցիաները  լայն  տարածում  են  գտել:  Լոգիստիկ արտապատկերումը  նկարագրած  արտապատկերումներից  մեկն  է,  որը  սահմանվում  է ստորև բերված բանաձևով: ", "(3.2) 𝑋𝑋𝑛𝑛+1 = 𝐿𝐿𝑟𝑟(𝑋𝑋𝑛𝑛) = 𝑓𝑓 ∙ 𝑋𝑋𝑛𝑛 ∙ (1 − 𝑋𝑋𝑛𝑛) Չնայած այս արտապատկերումն ունի (0, 4] միջակայք r պարամետրի համար, այն քաոսային  վարքագիծ  է  դրսևորում  միայն  [3.57,  4]  միջակայքում,  և  նույնիսկ  այս միջակայքում  արտապատկերումը  որոշ  չափանիշների  դեպքում  կորցնում  է  իր  քաոսային վարքագիծը: Նկ. 13-ում ցույց է տրված երկատման դիագրամը: ", "Երկչափ  ցանցերի  դեպքում  ունենք  համեմատական  վերլուծություն՝ պատկերված Գծապատկեր 2, 3, 4, 5-ում: ", "Բետա  բաշխումների  համար,  որտեղ  α=β-ի  և առավելապես  բաշխված արժեքները գտնվում  են  [0,  0.1)  և  (0.9,  1]  միջակայքում,  հեշտ  է  գրոհման  ենթարկել  առաջարկված մեթոդը:  LS  արտապատկերման  մեկ  այլ  թերությունն  այն  է,  որ  սինուսոյիդային արտապատկերումից  ելքի  ստացումը  լոգիստական  արտապատկերման    համեմատ, կատարվում է ավելի դանդաղ: ", "Նկ. 14. LS արտապատկերման երկատման դիագրամը Մեկ  այլ  լուծում    ներկայացվել  է    Սան  Յում  և  Սրիչավենգսափի  կողմից  [54]:  Այն հիմնված  է սինուսոիդային  ոչ  գծայն  քաոսային  համակարգի  ստեղծման  վրա: ", "Բազմապատկման,  գումարման  և  հանման  գործողությունները  սովորաբար  հեշտությամբ կատարում է  պրոցեսորը ցածր մակարդակում, բայց եռանկյունաչափական գործողությունները,  ինչպիսիք  են  sin  և  cos,  չեն  իրականացվում  պրոցեսորի  կողմից ուղղակի  հրամաններով,  այլ  օգտագործում  են  գրադարաններ,    որոնք  իրենց  հերթին օգտագործում  են  ցածր  մակարդակի  գործողություններ:  Հեշ  ֆունկցիաներում  այսպիսի գործողությունների կիրառումը զգալիորեն նվազեցնում է հեշավորման արագությունը: Եթե բազմապատկման գործողության համար անհրաժեշտ է  4 ժամանակային ցիկլ, ապա sin գործողության համար այն կարող է հասնել 90 – 100 ժամանակային ցիկլ: ", "Իրականացման  պարզությունը,  պատահական  դրսևորումը,  արագությունը  և անվտանգությունը  հեշ  ֆունկցայի  կարևոր  բնութագրերից  են,  որոնց  միաժամանակյա ապահովումը  հեշ ֆունկցիայում  բարդ խնդիր է։ ", "Քաոսային  հեշ  ֆունկցիաները  կարելի  է  դասակարգել  տարբեր  դասերի՝  կախված իրենց քաոսային սխեմայից, հաշվարկների զուգահեռացման կարողությունից և այլն: Բայց հաշվի  առնելով,  որ  քաոսային  հեշ  ֆունկցիաները  հիմնված  են  քաոսային արտապատկերման վրա, հեշտությամբ կարելի է դասակարգել [55, 56]. •  արտապատկերման վրա հիմնված պարզ հեշ ֆունկցիաներ, •  արտապատկերման վրա հիմնված բարդ հեշ ֆունկցիաներ, •  նոր քաոսային համակարգի վրա   հիմնված հեշ ֆունկցիաներ, •  զուգահեռացում  ապահովող  և  բարդ  կառուցվածք  ունեցող  քաոսային  հեշ ֆունկցիաներ, •  քաոսային արտապատկերման միջոցով ձևափոխված դասական հեշ ֆունկցիաներ: ", "Արտապատկերումների  վրա  հիմնված  պարզ  քաոսային  հեշ  ֆունկցիաների մեծամասնությունը  մյուս  դասերի  համեմատ  օգտագործում  է  պարզ  ալգորիթմ՝  միաչափ քաոսային  արտապատկերումներով:  Այս  դասի  որոշ  հեշ  ֆունցիաներում  կիրառվում  է տենտային արտապատկերում, որի ելքային շարքը ստացվում է Merkle–Damgård սխեմայով: ", "Տենտային  արտապատկերման  խնդիրները,  ինչպիսիք  են  ոչ  քաոսային  մուտքային միջակայքերը,  նույնպես  առկա  են  այս  դասի  հեշ  ֆունկցիաներում:  Գոյություն  ունեն  նաև տենտային արտապատկերումներ XOR սխեմայով: Ցանկացած հեշ ֆունկցիա, որն ունի 256 բիթից  փոքր  ելքային  չափս,  անվտանգ  չէ:  Վերոհիշյալ  հեշ  ֆունկցիան  ունի  128  բիթ երկարությամբ  ելքային  հեշ  արժեք,  որը  հնարավոր  է  դարձնում  գրոհողի  համար  գտնել հնարավոր  բախումները  կամ  հաշվարկել  արտապատկերումը  264  հաշվողական բարդությամբ [57]: ", "Արտապատկերման  վրա  հիմնված  բարդ  հեշ  ֆունկցիաներն  օգտագործում  են բազմաչափ  քաոսային  համակարգեր  իրենց  հեշավորման  ալգորիթմում:  Այս  դասին պատկանող քաոսային ֆունկցիաները  պահանջում են  առավել բարձր արտադրողականություն,  որը  կապված  է  մատրիցների  բազմապատկման  և  գումարման գործողությունների  հետ,  և  մեծ  արտապատկերումների  դեպքում  առաջանում  են  նաև հիշողության հետ կապված խնդիրներ: ", "Հեշ  ֆունկցիաները,  որոնք  կիրառում  են նոր  քաուսային  համակարգերը, ներկայացված են [54]- ում: Այն հեշավորման համար օգտագործում է նախորդ Hi արժեքը և հաղորդագրության  i-րդ  բլոկը։  Hi  արժեքը  հաշվարկվում  է  յուրաքանչյուր  փուլի  վերջում հաջորդ  իտերացիայի  համար՝    օգտագործելով  ոչ  գծային  փոխակերպում:  Այս  հեշ ֆունկցիան չի ապահովում բազմահոսքայնությունը, իսկ բանալին օգտագործվում է որպես թվային  արժեք  ASCII  փոխարեն:  Չնայած  Merkle-Damgård  փոփոխված  սխեմային՝ ներկայացված հեշ ֆունկցիան չունի արագություն և համապատասխան անվտանգություն: ", "thread-ներ ժամանակ Ժամանակ Գծապատկեր 7.  Ցանցի չափերը. 90.000 հանգույց, հոսքերի քանակը հաջորդաբար 50, 100, 150, 300: ", "Գոյություն ունեն նաև նեյրոնային ցանցերի հիման վրա աշխատող քաոսային բարդ կառույցներ: Քաոսային նեյրոնային ցանցն  օգտագործում է քաոսային արտապատկերումը վերջնական արդյունքի ստացման համար: Խիաոյի կողմից առաջարկված հեշ ֆունկցիան, որն  օգտագործում  է  երկշերտ  քաոսային  նեյրոնային  ցանց,  հեշտությամբ  գրոհման  է ենթարկվել [56]։ ", "Լիի Դենգի կողմից առաջարկված ֆունկցիաների կառուցվածքն ավելի բարդ է Merkle– Damgård սխեմայի համեմատ՝ նպատակ ունենալով ապահովել ավելի մեծ անվտանգություն դրանց բարդ կառուցվածքի և քաոսային վարքագծի շնորհիվ: Նրանց կողմից առաջարկվել է  զուգահեռ  հեշավորման  սխեման՝  ոչ  գծային  քաոսային արտապատկերման օգտագործմամբ:  Այս  սխեմայի  վիճակագրական  թեստերը  և  գաղտնագրային վերլուծությունը  ցույց  են  տալիս  բավական  բարձր  արդյունքներ  տարբեր  մուտքային տվյալների  համար:  Այս  մեթոդով  առանձին  հոսքերը  հաշվարկում  են  միջանկյալ  Hi արժեքները  հեշավորելով  առանձին  1024  բիթային  բլոկներ,  որոնք  հետագայում միավորվում  են  XOR-ով  վերջնական  H  արժեքի  ստացման  համար:  Ըստ  Շենոնի՝ անվտանգության  առումով  առաջանում  է  թերություն  կապված  ֆունկցիայի  մուտքի  և վերջնական ելքի միջև [51]։ Այս թերության պատճառը կապված է MITM գրոհման հետ, որը հարձակվողին  թույլ  է  տալիս  կոտրել  հեշ  ֆունկցիան,  տրոհել  մասերի  և  հաշվարկել միջանկյալ  տվյալները  առանց  հաղորդագրությունների  ամբողջական  հաշվարկման անհրաժեշտության:  Այսպիսով  այս  հեշ  ֆունկցիան  չունի  բավարար  զգայունություն մուտքային  հաղորդագրության  նկատմամբ  և  ունի  բախումների  բարձր  ցուցանիշ: ", "Գոյություն ունեն նաև այնպիսի հեշ ֆունկցիաներ, որոնք օգտագործում են պատահական փոխանակման ցանց, որն իր պատահական վարքագիծը ստանում է ոչ գծային քաոսային արտապատկերմամբ:  Փոխանակման  ցանցի  նախամշակումից  հետո  կատարվում  է եռաքայլ  մշակում։  Առաջին  փուլում  օգտագործվող  քաոսային  արտապատկերումը  հեշ ֆունկցիային  թույլ  է  տալիս  ապահովել  բարձր  կատարողականություն  և  գաղտնագրային վերլուծություն: Այս ֆունկցիան օգտագործելով չորս առանձին հոսքեր, ապահովում է բարձր հեշավորման  արագությունը:  Այն  կարող  է  աշխատել  ինչպես  մեկ  հոսքով,  այնպես  էլ  մի քանի  հոսքով՝  զուգահեռաբար:  Անվտանգությունը  և  հեշավորման  արագության պարամետրերի  կարգավորման  բացայկությունը  համարվում  է  նշված  մեթոդի  հիմնական թերությունը: ", "Հեշ  ֆունկցաիների  վերաբերյալ  կատարված  այլ  հետազոտություններում սովորական  հեշ  ֆունկցիաների  անվտանգության  բարելավման  համար  առաջարկվել  է քաոսային  արտապատկերումների  օգտագործում:  Վերոնշյալ  հեշավորման  ալգորիթմը SHA հեշ ֆունկցիայի փոփոխված տարբերակն է,  որը նույնպես հեշտությամբ ենթարկվել է գրոհման,  և  համարվում  է  ոչ  անվտանգ  հեշավորման  սխեմա  [58]:  Քաոսային  հեշ ֆունկցիային  վերաբերող  աշխատությունները  հիմնականում  ուղղված  են  ելքային  հեշ արժեքների  վիճակագրական  վերլուծության,  գաղտնագրային  վերլուծության  և պատահական  վարքագծի  վրա,  մինչդեռ  հեշ  ֆունկցիայի  ծրագրային  լուծումները, ինչպիսիք են կրիպտոարժույթները և սպամերի հայտնաբերումը, պահանջում են ավելի մեծ արագություն և անվտանգություն: ", "W ′ մատրիցի ցանկացած (i; j) պիքսել իրենից ներկայացնում է եռաչափ վեկտոր =′ Wij ijW ijW ijW (2.13) Բլոկ-սխեմայում  բերված  է  սխալանքի  տիրույթի  անտեսման  միջոցով  պատկերի համեմատման ալգորիթմը (Նկար 2.19): ", "Հավասարում (3.3)-ը  նկարագրում  է  այս  համակարգի  օրինակը՝ լոգիստիկ արտապատկերումը ընդունելով որպես հիմք: ", "𝑋𝑋𝑛𝑛+1 = 𝐶𝐶𝐿𝐿𝛼𝛼,𝛽𝛽�𝑛𝑛𝛼𝛼, 𝑛𝑛𝛽𝛽, 𝑓𝑓, 𝑋𝑋𝑛𝑛, 𝑓𝑓� = �𝑛𝑛𝛼𝛼𝛼𝛼�𝐿𝐿(𝑓𝑓, 𝑋𝑋𝑛𝑛) + 𝑛𝑛𝛽𝛽𝛽𝛽𝐿𝐿(16 − 𝑓𝑓, 𝑋𝑋𝑛𝑛)�𝑚𝑚𝑓𝑓𝑛𝑛1� = �𝑛𝑛𝛼𝛼𝛼𝛼�𝑓𝑓𝑋𝑋𝑛𝑛(1 − (3.3) 𝑋𝑋𝑛𝑛) + 𝑛𝑛𝛽𝛽𝛽𝛽(16 − 𝑓𝑓)𝑋𝑋𝑛𝑛(1 − 𝑋𝑋𝑛𝑛)��𝑚𝑚𝑓𝑓𝑛𝑛1 Առաջարկված  համակարգը  վեցը  մեկին  արտապատկերում  է:    wα,  α,  wβ  և  β չափորոշիչների ֆիքսումը փոխում է այս արտապատկերը << երկուսը մեկին>> քաոսային արտապատկերման: Պարամետրերի ցանկացած համադրության ֆիքսումը կարող է փոխել այս արտապատկերումը՝   հաշվի առնելով wα×α և wβ×β միջակայքերը: Տվյալ հեշավորման ալգորիթմը հավասարաչափ բաշխում ունի r և Xn բոլոր հնարավոր պարամետրերով: ", "Օպտիմալ  բաշխումը  գաղտնագրային  պատահական  գեներատորի  համար համարվում  է  հավասարաչափ:  Ելքային  շարքերով  ոչ  հավասարաչափ  բաշխումը հանգեցնում  է  նրան,  որ  հարձակվողն  ունենում  է  պատահական  թվերի  գեներացման վիճակագրություն [59]: ", "Առաջարկված  հեշ  ֆունկցիայի  մոդելում  տվյալների  ցանկացած  4  բայթ փոխակերպվում է 32 բիթային տասնորդական արժեքի, այսինքն դիտարկում են չմշակված այնպիսի տվյալներ, ինչպիսիք են տասնորդական արժեքների 32 բիթային բառերը: ", "Այս  ենթաբաժնում  բերված  է  ավազակույտի  մոդելի  սիմուլացիայի  արդյունքում ստացված  տվյալների  և  մշակված  նեյրոնային  ցանցերի  կողմից  ստացված արդյունքների  համեմատական  վերլուծությունը  «Մինիմում  ավազահատիկներ  և մաքսիմալ  հեռավորություն»  խնդրի  ուսումնասիրության  շրջանակներում:  Բերված համեմատական վերլուծություններում նեյրոնային ցանցերի տարբերությունը միայն տաքնված  նեյրոնների  քանակի  մեջ  է:  Ընդհանրապես  ըստ  նեյրոնների քանակական ճարտարապետության նեյրոնային ցանցերը կարելի է բաժանել երեք տիպերի. լինի, նեյրոնային  ցանցը այսպես  ասված  անգիր  է  անում  մուտքային  տվյալները  և արդեն  հարցման  ժամանակ  տրված  պատասխանները  տալով  առանց «մտածելու»  մեկը  մեկին  կհամապատասխանեն  ուսուցման  համար  տրված տվյալներին, իսկ այնտեղից բացակայելու դեպքում արդյունքը գոհացուցիչ չի ցանցը  ամեն  հարցման  վրա  սկսում  է  շատ  երկար  մտածել,  և  հարցմանը տրված  պատասխանների  սխալանքը  բավականին  մեծ  է  լինում  անկախ հարցվող տվյալի առկայությանը ուսուցողական տվյալների հենքում, աշխատանքի համար՝ ոչ այնքան շատ, որ «անգիր» արվի, ոչ էլ հակառակը: ", "Բարեբախատաբար,  «Ոսկե  միջինին»  պատկանող  նեյրոնային  ցանցերում նեյրոնների քանակի միջակայքը բավականաչափ լայն է, ուստի այդքան էլ բարդ չէ մշակել ցանց, որը կպատկանի երրորդ տիպին: ", "Ֆունկցիաների  զանգվածը  հիմնական  գործառույթը  ստացված  թվային  արժեքին համապատասխան  ճիշտ  ֆունկցիայի  տրամադրումն  է:  Ֆունկցիաների  դինամիկ զանգվածի համար մշակվել է 8 յուրատեսակ ֆունկցիա: Արժեքները, որոնք ներկայացված են  աղյուսակում,  a,  b,  c,  d,  e  և  f  ցույց  են  տալիս  համապատասխան  Mi  արժեքները յուրաքանչյուր fi-ի  համար  ըստ  իտերացիաների:  Այս  քաոսային  փոխակերպումն ապահովում է փոխադարձ կապ բոլոր արժեքների միջև: ", "Հեռավորություն Ավազահատիկների քանակ Աղյուսակ 2. Ավազակույտի մոդելի միջոցով ստացված արդյունքներ: ", "XOR M: մուտքագրման հաղորդագրություն Pad (M) Բաշխում (Ml) Բլոկ Բանալիի փոփոխում Թույլ կապեր Ուժեղ կապեր փոփոխում (K) HSum(Hl) H: վերջնարդյունք հեշ արժեք Նկ. 15. Հեշ ֆունկցիայի բլոկ-սխեման Նկ.  16-ում  ներկայացվել  է  fi  հաշվարկման  սխեման:  Իտերացիայի  յուրաքանչյուր փուլի համար ցանկացած fi ֆունկցիա ընդունում է RKj և դրա հետ կապված՝ Mi արժեքները և հաշվարկում դրանց համապատասխան a, b, c, d, e և f պարամետրերը: Այս հաշվարկը զբաղեցնում  է  6  ներքին  փուլեր,  իսկ  հաշվարկի  վերջում  ևս  մեկ  փուլ՝  օգտագործելով  Zi ֆունկցիաները, և տալիս  է IV –ի համապատասխան արժեքը: ", "Իսկ արդեն ուսուցումից հետո ունենում ենք այլ պատկեր, որտեղ նեյորնային ցանցը ուսուցման  արդյունքում  արժեքավորած է լինում նեյրոնների կշիռները ակտիվացիոն  ֆունկցիայի  շեմը  ճիշտ  հաղթահարելու  և  ցանկալի  արդյունքներ տալու համար(Նկար 45): ", "Այս  ընթացակարգը  տևում  է  8  փուլ,  և  հաշվարկման  վերջում  mutate  ֆունկցիան ստեղծում  է  նոր  փուլային  բանալու  վեկտոր:  Յուրաքանչյուր  իտերացիայի  սկզբում  RKj փոխանցվում է SortBlocks, և այն փոխակերպվում է XOR-ի օգնությամբ՝ գտագործելով Mi բոլոր արժեքները, որոնք նախատեսված են SortBlocks ֆունկցիայի մուտքային տվյալների ստեղծման համար: Կատարվում է ֆունկցիաների նոր տեսակավորում, և սկսվում է հաջորդ իտերացիան:  Բոլոր  իտերացիաների  վերջում  HSum  ֆունկցիան  ընդունում  է fi ֆունկցիաների ելքային արժեքները և արտադրում է հեշի ելքային արժեքը: ", "DCS Zi lVi XOR lVi lVi Նկ. 16. fi ֆունկցիաների կառուցվածքը Հեշ  ֆունկցիայի  կատարողականությունը  իրականացվել    է  ըստ  վիճակագրական վերլուծության, արագության և գաղտնավերլուծության: Bi համարվում է երկու արժեքի միջև Հեմմինգի  հեռավորությունը:  γ  և  δ  երկու  տասնվեցերորդական  արժեքի  համար  դրանք ունեն  զրո ,  եթե  դրանք  չունեն  հավասար  երկուական  արժեք  միևնույն  դիրքում:  Այս պարամետրը  կարող  է  հաշվարկվել  տարբեր  արժեքների  համար՝  հաշվարկելով  դրանց 𝐵𝐵𝑖𝑖 բոլորի  միջև  Հեմմինգի  հեռավորությունը  (3.4  բանաձև)[60],  որոնց  միջին  արժեքը  կլինի Հեմմինգի միջին հեռավորության արժեքը  (N իտերացիաների քանակն է ) (3.4) Ելքային  արժեքների  տարբերության  տոկոսային  քանակը  հաշվարկվում  է 𝑩𝑩 = 𝑵𝑵 𝑵𝑵 ∑ 𝑩𝑩𝒊𝒊 𝒊𝒊=𝟏𝟏 հավասարում (3.5)-ում, որը ցույց է տալիս Հեմմինգի հեռավորության հավանականությունը: ", "Նշանակենք –ը  թիրախ  օբյեկտի  հիստագիրը, –ը՝  ձևանմուշի  օբյեկտի հիստագիրը,  որտեղ  i-ն  կարող  է  ընդունել  արժեք  0-ից  մինչև  255-ը։  Վերջինս  RGB-ի յուրաքանչյուր ուղու մակարդակի արժեքն է, և x=(R,G,B). Այսպիսով՝ որտեղ որտեղ (2.14) որտեղ  (r,c)-ը  ցույց  են  տալիս  ձևանմուշի  պատկերի  վերին  ձախ  անկյան  MxN  չափի հարթության  կոորդինատները՝  թիրախ  օբյեկտի  պատկերի  նկատմամբ:  Եթե  թիրախ պատկերն ունի A×B չափը, ապա և : ", "Հավասարում (3.5)-ում l-ը նշանակում է հեշավորման ելքի երկարությունը: ", "Նկար 46.Նեյրոնների կապերի «ամրությունը»: "], "source_docs_file": "Informatics and Computer Systems.json"}