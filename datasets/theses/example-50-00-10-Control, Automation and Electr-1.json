{"source_docs_file": "Control, Automation and Electrical Engineering.json", "paragraphs": ["Բայց  այդ    հաջորդական  մշակման  շնորհիվ,  հնարավոր  է  դառնում.  ա)  ապահովել մշակման  արդյունքների  միանշանակությունը,  և,  որ  շատ  կարևոր  է,  բ)  բացառել    PA աշխատանքի  ընթացքում    անորոշ  իրավիճակների  ի  հայտ  գալը,  որը  տեսականորեն հնարավոր է զուգահեռ մշակման դեպքում: ", "SIE ԱՀ-ում  մեկ այլ կարևոր խնդիր է կիրառվող ԾՕ-ների քանակի լավարկումը: ", "Զրոյական և անկյունագծային  ԾՕ-ները (Տես՝ նկ. 2.17, նկ. 2.18) հիմնական  ԾՕ-ներ են հանդիսանում  այն  հիշողության  նմուշների  դեպքում,  որոնց  հիշողության  բջիջների զանգվածի երկրաչափական տեսքը քառակուսի է (այսինքն՝ զանգվածում տողերի (#PR) և սյուների (#PC) քանակները համընկնում են` #PC = #PR) կամ էլ մոտ է քառակուսիին: ", "Այդ  դեպքերում  հնարավոր  է  դառնում    կառուցել  անկյունագծային    ԾՕ,  որը  լիովին կընդգրկվի հիշողության զանգվածը պատկերող մակերևույթում (Տես՝ նկ. 2.19 ա.) և այդ դեպքում՝  PG  գործիքով  գեներացված    ԾՕ-ների  քանակը  մոտ  կլինի  նվազագույնին: ", "- 82 - Հակառակ դեպքերում, բացի հիմնական անկյունագծային ԾՕ-ից՝ գեներացվում են նաև լրացուցիչ ԾՕ-ներ: Օրինակ՝ երբ  տողերի քանակը մեծ է սյուների քանակից #PR > #PC (Տես՝ նկ. 2.19 բ., գ.), կամ երբ սյուների քանակը մեծ է տողերի քանակից #PC > #PR  (Տես՝ #PC = #PR #PC = #PR /2 #PR = #PC /2 նկ. 2.19 դ., ե.): ", "ա. բ. դ. ե. Նկար 2.19.   ԱՀ-ի անկյունագծային ԾՕ-ի կիրառման օրինակները Իսկ  երբ  զանգվածի  տողերի  և  սյուների  հարաբերությունը  մեծ  է  երեքից,  ապա  այդ դեպքերի  համար  նախատեսված  է  կիրառել  ոչ  անկյունագծային՝ լրացուցիչ, ծրագրավորող  օրինակներ:  Այդ    ԾՕ-ների  կիրառումը  նախատեսված  է  միայն  մեծ չափսեր  ունեցող  հիշողության  նմուշների  դեպքերում  (այդ  պատճառով  այս  դեպքի օրինակը  ներկայացնելը  դժվար  է):  Ոչ  անկյունագծային  ծրագրավորման  օրինակները՝ ֆիզիկական  մակարդակում,  յուրաքանչյուր  տողին  (իսկ  #PC  >  #PR  դեպքում՝  սյունին) վերագրում  են  չկրկնվող  կոդ,  այսպես  ասած,  «համարակալում»  են  տողերը:  Ոչ անկյունագծային  ԾՕ-ները  կիրառվում  են  միայն  անկյունագծային  ԾՕ-ներից  հետո որպես  լրացուցիչ  ծրագրավորման  օրինակներ:  SIE-ի  հոսքում  բացի  պարտադիր զրոյական և անկյունագծային ԾՕ-ներից, կարող են գեներացվել   առավելագույնը մինչև վեց  լրացուցիչ  ԾՕ-ներ:  ՀՍ-ի  նմուշի  լրացուցիչ  ԾՕ-ի    ֆայլի  օրինակը  ներկայացված  է հավելված 4-ում: ", "Ինչպաս  և  SIV-ի  դեպքում՝    SIE  ծրագրային  ԱՀ-ի  աշխատանքի  կառավարումը կատարվում  է    ղեկավարման  ֆայլի  միջոցով:    Հավելված  5  –ում  ներկայացված  է  SIE ծրագրային ԱՀ-ի ղեկավարման ֆայլի օրինակը: ", "գ. - 83 - փորձնական տվյալները SIV-ի ԱՀ-ը օգտագործվել է և, ներկայումս շարունակվում է օգտագործվել, որպես Synopsys ընկերության կողմից նախագծվող բոլոր  տեսակի հիշողության կոմպիլյատորների  կառուցվածքային  տարրերի  խճողումները  նկարագրող՝  scramble.tcl, ֆայլերի ճշտությունը ստուգող հուսալի գործիք:  SIV-ի ԱՀ-ը հաջողությամբ կիրառվում է  մեկ և երկու պորտեր ունեցող, մեծ արագագործության և բարձր խտության, տարբեր չափսերի նմուշների գեներացումը ապահովող հիշողության կոմպիլյատորների համար (800-ից ավելի): ", "SIV-ի հոսքի օգտագործման փորձնական տվյալները ՍՊԴԿ SDV SDV GDSII  ֆայլերի SDV-ի մշակման կոմպիլյատոր կոնֆիգուրա- գեներացման ընդհանուր Աղյուսակ 2.1 ցիաների ժամանակը ժամանակը քանակը (զուգահեռացման գործակից=16) ts90nm 1p11HS 512K ts90nm 1p11HD 512K ts65nm 1p11HS 512K ts65nm 2p22HD 512K ts45nm 1p11 512K ts32nm 1p11 1M ts28nm 2p22 1M ts22nm 1p11 1M ts14nm 1p11 1M մոտ 2 ժամ մոտ 3 ժամ մոտ 2.2 ժամ մոտ 2.4 ժամ մոտ 4.5  ժամ մոտ 4.5 ժամ մոտ 3.5  ժամ մոտ 4.2 ժամ մոտ 4.4 ժամ մոտ 5.5 ժամ մոտ 5.2 ժամ մոտ 6.3 ժամ մոտ 6.3 ժամ մոտ 7 ժամ մոտ 7.1 ժամ մոտ 8.2 ժամ մոտ 8.5 ժամ մոտ 10 ժամ Հարկ է նշել, որ ժամանակակից հիշողության կոմպիլյատորների SDV ստուգման կոնֆիգուրացիաների  քանակը  հասնում  է  մի  քանի  հարյուրների  (Տես՝  աղ.  2.1),  ուստի - 84 - շատ կարևոր է  դառնում հնարավորինս ավտոմատացնել, արագացնել  GDSII   ֆայլերի գեներացումը  և  մշակումը:  Այդ  նպատակով  SIV-ում  իրականացված  է    նմուշների գեներացման  աշխատանքների  զուգահեռ  կատարումը:  Բացի  այդ,  իր  աշխատանքի սկզբում  նախապես  համեմատվում  և  գեներացման  հերթից  դուրս  են  հանվում  արդեն գեներացված կոնֆիգուրացիաները:  Ցավոք,  ներկայումս անհնար  է լիովին ավտոմատացնել  արդյունքների  վերջնական  մշակման  աշխատանքները,  այն  կարելի  է պարզեցնել, հեշտացնել [27-29]՝  առավելագույնս նվազեցնելով մեխանիկորեն մշակվող ինֆորմացիայի  քանակը  և  տրամադրելով  մշակմանը  անհրաժեշտ  ինֆորմացիան առավելագույնս  ընթերցելի  տեսքով:  Աղյուսակ  2.1-ից  երևում  է,  որ  GDSII  ֆայլերի գեներացման  ժամանակի  և  այդ  ֆայլերի  քանակի  աճման  կախվածությունը  գծային  չէ: ", "Դա  բացատրվում  է  այն  բանով,  որ  գեներացումը  կատարող՝  ժամանակակից  (32  նմ,  22 նմ,  14  նմ  տեխնոլոգիաների  համար  օգտագործվող)    համակարգչային  ռեսուրսները ավելի հզոր են, քան նախկինում (90 նմ, 60 նմ  տեխնոլոգիաների համար)  օգտագործվող ռեսուրսները: ", "Աղյուսակ  2.2-ում  տրված  են  հիշողության  կոմպիլյատորների  բնութագրերը  և դրանց համապատասխան  ASV  ալգորիթմի  աշխատանքի ժամանակային գնահատականները, որտեղ  «K» դա –կիլոբիթ է իսկ  «M» - մեգաբիթ: ", "ASV ալգորիթմի աշխատանքի տևողությունը նմուշների ստուգվող ստուգող ալգորիթմի Աղյուսակ 2.2 ՍՊԴԿ կոմպիլյատոր չափսերի նմուշների հավաքա- աշխատանքի տիրույթը քանակը ծուների թիվը ժամանակ ts90nm 1p11 HS 8M ts90nm 1p11 HS 512K ts90nm 2p22 HS 512K ts90nm 1p11 HD 512K ts90nm 2p22 HD 512K ts90nm 2p11 HD 32K ts90nm 2p11 HS 16K - 85 - Փորձնական  տվյալները  ցույց  տվեցին,  որ  SPICE  մոդելավորման  արդյունքները կախված  չեն  մոդելավորման  ընթացքում  կատարվող  հաշվարկների  ճշտությունից, այսինքն՝ մոդելավորման ժամանակ բավական է օգտագործել ամենացածր ճշտությունը ապահովող  մոդելավորման  գործակիցը,  դրանով  զգալիորեն  նվազեցնելով  ASV ստուգումների տևողությունը: ", "SIV  ԱՀ-ի  ողջ  ծրագրավորումը  իրականացված  է  TCL  ծրագրավորման  լեզվով հեղինակի  մասնակցությամբ:  Իսկ  VIG,  VPG,  MPT  գործիքների  ծրագրավորումը կատարված է C++ ծրագրավորման լեզվով [17]: ", "Կառուցվածքային  մոդելը  ավտոմատ  դուրս բերող ծրագրային  հոսքը հաջողությամբ  օգտագործվել է  տարբեր  տեխնոլոգիաների (45  նմ,  28  նմ) հիշողությունների կառուցվածքային մոդելները ավտոմատ ստանալու նպատակով: ԱՀ- ի  աշխատանքի տևողությունը փոփոխական է` և՛ փոքր, և՛ պարզ կառուցվածք ունեցող նմուշների  դեպքերում  կարող  է  տևել  մեկ,  երկու  ժամ,  իսկ  մեծ  և  բարդ  կառուցվածք ունեցող  նմուշների դեպքերում այն կարող է տևել մինչև մի քանի տասնյակ ժամեր: ԱՀ- ի  հիմնական  ժամանակի  բաժին  է  կազմում  SPICE  ֆայլերի  ստացումը,  և  ստացված SPICE  ֆայլերի  մոդելավորումը: ", "SPICE  ֆայլերի  մոդելավորման  ժամանակը ուղղակիորեն  կախված  է  (ուղիղ  համեմատական  է)  հիշողության  նմուշի  մեծությունից՝ հիշողության  նմուշի  զանգվածում  բջիջների  քանակից:  Բացի  այդ,  SIE  ԱՀ-ի աշխատանքի  ժամանակը  կախված  է  նմուշի  երկրաչափական  տեսքից,  այսինքն  ԾՕ-ի քանակից:  Աղյուսակ  2.3-ում  բերված  են  փորձնական  արդյունքների  տվյալները,  որոնք ստացվել են տարբեր տեխնոլոգիաների և կոնֆիգուրացիաների հիշողության նմուշների մոդելի ավտոմատ  դուրս բերման ընթացքում: ", "Աղյուսակ 2.3 SIE-ի հոսքի աշխատանքի տևողությունը NW  NB  CM  PR PC NPP ST (minutes)  TT (minutes) - 86 - Աղյուսակ 2.3  (շարունակություն) SIE-ի հոսքի աշխատանքի տևողությունը   NW (Number of Words) – Բառերի քանակը հիշողությունում,   NB (Number of Bits) – Հիշողության Մուտքերի/Ելքերի քանակը,   CM (Column Mux) – Սյուների փոխանջատիչի երկարությունը,   PR, PR=NW/CM - Ֆիզիկական տողերի քանակը հիշողությունում,   PC,  PC=NBxCM - Ֆիզիկական սյուների քանակը հիշողությունում,   NPP (Number of Programming Patterns) – գեներացված Ծրագրավորման   ST (Simulation Time in minutes) - նմուշի SPICE ֆայլի մոդելավորման ժամանակը   TT (Total Time in minutes)  TT=NPPxST - Ընդհանուր ժամանակը րոպեներով: ", "օրինակների քանակը, րոպեներով, Փորձերի  ընթացքում  նկատվեց,  որ  չնայած  նրան,  որ    մոդելի  դուրսբերման ժամանակը  կախված է  հիշողության  պատրաստման  տեխնոլոգիայից,  ԱՀ-ի աշխատանքի  տևողությունը  հիմնականում  կախված  է  նմուշի  կոնֆիգուրացիայի պարամետրերից  (NW,  NB,  CM,  BK)  և  կատարվող  մոդելավորման  աշխատանքի տևողության ժամանակից: ", "Իհարկե, ԱՀ–ում աշխատանքի ընդհանուր ժամանակը գնահատելիս անհրաժեշտ է  հաշվի  առնել  նախապատրաստական  աշխատանքների  ընթացքում ծախսված ժամանակը,  որը  կարող  է  կազմել  4-ից  8  ժամ:  Շատ  կարևոր  է  ընդգծել,  որ  ավտոմատ դուրսբերման միջավայրում ստացված կառուցվածքային մոդելը  արդեն վավերացված է և պատրաստ է անմիջական  օգտագործման: ", "- 87 - SIV և SIE ԱՀ-րի ողջ ծրագրավորումը կատարված է TCL ծրագրավորման լեզվով: ", "Ինչպես  և  SIV  ԱՀ-ի  դեպքում,  SIE  ԱՀ-ի  կառավարումը,  մուտքային  պարամետրերի արժեքների  փոխանցումը  ծրագրերին,  նույնպես,  իրականացված  է  կառավարող տեքստային ֆայլի միջոցով: ", "Եզրակացություն Այս գլխում ներկայացվել են մեր կողմից մշակված և իրականացված. -  SIV ավտոմատ ծրագրային համակարգի նկարագրությունը, որը հնարավորություն է  տալիս  կատարել  հիշողության  կոմպիլյատորի  կառուցվածքային  գոտիները  և կառուցվածքային  խճողումները  նկարագրող  ֆայլի  ճշտության  ստուգումը: ", "Ներկայացված են ծրագրային ԱՀ-ի  ֆունկցիոնալ, կառուցվածքային սխեմաները; -  SIE ավտոմատ ծրագրային համակարգի նկարագրությունը, որը հնարավորություն է տալիս ստանալ Ստատիկ պատահական դիմումով հիշողության (ՍՊԴՀ) նմուշի կառուցվածքային  մոդելը  այդ  հիշողության  նմուշի  արտադրության  մեջ օգտագործվող  GDSII  ձևաչափով  ներկայացված  ֆայլից:  Ներկայացված  են ծրագրային  ԱՀ-ի    ֆունկցիոնալ,  կառուցվածքային  սխեմաները,  մոդելի  դուրս բերման հետ կապված հիմնախնդիրները, բարդությունները և սահմանափակումները: ", "Բերված են կատարված փորձերի արդյունքների տվյալները: ", "- 88 - ԵՎ ՎԱՐՔԱԳԾԱՅԻՆ ԹԵՐՈՒԹՅՈՒՆՆԵՐԻ ՆԵՐԱՐԿՄԱՆ ԵՎ ԱԼԳՈՐԻԹՄՆԵՐԻ ՍՏՈՒԳՄԱՆ  ԱՎՏՈՄԱՏ  ՀԱՄԱԿԱՐԳ հայտնաբերող ալգորիթմների ստեղծման խնդիրը Ինչպես արդեն նշել ենք, հիշողությունների թեստավորումը կարևոր և բարդ խնդիր է  մանավանդ  ներդված  հիշողությունների  դեպքում:  ՆՀՍ-ի  արագ  և լիարժեք թեստավորումը  ապահովելու  նպատակով  ներդրված  ՆՀՍ-ի  հետ    նույն  միջավայրում ներդրվում  են  լրացուցիչ  էլեկտրոնային  սխեմաներ,  պրոցեսորներ,  որոնց  նպատակն  է. ա)  օգտագործելով  ներդրված  ինքնաթեստավորման  ալգորիթմները    (անգլերեն  Built  in self-test)`  կատարել  ՆՀՍ-ի  անմիջական  ստուգումը,    և  բ)  հնարավորության  դեպքում, հիշողության  աշխատունակության  վերականգնումը  (անգլերեն  Built  in  redundancy analysis) [2], [17-21]:  Այդ  ներդրված  պրոցեսորների  կողմից  իրականցվող ինքնաթեստավորումը (ՆԻԹ) ստուգման  և  վերահսկման  հիմնական  միջոց  է հանդիսանում  ներդրված  հիշողության  սարքերի  համար:  ՆԻԹ  արդյունավետությունը բնութագրվում  է  երկու  չափանիշներով.  ա)  օգտագործված  թեստային  ալգորիթմի ծածկույթը՝  ՆԻԹ ալգորիթմի միջոցով հնարավոր անսարքությունների հայտնաբերման ունակությունը,  բ) այդ  լրացուցիչ  սխեմաների օգտագործման  հետևանքով հիշողության սարքի  տոպոլոգիայի  ավելացված  մակերևույթի  տոկոսը:  Այս  երկու  չափանիշները փոխկապակցված  են,  քանի  որ  շատ  բարդ  թեստավորման  ալգորիթմի  իրականացումը միկրոսխեմայում  պահանջում  է  սարքի  թիթեղի  վրա  ավելի  շատ  մակերևույթ  և հակառակը,  անհնար  է  իրականացնել  լիարժեք  ծածկույթ  ունեցող    ՆԻԹ  ալգորիթմ թիթեղի  սահմանափակ մակերևույթում: ", "Էլեկտրոնային  սխեմաների  թիթեղի մակերևույթի  մեծացումը  անցանկալի  է  հատկապես  հատուկ    կիրառությունների դեպքերում,  որոնցից  են  բժշկական,  տիեզերական,  բջջային  և  մի  շարք  այլ  ոլորտների հատուկ  սարքավորումները:  Իհարկե,  կան  թեստավորման  ալգորիթմներ,  որոնք - 89 - հնարավորություն  են  տալիս    ՆՀՍ-ում  հայտնաբերել  բոլոր  տեսակի  իրատեսական  և տեսական  սխալները:    Այդ  կարգի  ալգորիթմները  լինում  են  բարդ  և  ծավալուն  և  չեն կարող    օգտագործվել    ներդրված  սարքերի  դեպքում,  քանի  որ  դրանց  իրականացումը կպահանջի    միկրոսխեմայի  թիթեղի  մակերևույթի  մեծ  տարածք,  որը  իր  հերթին  կբերի նոր  անսարքությունների  առաջացմանը  և  արտադրանքի  վերջնական  գնի  անցանկալի թանկացմանը:  Ավելցուկայնությունից  խուսափելու համար  անհրաժեշտ է օպտիմալացնել  ՆԻԹ  ալգորիթմը:  Այս  դեպքում  մենք  պետք  է  գնահատենք  ՆԻԹ ալգորիթմը  այդ  հիշողության  սարքին  բնորոշ  իրատեսական  անսարքությունների մոդելների միջոցով և կատարենք օգտագործված թեստային  ալգորիթմի օպտիմալացումը:  Երբ  մենք  ասում  ենք  իրատեսական  անսարքություններ,  ապա  մենք հասկանում ենք անսարքություններ, որոնք  իրատեսական թերությունների արդյունք են հանդիսանում  [30]:  Այդ  թերությունները  բնորոշ  են    հատկապես  այդ  սարքին,  ՆՀՍ-ի պատրաստման  տոպոլոգիայի  մասնավորապես  այդ  տեխնոլոգիային:    Այս  պնդումը շատ կարևոր է  ՆԻԹ  ալգորիթմի օպտիմալացման համար, քանի որ հետազոտությունները  հաստատում  են,  որ  տեսական  անսարքությունների  մեծ  մասը իրատեսական չեն տվյալ ՆՀՍ-ի պատրաստման տեխնոլոգիայի համար [31]: ", "Բացի այդ, համաձայն գրականությանը, ըստ իրենց վարքագծի բնույթի և բջիջների մեջ  հայտնվելու,    դրսևորման  ձևի,  թերությունները  լինում  են  և  դասակարգվում  են որպես  «փափուկ»  և  «կոշտ»:  «Կոշտ»  (անգլերեն՝  “hard”  defect)  թերություն  է  անվավում այն  թերությունը,  որի  վարքագիծը  հաստատուն  է  և  չի  փոփոխվում  ժամանակի ընթացքում  նաև  հիշողության  սարքի  սնուցման լարումը  անջատել-միացնել գործողությունից  հետո:  «Փափուկ»  են  կոչվում (անգլերեն  “soft”  defect) այն թերությունները,  որոնք  հայտնվում  և  անհետանում  են  և՛  ՆՀՍ-ի  աշխատանքի ընթացքում  և՛  սարքի  սնուցման  լարումը  անջատել-միացնելու  գործողությունից  հետո [32-35]:  Ակնհայտ  է,  որ «փափուկ»  թերությունների  արդյունքում  հայտնված անսարքությունները  ժամանակավոր  բնույթ  են  կրում  և  անհետանում  են  հիշողության բջջում  այդ թերության  դրդապատճառը  վերանալու  հետ  միաժամանակ  [36-40]: ", "«Փափուկ»  անսարքությունների  հայտնաբերումը  կատարվում  է  նույն  ծրագրային միջոցների օգնությամբ, ինչ որ օգտագործվում են  «Կոշտ»  անսարքությունների համար: ", "Մինչդեռ «Փափուկ» և «Կոշտ» անսարքությունների ազդեցության հետևանքով վնասված - 90 - ՆՀՍ-ի  աշխատունակությունը  վերականգնելու  համար    կատարվող    մոտեցումները  և գործողությունները տարբերվում  են  մեկը  մյուսից  [7]:  Այս  ատենախոսության սահմաններում, մենք  դիտարկում ենք միայն «Կոշտ»՝ հաստատուն վարքագիծ ունեցող թերությունների հետևանքով առաջացած անսարքությունները: ", "Իրատեսական թերությունների մոդելները մշակելը և թերությունների գրադարանը ունենալու  մեկ  այլ  առավելություն  է  այն,  որ  այն  հնարավորություն  է  տալիս  ստուգել թեստային  ալգորիթմները  իրական  թերությունների  գրադարանի  սահմաններում: ", "Ներկայումս  թեստային  ալգորիթմների  և  թերությունների  մոդելների  բարդության աճման  պատճառով  դրանց  ստուգումը  առանց  հատուկ  ծրագրային  ավտոմատ միջոցների դառնում է անհնար [15]: ", "Այս  գլխում  ներկայացված  է  թերությունների  ներդրման  և  հիշողությունը թեստավորող  ալգորիթմը  ստուգող    (ԹՆևՀԹԱՍ)    ծրագրային  ԱՀ,  որի  նպատակն  է կատարել  թեստային  ալգորիթմների  աշխատանքի  ստուգումը,  գնահատել  այդ ալգորիթմների արդյունավետությունը՝ օգտագործելով տարբեր  տեսակի  իրատեսական թերությունների  մոդելներ,  որոնք  կարող  են  տեղադրվել  հիշողության  սարքի  բոլոր հանգույցներում՝  ստեղծելով  տարբեր  վարքագիծ  դրսևորվող  անսարքություններ: ", "Անհրաժեշտության դեպքում ԹՆևՀԹԱՍ ծրագրային ԱՀ-ը հնարավորություն է ընձեռում իրականացնել.  ա) թեստային  ալգորիթմների  աշխատանքի  ամբողջական արդյունավետության հաստատումը, բ) թեստային ալգորիթմների յուրաքանչյուր  Մարշ ալգորիթմի  տարրերի  առանձին  ստուգումը,  գ)  թեստային  ալգորիթմների  քայլ  առ  քայլ ստուգումը: ", "համակարգի կառուցվածքը և աշխատանքը ԹՆևՀԹԱՍ  ծրագրային ԱՀ-ը բաղկացած է հետևյալ ֆունկցիոնալ մասերից. ապահովում  է  հետազոտվող  թերություններ  պարունակող  բջջի/բջիջների  ներարկումը հիշողության  նմուշի  տոպոլոգիայի՝  GDSII  ձևաչափի  ֆայլի,  մեջ:  Թերությունների ներարկումը  իրականացվում  է  ֆիզիկական  մակարդակով՝  առանց  հաշվի  առնելու - 91 - հիշողության  նմուշի  կառուցվածքային  խճողումները (scramble):  Ներարկման արդյունքում  ստացվում  է  տոպոլոգիայի  մակարդակով  թերությունը  պարունակող՝ Թերությունների ներարկում  և Թերություններով կապերի ցուցակի` SPICE  ֆայլի բջիջների գրադարանը Հիշողության նմուշի տոպոլոգիան (GDSII ֆայլը) գեներացումը  (1) Անսարքություներով SPICE ֆայլի մոդելավորումը   (2) Մոդելավորման արդյունքների վերլուծումը  (3) Հետազոտվող թեստային ալգորիթմը Նմուշի կառուցվածքային խճողման ինֆորմացիան Ելքային ֆայլերի գեներացումը Նկար 3.1.   ԹՆևՀԹԱՍ  ծրագրային ԱՀ -ի ֆունկցիոնալ սխեման «արատավոր»  նմուշը:  Այդ  նմուշից  գեներացվում  է  SPICE  ձևաչափի  ֆայլը՝  թերություն պարունակող SPICE ֆայլը: ", "Ծրագրային  համակարգի  այս  հանգույցը գեներացնում  է. ա) հետազոտվող թեստային ալգորիթմը՝ վերաձևափոխելով այն SPICE մոդելավորմանը  համապատասխան  ձևաչափի;  բ)  մշակում  է  մոդելավորման աշխատանքի ընթացքում օգտագործվող պարամետրերը; գ) յուրաքանչյուր դիտարկվող թերության  համար  գեներացնում  են  մոդելավորման  համար  անհրաժեշտ  տվյալները: ", "Երբ SPICE ֆայլերի նախապատրաստման  աշխատանքը  ավարտվում է, մոդելավորման հանգույցը  սկսում  է  մոդելավորումը՝  օգտագործելով  թերությունների  դիմադրության տարբեր  արժեքներ, և,  անհրաժեշտության դեպքերում՝  անսարքությունների հայտնաբերման  համար  ստեղծելով  անհրաժեշտ  լրացուցիչ  սթրեսային  իրավիճակներ, կիրառելով մոտքային  պարամետրերի (սնուցման լարում,  աշխատանքային ջերմաստիճան,  աշխատանքային  հաճախականություն  և  այլն)  տարբեր  արժեքներ: ", "- 92 - Մոդելավորման արդյունքում ստացված տվյալների մշակումը կատարվում է ծրագրային ԱՀ-ի հաջորդ հանգույցում: ", "ստացված  մոդելավորման  արդյունքների  մշակումը,  կատարվում  է  արդյունքների վերջնական  վերլուծումը,  ելքային ֆայլերի  ստեղծումը:  ԱՀ-ի  աշխատանքի  այս հատվածում օգտագործվում է հիշողության նմուշի կառուցվածքային մոդելը: ", "բջիջների ներարկման ձևերը Ծրագրային  ԱՀ-ում  ֆիզիկական  թերությունների ներարկումը նմուշի տոպոլոգիայի (GDSII) ֆայլի մեջ իրականցվում է  երկու  մեթոդով: ", "ծրագրավորման մեթոդի նկարագրությունը Թերություններ ներարկման այս եղանակը հնարավորություն է տալիս ավտոմատ ձևով  ներարկել  մեկ  կամ  ավելի  հետազոտվող  թերությունները՝  նմուշի  հիշողության բջիջների  մակերևույթի  տարբեր  դիրքերում:  Հհամեմատած  այն  եղանակի  հետ,  երբ հետազոտվող    թերությունը  տեղադրվում  է  SPICE  ձևաչափի  ֆայլում  անմիջապես հիշողության տարածքում թերություններ  ներարկելու մոտեցումը ունի մի քանի էական առավելություններ [41]: Առաջին առավելությունը այն է որ թերությունները ներարկվում են  հիշողության  տարածքի  նախապես  որոշված  հատվածում՝  որոշակի  համարի ֆիզիկական    տողում  և  սյունում:    Այս  որոշակիությունը  հետագայում  մշակման աշխատանքի  ընթացքում  հնարավորություն  է  ընձեռում  վերահսկել  հետազոտվող թեստային ալգորիթմի աշխատանքի յուրաքանչյուր քայլը, հետազոտման յուրաքանչյուր ժամանակային  հատվածում  և  մակարդակում:  Եկրորդ  առավելություն  է,  որ  ԱՀ  -ում հաճախականության    ժամանակացույցի  կիրառումը  հնարավորություն  է  տալիս.  ա) հաշվարկել թեստային  ալգորիթմի աշխատանքի  տևողությունը՝ BIST-ի աշխատանքային  հաճախականության  մասին  տվյալի  առկայության  դեպքում,  բ) - 93 - կատարել  թեստավորվող  ալգորիթմի    քայլ  առ  քայլ  կարգաբերումը,  որը  էապես լավացնում է ալգորիթմի կարգաբերման աշխատանքի գործընթացը [15], [17]: ", "Հիշողության  զանգվածի  ծրագրավորումը  իրականացվում  է  հիշողության ծրագրավորման  MPT  գործիքի  միջոցով:  Ինչպես  արդեն  նշել  ենք,  MPT  գործիքը ներարկում  է  թերություններ  պարունակող  բջիջները  բացառապես  հիշողության զանգվածի  մեջ՝  համաձայն  իրենց  ֆիզիկական  դիրքերի,  որոնք  նկարագրվում  են ծրագրավորման օրինակների  ֆայլում: ", "Հարկ  է  նշել,  որ  MPT  ծրագրավորող  գործիքը  ունի  հետևյալ  երկու  էական սահմանափակումները.  ա)    MPT-ին    ներարկում  է  թերություններ  միայն  հիշողության բջիջների  զանգվածի  տարածքի  սահմաններում  և չի  կատարում  ներարկման գործողություն  այդ  տարածքից  դուրս՝  հիշողության  սարքի  մյուս  (Մուտքային/Ելքային հանգույցներում բջիջներում, տողերի և սյուների ապակոդավորիչների հանգույցներում,  զգայուն  ուժեղացուցիչների  բջիջներում  և  այլն)  հանգույցներում,  բ) ծրագրավորման  ընթացքում  MPT-ին  կարողանում  է  ներարկել  միայն  երկու  տեսակի՝ ծրագրավորող  թերություններով  բջիջներ,  այսինքն  միայն  երկու  տարբեր  վարքագիծ ունեցող թերություններ կարող են   միաժամանակ ներարկվել և հետազոտվել  հիշողու- թյան  բջիջների  զանգվածում  ԹՆևՀԹԱՍ    ծրագրային  համակարգի  կողմից:  Միաժա- մանակ  այդ  թերություններով  բջիջների  քանակը  սահմանափակվում  է  միայն հիշողության  սարքում  պարունակվող    հիշողության  բջիջների  գումարային  քանակով: ", "Ինչպես  հետագայում    փորձերը  ցույց  տվեցին,  ԹՆևՀԹԱՍ    ծրագրային  համակարգի միջոցով  ներարկվող  թերությունների  քանակը  լիովին  բավարար  է  թեստավորման ալգորիթմների լիարժեք ստուգման համար: Թեստերի հետազոտման  աշխատանքների ընթացքում ստեղծվել են թերությունների բջիջների ամբողջական գրադարաններ, որոնք պարունակում  են  թերություններով    բջիջներ  տարբեր  տեխնոլոգիական  պրոցեսների համար: ", "Թերությունների ամբողջական գրադարանների առկայությունը հնարավորություն է ընձեռում լիարժեք ստուգել թեստավորման ալգորիթմները [41-44]: ", "ա. xxxxxxxx xxxxxxxx բ. xxxxxx1x xxx1xxxx xxxxxxxx xxxx10xx xx0xxxxx գ. Նկար 3.2.   ԾՕ ֆայլերի օրինակները - 94 - Նկար 3.2-ում ներկայացված են  ծրագրավորման ֆայլերի օրինակները, որոնք ստեղծվել են 4 տող և 8 սյուն ունեցող հիշողության բջիջների զանգվածի համար: Նկարի հիշողության  զանգվածը  ներարկված  է  «1»  տեսակի  թերություններով:  Նույն    ձևով՝  բ. օրինակին համաձայն, զանգվածում ներարկվելու են «0» տեսակի թերություններով: Իսկ գ. օրինակում ներկայացված է դեպք, երբ  «0» տեսակի թերությունները ներարկվելու են ներարկվելու են երեք բջիջներում՝ 7-րդ տողի 5-րդ սյան մեջ, 2-րդ տողի 4-րդ սյան մեջ և ներդրվում են հարևան բջիջներում: Թերությունների այդ տեսակ դիրքավորումը կարող է  բերել  յուրահատուկ  վարքագծով  անսարքությանը  և  լրացուցիչ  ստուգման  գործոն հանդիսանա  թեստային  ալգորիթմի  համար:  «1»  և  «0»  տեսակի  թերությունների օրինակներ են հանդիսանում առաջին գլխում նկարագրված, «ծրագրավորող» բջիջները (Տես՝  նկ.  1.25  և  նկ.  1.26):  Այս    «ծրագրավորող»  բջիջների  կիրառումը  ԹՆևՀԹԱՍ ծրագրային ԱՀ -ում համարժեք է «Stacked 0»  և «Stacked 1»  տեսակի անսարքությունների ներդրմանը հիշողության զանգվածի բջիջներում: ", "Նկար  3.3-ում  ներկայացված  է  մեխանիկական  (manual)  ձևով  ներարկված թերության  օրինակը,  որը  ներարկվել  է  հիշողության    բջիջում,  որի  արդյունքում    բաց Նկար 3.3.   ՀՍ-ի  բջջի տոպոպոլոգիայում բաց դիմադրողական թերության օրինակը - 95 - դիմադրությամբ անսարքություն է հայտնվում հիշողության զանգվածի բջիջում: ", "Հիշողության  մակերևույթում  թերությունների  մեխանիկական  ներարկման մեթոդը կիրառվում է այն դեպքերում, երբ ա) հետազոտվող թերությունը անհրաժեշտ է ներարկել հիշողության սարքի  հիշողության բջիջների զանգվածի սահմաններից դուրս՝ հիշողության  այլ  հանգուցներում;  բ)  ներդրվող  թերությունը  ունի  բարդ  կառուցվածք,  և այդ  թերությունը  ստանալու  համար  պետք  է լինում  բջիջի  տոպոլոգիայում մեխանիկական  ձևով  կատարել բարդ  ձևափոխություններ:  Բնականաբար, օգտագործվող  թեստային  ալգորիթմը  պարտավոր  է  հայտնաբերել  այդ  հանգույցներում գտնվող թերությունները ևս: ", "Ներդրված թերությունը Նկար 3.4.   Տողերի ապակոդավորման բջիջի տոպոլոգիայում ներարկված «դիմադրության բաց» թերություն Նկար    3.4-ում  տրված  է  թերության  ներդրման  օրինակ  տողերի    ապակոդա- վորման  հանգույցում՝  ազդանշանի ժամանակային  ուշացման վարքագծով անսարքություն  ստանալու  համար:  Ներարկման  արդյունքում  «pnt1»  և  «pnt2»  կետերի միջև  ընկած  դիմադրողական  անսարքության  մոդելը  հնարավորություն  է  ընձեռում մշակել, ստուգել և հղկել այդ անսարքությունը հայտնաբերող թեստային ալգորիթմը: ", "նկարագրության ձևը ԹՆևՀԹԱՍ  ծրագրային ԱՀ-ի աշխատանքի հիմնական նպատակն է վավերացնել ՀՍ-ում օգտագործվող  թեստային  ալգորիթմի ներարկված  անսարքությունը հայտնաբերելու  ունակությունը:    ՆՀՍ-երում  կիրառվում  են  Մարշ  տիպի  թեստային - 96 - ալգորիթմներ:  Թեստային  ալգորիթմը մուտքային  տվյալ է հանդիսանում մոդելավորման  հանգույցի  համար:  Օգտագործվող  Մարշ  թեստային  ալգորիթմը փոխանցվում  է  ծրագրային  հոսքին    առանձին  ֆայլի  միջոցով    և  բաղկացած  է  երեք պարտադիր տարրերից: ", "հասցեավորման ձևերը հետևյալն են.   U  (անգլերեն  -  Upward  addressing)  –  Ներքևից  դեպի  վերև  հասցեավորում:  Այս հասցեավորմամ ժամանակ  թեստավորումը սկսվում  է զրոյական  հասցեից և աճելով շարունակվում  հասնում    է  հիշողության  նմուշի  վերջին    առավելագույն  (maximal)   D  (անգլերեն - Downward addressing - reverse to U)՝ – Վերևից դեպի ներքև՝ հակառակ է հասցեին, U հասցեավորման ձևին: ", "  P (անգլերեն - Ping-pong addressing) – Պինգպոնգ հասցեավորում: Այս հասցեավորման ժամանակ  թեստավորումը  սկսվում  է  զրոյական  հասցեից,  այնուհետև,  հաստատուն շեղումով,  թռիչքաձև  աճելով՝  հասցեների  տիրույթի  թույլատրելի  սահմաններում, հասնում  է հիշողության նմուշի վերջին՝  առավելագույն հասցեին: "], "paragraph_source_docs": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}