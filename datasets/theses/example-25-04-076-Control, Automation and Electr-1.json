{"paragraph_source_docs": [4, 1, 1, 1, 1, 1, 1, 0, 1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 0, 1, 1, 3], "paragraphs": ["Բազմաթիվ  պրոցեսներ գիտության և ճարտարագիտության  մեջ  բնութագրվում  են  փոքրագույն  քառակուսիների  մեթոդով ստացված  մոդելների  օգնությամբ:  Այս  մոտարկման  եղանակը  հնարավորություն  է տալիս  գծային  կամ  պոլինոմիալ  (բազմանդամային)  ռեգրեսիայի  միջոցով  կառուցել համապատասխան  մոտարկող ֆունկցիան: ", "MPT գործիքը, միաձուլելով նմուշի  GDSII ֆայլը և ծրագրավորող բջիջները՝ ըստ ծրագրավորման  ֆայլում  տրված  բջիջների  արժեքների  բաշխմանը,  ստանում  է հիշողության նմուշի «ծրագրավորված» GDSII ֆայլը, որի հիշողության զանգվածի ամեն  մի  բջիջ  ծրագրավորված  է  նախապես,  հստակորեն  որոշված  «0»  կամ  «1» արժեքով:  Բացի  այդ,  MPT  գործիքը,  ստանալով  համապատասխան  հրաման, նմուշի  GDSII  ֆայլում  հետազոտում  է  կառուցվածքային  գոտիների  բաշխումը  և ավտոմատ  ձևով  գեներացնում  է  նմուշում  գոտիների  կառուցվածքային տվյալները  (Տես՝  աղ.  1.11)  պարունակող  ֆայլը:Layout  vs.  SPICE  (LVS)  գործիքը որպես  մուտք  ստանալով  հիշողության  նմուշի  «ծրագրավորված»  GDSII  ֆայլը, գեներացնում  է  նրա  SPICE  նկարագրությունը:  Սխեմայի  SPICE լեզվով նկարագրությունը  թույլ  է  տալիս  ավտոմատ  կերպով  մոդելավորել  հիշողության - 63 - էլեկտրական    սխեման`  մուտքին  տալով  համապատասխան  ազդանշանները,  և ելքային ազդանշանները համեմատել սպասվող արժեքների հետ: ", "Հիշողության նմուշի ծրագրավորումը իրականցվում է յուրաքանչյուր հիշողության կոմպիլյատորի  համար  անհատապես  ստեղծվող  «0»  և  «1»  վիճակը  ծրագրավորող բջիջների միջոցով: ", "Նկար  2.3-ում    ներկայացված  են    կարճ  միացումների  միջոցով  ստացվող՝ «ծրագավորման» աջ և ձախ բջիջների գաղափարը ներկայացնող  հիշողության բջիջների էլեկտրական  սխեմաները:  Ինչպես  արդեն  դիտարկել  էինք,  հիշողության  բջջի WL BL WL BL* WL BL* Ձախ կարճ միացում “L” Աջ կարճ միացում “R” Նկար 2.3. SIV ԱՀ-ում հիշողության ծրագրավորող բջիջների էլեկտրական սխեման էլեկտրական  սխեման  (Տես՝  նկ.  1.6  և  2.3)    ունի  լիովին  սիմետրիկ  կառուցվածք: ", "Նմանապես, բջջի տոպոլոգիան նույնպես սիմետրիկ (նժարի նման հավասարակշռված) է  բջջի  տոպոլոգիայի  կենտրոնի  նկատմամբ: ", "Այսպիսով,  հիշողության  բջիջը հարկադրաբար  տրամաբանական  «0»  կամ  «1»  վիճակ    գցելու  համար  անհրաժեշտ  է տոպոլոգիայում  խախտել  այդ  հավասարակշիռ  վիճակը՝  վերացնել  սիմետրիկությունը: ", "MPT  ծրագիրը  տեղադրում  է  ծրագրավորող  բջիջները  հիշողության  բջիջների  վրա (մտցնելով բջջի տոպոլոգիայում  ծրագրավորումը իրականացնող կարճ միացումը), որի արդյունքում  համապատասխան  շերտերի  համակցման  հետևանքով,  հիշողության - 64 - WL BL զանգվածի  բջիջների  կառուցվածքի  սիմետրիկությունը շեղվում  է՝  ապահովելով հիշողության,  այսպես  կոչված,    ծրագրավորումը:  Ծրագրավորման  բջիջները՝  ինչպես  և հիշողության  բջիջը,  պատրաստվում  են յուրաքանչյուր  տեխնոլոգիայի  համար անհատականորեն:  Նկար  2.4  –ում  պատկերված  են    «ծրագրավորումը»  իրականացնող «L» և «R» բջիջների տոպոլոգիաների օրինակները: ", "Աշխատանքի  նպատակն  ու  խնդիրները:  Աշխատանքի  նպատակն  է  նախագծել  և ներդնել բազմաֆունկցիոնալ ինֆո-կոմունիկացիոն համակարգ, որը նախատեսված լինի էլեկտրոնային նամակների մասին կորպորատիվ ցանցերում օպերատիվ ծանուցումների և խմբային հաղորդագրությունների ուղարկման համար։ ", "Ինչպես  բազմիցս  նշել  ենք,  հիշողության  կառուցվածքային  մոդելը  բաղկացած  է երկու  հիմնական    մասերից՝  հիշողության  գոտիների  բաշխումը  նկարագրող  մասից,  և հիշողության  կառուցվածքային  խճողումները  նկարագրող  պրոցեդուրաների  մասից: ", "Այն  էապես  նվազեցնում  է  նախագծման  բնութագրերի  իրական  և  կանխատեսվող արժեքների  միջև  շեղումը'  բարելավելով  գնահատման  սխալը  մինչև  10%:  Սակայն, մեթոդի  իրականացման  համար  անհրաժեշտ  է  ավելացնել  ինտերպոլացիոն  կետերի քանակը,  որի  հետևանքով մեթոդի  իրականացման  ժամանակահատվածը  մեծանում  է: ", "Ինչպես  արդեն  սահմանել  էինք,    հիշողության  զանգվածը  հիշողության  նմուշի տոպոլոգիայի  այն  մասն  է,  որը  կառուցված  է  հիշողության    բջիջներով:  Հիշողության բջիջները պարունակող հանգույցներն են՝ -  հիշողության զանգվածը՝   մակերևույթը (memory area), -  պահեստային սյուները և տողերը (redundancy columns and rows), -  և  հիշողության  մակերևույթը  հավասարակշռող,  լրացուցիչ  միավորները  (dummy rows and dummy columns): ", "Նմուշի տոպոլոգիայի մնացած բոլոր մասերը անվանում են գոտիներ: ", "Կառուցվածքային  մոդելի  գոտիների  բաշխման  ստուգումը  իրականցվում  է  SDV հոսքի  միջոցով:    Սկզբում,  VIG  ծրագիրը,  վերլուծելով  մոդելի  scramble.tcl  ֆայլում նկարագրված  գոտիների  բաշխումը  և  դրան  համատեղ,  հիշողության  կոմպիլյատորի տիրույթի  նկարագրությունը,  գեներացնում  է՝  անհրաժեշտ  քանակությամբ  ստուգող - 66 - նմուշների  կոնֆիգուրացիաների ֆայլերը: Այդ կոնֆիգուրացիաների ֆայլերի քանակը և նմուշների տեսակները այնպես են ընտրված, որ ապահովում են  կոմպիլյատորի ՆՀՍ-ի VIG MC check.rtb SDV configuration file SDV configuration file SDV configuration file MC scramble.tcl VPG GDS of SDV instance GDS of SDV instance GDSII of SDV instance MIG vpg.strap  file vpg.strap  file vpg.strap  file MPT Fail Pass VOG Compare SDV END mpt.strap  file mpt.strap  file mpt.strap  file Նկար 2.6. Հիշողության գոտիների ստուգման SDV ԱՀ-ի բլոկ-սխեման գոտիների բաշխման  լիարժեք ստուգումը: ", "Կոնֆիգուրացիոն  ֆայլերի  հիման  վրա  MC  գործիքով  գեներացվում  են  SVD ստուգման նմուշների GDSII ֆայլերը (Տես` նկ. 2.6): Հետագայում, այդ ֆայլերը մշակվում են  MPT  գործիքի  միջոցով,  որի  արդյունքում  գեներացվում  են    նմուշի  գոտիների բաշխումը նկարագրող՝ տեքստային ձևաչափով և  mpt.straps անվանումով, ֆայլեր: ", "Դրանից  հետո,  VPG  գործիքը,  իր  հերթին,      կոմպիլյատորի  scramble.tcl  ֆայլից, ստանում  է  գոտիների  բաշխումը՝ յուրաքանչյուր  SDV  կոնֆիգուրացիայի  համար (vpg.straps  անվանումով):  Այսպիսով, յուրաքանչյուր  կոնֆիգուրացիայի  համար ստացվում  են  գոտիների  բաշխումը  նկարագրող  երկու  ֆայլ՝  մեկը  GDSII  ձևաչափից, մյուսը  հիշողության  կառուցվածքային  մոդելի  (scramble.tcl)  ֆայլից:  Ստացված  ֆայլերի համեմատության  միջոցով  (Տես՝  նկ.  2.6),    SIV-ը  ստեղծում  է  արդյունքները  ամփոփող - 67 - ելքային ֆայլը և գեներացնում  է ամփոփիչ հաղորդագրություն SDV ստուգման ընթացիկ վիճակի մասին: Նկար 2.7-ում տրված են  MPT և VPG ֆայլերի օրինակները: ", "Ուսուցման հավաքածու Մեքենայի ուսուցում Ուսուցումն  իրականացվում  է  պիտակավորված  տվյալների  (անգլերեն'  labeled  data) Նկար 21  Վերահսկող ուսուցման  մոդել [50] միջոցով:  \\ (՚>-ը  մուտքային  փոփոխականներն  են,  որոնք  կոչվում  են  նաև  մուտքային առանձնահատկություններ:  y(i,-ին  ելքային  փոփոխականն է  կամ  թիրախային փոփոխականը,  որն  անհրաժեշտ  է կանխատեսել:  (x(i),  y(i))  կոչվում  է ուսուցման  օրինակ, իսկ  ուսուցման  օրինակների  խումբը  (x(i),  y(i)),  որտեղ  i=1,  2,  ...,  m  կոչվում  է  ուսուցման հավաքածու:  Վերահսկվող  ուսուցման  նպատակն  է  տրված  ուսուցման  հավաքածուի համար  հ:  X  ^   Y  ֆունկցիան  ուսուցանել  այնպես,  որ  այն  “ճշգրիտ”  կանխատեսի համապատասխան  Y  ելքային  արժեքը:  հ  ֆունկցիան  կոչվում  է  հիպոթեզ  [50]: ", "- 68 - VIG MC check.rtb ASV configuration file ASV configuration file ASV configuration file MC scramble.tcl VPG GDS of ASV instance GDS of ASV instance GDSII of ASV instance MIG Pattern  file(IPP) Pattern  file (IPP) Pattern file (IPP) MPT SVP&SIM   files SVP&SIM   files SVP&SIM   files Programmed GDS Programmed GDS Programmed GDSII LVS rule deck LVS Fail Pass ASV END VOG Log Analysis SPICE simulation SPICE file SPICE file SPICE file SPICE model Նկար 2.9.   Հիշողության կառուցվածքային խճողումների ստուգման ASV ԱՀ-ի բլոկ-սխեման Նկար 2.9-ում ներկայացված է ASV-ի ստուգման   բլոկ-սխեման:  Ի սկզբանե նշենք, որ  հիշողության  հասցեների  խճողումների  ստուգման  գործընթացը  (ASV  ստուգումը) ավելի  ժամանակատար  է,  քան  հիշողության  գոտիների  բաշխման  ստուգումը  (SDV), քանի  որ    այն  իր  մեջ  ընդգրկում    է  երկու  հաջորդաբար  կատարվող  և    բավականին ժամանակատար  գործողություններ՝  ա)  նմուշի  GDSII  ձևաչափից  նմուշի  SPICE - 69 - ձևաչափի  սխեմատիկայի  ֆայլի  դուրս  բերումը  (ինչպես  նշել  ենք,    դա  կոչվում  է    LVS գործողություն),  և  բ)  LVS-ի  աշխատանքի  արդյունքում  ստացված  նմուշի    SPICE  ֆայլի մոդելավորումը:  ASV-ի  դեպքուն  VGP  գործիքը յուրաքանչյուր  նմուշի  համար գեներացնում է՝ (IPP)) (Տես՝ նկ. 2.10), ա)  ծրագրավորման  օրինակների  ֆայլերը  (անգլերեն՝  Instance  Programming  Pattern բ)  SPICE  մոդելավորման  համար  անհրաժեշտ՝  վեկտորային  օրինակների  մուտքային ֆայլերը (անգլերեն՝ SPICE vector pattern (SVP)),  և գ) SPICE մոդելավորող ծրագիրը աշխատեցնող՝ պարամետրերի ֆայլերը: ", "Պետք է ընդգծել, որ  ASV ստուգման  մոդելավորման  ժամանակ   ստացված  SPICE ֆայլի միջոցով իրականացվում է բացարձակապես «կարդալ» գործողության մոդելավորումը: ", "IPP  ծրագրավորման  ֆայլը  իրենից  ներկայացնում  է  տեքստային  ֆայլ,  որը  իր  մեջ Պահեստային սյուները Հիշողության զանգվածի XXXXXXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXX Նկար 2.10.   IPP ֆայլի օրինակը Հիշողության զանգվածի Հավասարա- կշռող տողերը ընդգրկում է տրամաբանական զրոների և մեկերի հավաքածուներ: Այդ հավաքածուները ունեն  նմուշի  զանգվածի  ֆիզիկական  կառուցվածքին  համապատասխան  քանակու- թյամբ  տողեր  և  սյուներ:  IPP  ծրագրավորման  ֆայլերը  մուտքային  տեղեկություններ  են տրամադրում    MPT-ի գործիքի համար: Նկար 2.10 -ում  պատկերված է IPP-ի օրինակը: ", "Համաձայն  այդ  օրինակի՝  հիշողության  նմուշը  ունի    4  տող,  16  սյուն,  2    պահեստային սյուներ  և  2  հավասարակշռող՝  պարապ  տողեր:  Հիշողության  հիմնական  զանգվածից դուրս  գտնվող    պահեստային  և    հավասարակշռող    տողերին  և  սյուներին  պատկանող բջիջների  արժեքները  պարտադիր  ձևով  ծրագրավորվում  են  տրամաբանական  զրո արժեքով:  Իսկ  IPP  ֆայլի  առաջին  տողի  բջիջները  ստանում  են  այնպիսի  արժեքներ, որոնք  կապահովեն  տրամաբանական  զրոյական  արժեքների  ծրագրավորումը  նմուշի - 70 - ֆիզիկական առաջին  տողում  (Տես՝  նկ.  2.10):  Այդ  առաջին  տողը  հնարավորություն  է տալիս  բացահայտել  հիշողության  զանգվածի  բիթային  գծերի  խճողումը  (T,  B): ", "Ֆիզիկական երկրորդ տողից սկսած  IPP-ը պարունակում է    անկյունագծային ստուգող հավաքածու, որը նմուշի ֆիզիկական կենտրոնի առանցքի նկատմամբ և անկյունագծով նրանից  վերև  գտնվող  բջիջներում  ապահովում  է  տրամաբանական  «1»  արժեքներ,  իսկ առանցքից  ներքև  անկյունագծով  գտնվող  բջիջներում`  «0»  արժեքներ  (Տես`  նկ.  2.11): ", "էլեկտրոնային փոստի հետ դինամիկ կերպով համագործակցության  հնարավորության  ապահովում։  Հաջորդ  խնդիրը  փոստային սերվերի հետ ինֆորմացիոն կապի հաստատման մեխանիզմի իրականացումն է։ Այն անհրաժեշտ  է,  երբ  համակարգը  պետք  է լինի  առանձնացված  փոստային սերվերներից  և  միևնույն  ժամանակ  ապահովի  նամակի  հասցեատիրոջ նախաձեռնությամբ ծանուցման հնարավորություն։ ", "Ինչպես  երևում  է  ASV  ստուգման  բլոկ-սխեմայից  (Տես՝  նկ.  2.9),  MPT    գործիքը ծրագրավորում է նմուշի GDSII ֆայլերը՝ այդ նմուշների IPP-ի ֆայլերին համաձայն: ", "- 71 - Այնուհետև,  անցկացնելով յուրաքանչյուր  ծրագրավորված  GDSII  ֆայլը  LVS ծրագրով ստանում ենք  ծրագրավորված GDSII–ին համապատասխան SPICE ֆայլը, որը հետագայում  և  ենթարկվում  է  մոդելավորմանը:  Մոդելավորումը  կատարվում  է համաձայն  SVP  ֆայլի,  որը  գեներացնում  է  VPG  ծրագիրը,  և  որը  իր  մեջ  ծածկագրված ձևով  պարունակում է scramble.tcl  ֆայլից  ստացված  խճողումների  մասին ինֆորմացիան:  SVP  ֆայլում  նկարագրվում  են  մոդելավորման  ընթացքում  փոփոխվող ազդանշանները  և  այդ  ազդանշանների    արժեքների  փոփոխումը,  որը  կատարվում  է մոդելավորման  ժամանակային  տիրույթում:  Իսկ հիշողության  սարքի  մնացած ազդանշանները  մնում  են  անփոփոխ  և  նկարագրվում  են  մոդելավորման պարամետրերի՝  SIM  ֆայլում:  ASV  ստուգման  ընթացքում  կատարվում  է  միայն «կարդալ» (հիշողության սարքից)  գործողության մոդելավորումը: ", "Համեմատելով  BPSK  ազդանշանի  հետ  կտեսնենք,  որ  միևնույն  սիմվոլների հաճախության  դեպքում  ավելի  բարդ  մոդուլացման  սխեման՝  8PSK-ն,  ապահովում  է երեք  անգամ  մեծ  բիթերի  հաճախություն  քան  BPSK  ազդանշանը:  Հաշվի  առնելով վերոնշյալը՝  8PSK  մոդուլացման  տեսակը  ավելի  արդյունավետ  է  սպեկտրի օգտագործման տեսանկյունից քան BPSK և QPSK ազդանշանները, բայց ավելի հակված է բիթային  սխալներին:  Հավասարում  (3.32)-ի  մեջ  տեղադրելով  M-ի  փոխարեն  8 կտեսնենք, թե ինչ ութ արժեքներ կարող է ստանալ տվյալ մոդուլացման տեսակի փուլը: "], "source_docs_file": "Control, Automation and Electrical Engineering.json"}