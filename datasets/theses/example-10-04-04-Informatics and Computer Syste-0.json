{"paragraph_source_docs": [1, 2, 2, 0, 0, 2, 0, 1, 0, 1], "paragraphs": ["Նկար 40.Ավազակույտի մոդելի օրինակ: ", "Վերահսկվող  տարածքում  կարող  է  ներթափանցել  ցանկացած  օբյեկտ,  և տարածքի  վերահսկողության  պատասխանատու  անձը  կամ  խումբը  նախօրոք  չի կարող  կանխատեսել,  թե  ինչպիսի  օբյեկտ  կներթափանցի  տարածք:  Նկար  2.12ա-ում պատկերված  երկաթուղային  կայարանում  օբյեկտի  հայտնաբերումը  խիստ  կարևոր  է: ", "Քանի որ վերահսկվող տարածքը բաց է, ապա օրվա ընթացքում արևի դիրքից կամ այլ եղանակային  փոփոխությունից  հնարավոր  է  լույսի  ինտենսիվության  փոփոխություն պատկերում,  նույն  ժամանակ  ներթափանցող  օբյեկտը  անորոշ  է,  ապա  կիրառելով հայտնաբերում,  ինչպես  նկարագրված է  նախորդ` կհայտնաբերենք ցանկացած օբյեկտի [47]: ", "Հեշ  ֆունկցիան    կարող  է  դասակարգվել  բանալիով  կամ  առանց  բանալու հեշավորման  ֆունկցիաների:  Բանալիով  հեշ  ֆունկցիան  ունի  լրացուցիչ  մուտք,  որն ընդունված  է  նշանակել  k  պարամետրով:  Արդյունքում  առանց  k-ի  իմացության  hk(M) հեշավորման աշխատանքն անհնար է իրականացնել։ Ինչպես նաև հաղորդագրության և ելքային  հեշի  իմացության  պարագայում  բանալու  որոնումը  հաշվողական  առումով նույնպես անհնար է: ", "Հեշավորման  ֆունկցիաների  մեծամասնությունը,  ինչպիսիք  են՝  MD4,  MD5,  MD6, SHA1  և  SHA2  հեշ  ֆունկցիաները,  օգտագործում  են  Merkle–Damgård  սխեման  և  բիթային գործողություններ  կատարում  մուտքային  հաղորդագրության  վրա՝      վերջնական  հեշ արժեքը ստանալու նպատակով [47, 49, 50]։ ", "Սակայն դիտարկենք մի տարածք, որում առկա է շարժում առաջացնող օբյեկտ, օրինակ՝  ծառ  (Նկար  2.14):  Օրվա  ընթացքում  անգամ  մեղմ  քամու  առկայության դեպքում վերահսկվող տարածքում գտնվող ծառը կշարժվի: ", "Քաոսային մեթոդները բավարարում են վերոհիշյալ կանոններին, սակայն քաոսային հեշ ֆունկցիաների մեծամասնությունը որպես ոչ անվտանգ սխեմա օգտագործում է Merkle– Damgård կամ այդ սխեմայի տարբերակը: ", "Նշենք, որ openMP-ն ստանդարտ է C, C++ լեզուներով՝ ստեղծված ծրագրերի զուգահեռացման համար:  Այն նկարագրում է շրջակա միջավայրի փոփոխականները,  գրադարանի  ֆունկցիաները  և  պրոցեդուրաները,  որոնք օգտագործվում  են  բազմահոսքային  ծրագրեր  ծրագրավորելու  համար  ընհանուր հիշողությամբ  բազմապրոցեսային  համակարգերում:  Այն  իրականացնում  է զուգահեռ  հաշվարկ`  օգտագործելով  բազմահոսքությունը  (multi-threading),  որտեղ գլխավոր  հոսքը  ստեղծում  է    \"հպատակ\"  հոսքեր,  և  աշխատանքը  բաժանվում  է նրանց  միջև:  Ենթադրվում  է,  որ  հոսքերը  կատաարվում  են  զուգահեռ, բազմապրոցեսորային մեքենաների վրա, որտեղ պրոցեսների քանակը պարտադիր չէ մեծ կամ հավասար լինի հոսքերի քանակին: ", "Որոշ  կրիպտոարժույթներ  օգտագործում  են  Sha256  HashCash  ֆունկցիան,  որպես՝ այսպես  կոչված  «աշխատանքի  ապացույց»,  որն  ապահովում  է  հանգույցների  կատարած գործառույթների  անվտանգությունը։  HashCash-ն  օգտագործվում  է  նաև  սպամերի կանխարգելման  համար՝    ստիպելով  գրոհող  կողմին  ծախսել  որոշակի  ժամանակ ցանկացած  հաղորդագրության և էլեկտրոնային նամակին կից ուղարկվող հեշի ստեղծման հաշվարկների  վրա:  Եթե  հաղորդագրությունը  կամ  էլեկտրոնային  նամակը  ստացվում  է առանց հեշի, կամ ստացված հեշը վավերականացում չի ացնում, ապա այն մերժվում է և համարվում՝  սպամ:  HashCash-ը  Proof-of-Work  (POW)  ֆունկցիայի  իրականացումն  է,  որը հայտնի  է  նաև,  որպես  աշխատանքային  ֆունկցիա,  հետաձգման  ֆունկցիա  կամ պայքարի համար: Այս ֆունկիցայի գաղափարը այն է, որ նախքան հարցում ուղարկելը այդ հարցմանը պետք է կցել լուծված որոշակի հաշվողական խնդիր, որն այնուհետև հնարավոր է  վավերացնել  հարցումն  ընդունող  կողմում:  Այսպիսով,  սահմանափակ  հաշվողական ռեսուրսների  պատճառով  վերոհիշյալ  հարցումների  ընդհանուր  քանակը,  որը  կարող  է ուղարկել  մեկ  համակարգիչը,  բավականին  նվազում  է  և  դառնում  սահմանափակ:  Այս լուծումն  օգտագործվում  է  էլեկտրոնային  փոստով  ուղարկվող  սպամերի  քանակը նվազեցնելու համար: ", "Այս ծրագրաապարատային զուգահեռ հաշվարկման ճարտարապետությունը թույլ է տալիս բարձրացնել հաշվողական արտադրողականությունը:  Այսինքն  CUDA-ի  միջոցով  վերը  նշված  ալգորիթմը աշխատեցնում  ենք  վիդեոքարտի(GPU)  վրա:  Հիշեցնեմ  որ  GPU-ն  ունի  բազմաթիվ միկրոպրոցեսներ,  որոնց  քանակությունը  զգալի  շատ  է  CPU-ի  պրոցեսորների քանակից:  Օգտագործողը  կարող  է  կանչել  1-512  հոսքերից  կազմված  բլոկը:  Իսկ բլոկերն  էլ  իրենց  հերթին  կազմում  են  միկրոպրոցեսների  ամբողջ  ցանցը:  Ամեն հոսք  բլոկի  մեջ  ունի  յուրահատուկ  ID:  Բլոկները  նույնպես  ընդհանուր  ցանցի  մեջ ունեն  յուրահատուկ  ID:  Ինչպես  նաև  կան  տարբեր  հիշողություններ,  որոնց  հետ հոսքերը  տարբեր  արագությամբ  են  աշխատում:  Նկար  43-ից  GPU-ի  աշխատանքը ավելի  պարզ  է  դառնում:  CUDA  տեխնոլոգիա  օգտագործող  ծրագրային համակարգի  արագությունը  կախված  է  ինչպես  հիշողության` այնպես  էլ  բլոկերի  և հոսքերի  հարաբերակցության  ճիշտ  ընտրությունից:  Օրինակ  միևնույն  ծրագրի աշխատանքը 2 բլոկ' յուրաքանչյուրում 20-ական հոսք և 1 բլոկ 40-ական հոսքերով կարող է ժամանակային 4 անգամ տարբերություն տալ: "], "source_docs_file": "Informatics and Computer Systems.json"}