{"paragraph_source_docs": [0, 0, 3, 2, 2, 2, 2, 1, 2, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 4], "paragraphs": ["Ընդհանուր  առմամբ  այս  օրենքը  թույլ  է  տալիս  մոտավորապես  պատկերացում կազմել զուգահեռացման  արդյունքում  հաղորդման  գործընթացի  կատարման արագության ավելացման մասին։ ", "Տվյալ մոդուլի համար Ամդալի  օրենքը կարելի է կիրառել որոշ նախապայմաններով։ ", "ԱՆՑ-ի  վերջնական  որոշման  կայացման  այս  մեթոդը  համարվում  է  արդյունավետ հաշվարկների  կրճատման և ծրագրավորման  պարզության  տեսանկյունից։ Այս մեթոդի միջոցով  SNR-ի  տարբեր  արժեքների  դեպքում  իրականացված  ԱՆՑ-ի  դասակարգման ճշտության տոկոսային արդյունքները բերված են աղյուսակ 4.3-ում: ", "vector-ը զանգված է, set-ը և map-ը բինար որոնման բալանսավորված ծառեր են։ ", "ԱՀԳ-ի  տրամաբանական  տարրը  կապող  շղթաների  բազմությունը  ներկայացնում  է զանգված աղ․  3․ 1-ը։ ", "ԱՀԳ-ի շղթաների «Wire»  զանգվածի կառուցվածքը Աղյուսակ 3.1 Զանգվածի տարրի համարը Շղթայի անունը Շղթայի id Շղթայի սկիզբ Շղթայի վերջ պահուստը G1 G16 G17 G2 G3 G4 G5 G8 G9 G12 G15 ժամանակի Զանգվածի ամեն տարրում պահվող տվյալները հետևյալն են՝ - 72 - բալանսավորված  ծառ։  Ծառի  ամեն  տարրը  պահում  է  տրամաբանական  տարրի բալանսավորված ծառ։ Ծառի ամեն տարրը պահում է տրամաբանական տարրի(Cell- տվյալներ  են,  վերցվում  են  սխեմայի  ստատիկ  ժամանակային  վերլուծության (Cell-ի) id-ն, ի) id-ն, արդյունքից։ ", "Օրինակ՝  8  id  ոնեցող  շղթան(G9)  սկսվում  է  1  id  ունեցող  տրամաբանական  տարրից, որը  NAND2_1-ն  է,  և  ավարտվում  է  2  և  3  id  ունեցող  տրամաբանական  տարրերին միանալով, որոնք էլ  NAND2_2 և NAND2_3 տարրերն են։ Ավելի մանրամասն տարրի id- ն ներկայացված է աղ․  3.2 տարրի զանգվածի նկարագրությունում։ ", "ԱՀ-ում  օգտագործված  թեստային  ալգորիթմի  նկարագրման  ձևաչափը  լիովին ապահովում  է Մարշ տեսակի հանրահայտ թեստային ալգորիթմների մեծամասնության նկարագրման  հնարավորությունը: ", "Այսպիսով,  ստացանք  NAND2_0(G8,G1,G3),  ինչն  էլ  համապատասխանում  է թեստային verilog ֆայլի 9-րդ տողին(նկ․ 3.2)։ ", "•  Մուտքային  պարամետրերի  ընտրված  կոմբինացիաները  գեներացվում  են համապատասխան գործիքների օգնությամբ  (Embed-lt): ", "Բարձրհաճախականային  ազդանշանը  այնուհետ  բաժանվել  է  միմյանց  հավասար հաջորթական սեգմենտների, որոնցից յուրաքանչյուրը պարունակում է 2048 կետ: Տվյալ մոդուլացված  ազդանշանի  դեպքում  ստացվել  է  2048  կետից  բաղկացած  403  սեգմենտ, որոնցից յուրաքանչյուրի  համար  իրականացվել է  հիմնական բնութագրող հատկանիշների  հաշվարկը:  Յուրաքանչյուր  հիմնական  բնութագրող  հատկանիշի վերջնական  արժեքը  ստացվել  է  իրականացված  403  հաշվարկների  արդյունքների միջինացմամբ: ", "Այսպիսով, ստացվեց նկ.3.3-ում նեկայացված պատկերը։ ", "Նկ․  3․3․   Մուտքային  շղթաների  id-երը  բինար  որոնման բալանսավորված ծառում Ելքային շղթաներ ։ Աշխատում է նույն ձևով, ինչպես մուտքայինի դեպքում, սակայն այստեղ պահվում են 5-րդ տողում գրված շղթաների G16,G17-ի  id-երը (նկ․ 3․ 4)։ ", "- 74 - Նկ․ 3․4․  Ելքային շղթաների id-երը բինար որոնման բալանսավորված ծառում Մուտքային  և  ելքային  շղթաների  այսպիսի  ծառերի[76]  տեսքով  պահվող ինֆորմացիան  թույլ  է  տալիս  հեշտությամբ  O(log  n)  (լոգարիթմական)  ժամանակում կատարել  որոնում՝  մուտքային  կամ  ելքային  շղթաների  բազմությունում,  ինչն  էլ,  իր հերթին,  նպաստում է  ԱՀԳ-ի  վրա  հետագայում  կիրառելի  ալգորիթմների արագագործությանը։ ", "Նման  գրաֆով  աշխատանքի  համար  անհրաժեշտություն  է  առաջանում  շղթայի անունով  գտնել  շղթայի  id-ն։  Բացի  այն  բանից,  որ  ունենալով  ցանկացած  շղթայի  id-ն, կարելի  է  կողերի  զանգվածում  գտնել  նրա  անունը  (աղ․ 3․ 1),  նաև  կարելի  է  անել հակառակը,  ուենալով  անունը՝  գտնել id-ն  նկ․ 3.4  -ի  և  աղ  2-ի  միջոցով։  Այս հնարավորության համար անհրաժեշտ է ունենալ map անունից դեպի id․ map-ը բինար որոնման բալանսավորված ծառ է։ Նրա ամեն տարրը ներկայացնում է {key, value} զույգ։ ", "Որոնումը և բալանսավորումը կատարվում է key-ի միջոցով, որոնք ծառի մեջ չեն կարող կրկնվել,  իսկ  value  -  ն  ներկայացնում  է  ցանկացած  տվյալ։  Մեր  օրինակու`  key-ը (բանալի) շղթայի անունն  է  (օրինակ՝ G1  կամ G2  ․ ․ ․ ),  իսկ value-ն՝  համապատասխան կողի id-ն (աղ.3․ 1)։ ", "Վերոնշյալ verilog ֆայլի օրինակում կունենանք հետևյալ map-ը (նկ․ 3.5)։ ", "- 75 - {G8, 7} {G15, 11} {G3, 4} {G2, 3} {G1, 0} {G4, 5} {G12, 10} {G16, 1} {G5, 6} {G9, 9} {G17, 2} Նկ․  3.5․   ԱՀԳ-ի  շղթաների  բազմության  անունից  դեպի  իրենց  id կառուցված map Այսպիսով,  սխեմայի  ֆունկցիոնալ-տրամաբանական  առանձնահատկությունների հաշվառման, տվյալների մշակման և ԻՍ ֆիզիկական նախագծման համար նախագծվել է  տվյալների  պահման  այնպիսի  մոտեցում,  որը  հիմնված  է  բինար  որոնման բալանսավորված  ծառի[76],  տարրերի  և  շղթաների  զանգվածների  վրա[78,  79],  ինչն  էլ, իր  հերթին,  նշանակում  է  սխեմայի  մուտքային  փականային  մակարդակի  Verilog նկարագրության նախնական փոխակերպումը ազդանշանների հոսքի գրաֆի (ԱՀԳ-ի)։ ", "Սխեմայի տրամաբանական տարրերի ռանգավորումը կատարվում  է ԱՀԳ-ի՝ G(W,C) բազմամակարդակ գրաֆի  փոխակերպմամբ, որի համար հարկավոր է C բազմությունը բաժանել այնպիսի m մակարդակների ( կամ ռանգերի)՝ , որ ցանկացած -ից դեպի ուղղորդված շղթայի համար, որտեղ , տեղի ունենա (3.1) ` , եթե և ։                                           (3.1) Սխեմայի  տրամաբանական  բջիջների  ռանգավորումը  կատարվում է  այն ենթադրության  հիման  վրա,  որ  ցանկացած  տարրի  ռանգ  մեկով  ավելի  է,  քան  այդ տարրի մուտքերին միացված այլ տարրերից առավելագույնի ռանգը։ Որոշակի i տարրի Ri ռանգը որոշվում է հետևյալ կերպ՝ - 76 - (3.2) որտեղ -    ն  i-րդ  տարրի  մուտքային  շղթաների  բազմությունն  է, -ը՝  սխեմայի առաջնային  մուտքերի  բազմությունը, -ն    k-րդ  տարրի  ռանգը, –ն՝  i-րդ  տարրի մուտքերին միացված տարրերի բազմությունը, N -ը սխեմայի տարրերի քանակը։ ", "Տրամաբանական  սխեմայի  Verilog  նկարագրից  ազդանշանների  հոսքի  գրաֆի ստացման  և  սխեմայի  տարրերի  ռանգավորման  նպատակով  օգտագործված  է տվյալների  ներկայացման    և  հետագա  փնտրման  բինար  որոնման  բալանսավորված ծառի սկզբունքը: Սկզբնական վիճակում բոլոր տարրերն էլ ռանգ չունեն, և դրա համար նրանց բոլորին տրվում է 0 ռանգ։ Ռանգավորման ալգորթմը բաղկացած  է 4 հիմնական քայլերից․ գրված  շղթաները)  վերագրել  1-ին  ռանգ։  Այն  բոլոր  տարրերին,  որոնց  բոլոր  մուտքային շղթաները սխեմայի առաջնային մուտքային շղթաներ են, տրվում է 1-ին ռանգը։ ", "ռանգ,  ստանում  են  առավելագույն  ռանգ  ունեցող  շղթայի  ռանգը,  իսկ  նրանց  ելքային շղթային տրվում է  1-ով ավել ռանգ։ ", "սկզբնական վիճակում կլինի` Եթե  ci    տարրի  ռանգը  նշանակենք ,  իսկ  wi  շղթայի  ռանգը՝  r(wi),  ապա (3.3) որտեղ - -ը i -րդ տարրի մուտքային շղթաներից առավելագույն ռանգ ունեցողն է, իսկ –ը i -րդ տարրի ելքային շղթայի ռանգն է: ", "Եթե գնահատման  սխալը թույլատրելի  սահմաններում է,  ապա  փոփոխություններ չեն  կատարվում,  հակառակ  դեպքում  անհրաժեշտ  է  ճշգրտել  գնահատման սխալը: ", "- 77 - ։ ", "RTL  կոմպիլյատորների  հիերարխիայի  համար  առանձնացվել  են  նախագծման բնութագրերը գնահատող հետևյալ շաբլոնները' gc_wrapper.tpl -  ավտոմատ  հաշվարկում է Wrapper կոմպիլյատորի  տարրերի քանակը, pc_wrapper.tpl  -  ավտոմատ  հաշվարկում  է  Wrapper  կոմպիլյատորի  հզորության սպառումը, gc_processor.tpl  - ավտոմատ  հաշվարկում  է  Processor  կոմպիլւատորի  տարրերի pc_processor.tpl  -  ավտոմատ  հաշվարկում  է  Processor  կոմպիլւատորի  հզորության քանակը, սպառումը, gc_server.tpl  -  ավտոմատ  հաշվարկում  է Server կոմպիլյատորի  տարրերի քանակը, pc_server.tpl  -  ավտոմատ  հաշվարկում  է Server կոմպիլյատորի  հզորության  սպառումը Նկար 35  Նախագծման բնութագրերի  արագ գնահատման ծրագրային համակարգը Ինչպես  նշվել  է  երկրորդ  գլխում,  մեթոդն  էապես  բարելավում  է  նախագծման բնութագրերի  գնահատման  սխալը:  Սակայն,  մեթոդի  իրականացման  համար անհրաժեշտ  է  ավելացնել ինտերպոլացիոն  կետերի  քանակը  և  ք^\"Ո_  կոմպիլյատորների հիերարխիայի  յուրաքանչյուր  մակարդակի  պարամետրերի  հետ  կապված նախագծման բնութագրերի  վարքագիծը  բնութագրելու  համար  ստանալ  առանձին  մոտարկման ֆունկցիաներ:  Բացի  դրանից  տեխնոլոգիայի  արագ  փոփոխության  պատճառով անհրաժեշտ  է  ծրագրային  համակարգում  այդ  բնութագրերը  գնահատել  տարբեր տեխնոլոգիաների  դեպքում:  Նշված  խնդիրների  պատճառով  մեթոդը  բավականին ժամանակատար է:  Այդ պատճառով իրականացվել է մեթոդի ընդլայնում' Մեքենայական ուսուցում  ալգորիթմների  կիրառմամբ,  որը  հնարավորություն  է  տալիս  ամբողջությամբ ավտոմատացնել նախագծման  բնութագրերի  արագ գնահատման  գործընթացը: "], "source_docs_file": "Control, Automation and Electrical Engineering.json"}