{"paragraph_source_docs": [1, 1, 1, 1, 1, 2, 1, 1, 4, 1, 1, 4, 1, 4, 3, 1, 2, 1, 1, 1, 1, 1, 3, 0, 1], "paragraphs": ["Բացի այդ, համաձայն գրականությանը, ըստ իրենց վարքագծի բնույթի և բջիջների մեջ  հայտնվելու,    դրսևորման  ձևի,  թերությունները  լինում  են  և  դասակարգվում  են որպես  «փափուկ»  և  «կոշտ»:  «Կոշտ»  (անգլերեն՝  “hard”  defect)  թերություն  է  անվավում այն  թերությունը,  որի  վարքագիծը  հաստատուն  է  և  չի  փոփոխվում  ժամանակի ընթացքում  նաև  հիշողության  սարքի  սնուցման լարումը  անջատել-միացնել գործողությունից  հետո:  «Փափուկ»  են  կոչվում (անգլերեն  “soft”  defect) այն թերությունները,  որոնք  հայտնվում  և  անհետանում  են  և՛  ՆՀՍ-ի  աշխատանքի ընթացքում  և՛  սարքի  սնուցման  լարումը  անջատել-միացնելու  գործողությունից  հետո [32-35]:  Ակնհայտ  է,  որ «փափուկ»  թերությունների  արդյունքում  հայտնված անսարքությունները  ժամանակավոր  բնույթ  են  կրում  և  անհետանում  են  հիշողության բջջում  այդ թերության  դրդապատճառը  վերանալու  հետ  միաժամանակ  [36-40]: ", "«Փափուկ»  անսարքությունների  հայտնաբերումը  կատարվում  է  նույն  ծրագրային միջոցների օգնությամբ, ինչ որ օգտագործվում են  «Կոշտ»  անսարքությունների համար: ", "Մինչդեռ «Փափուկ» և «Կոշտ» անսարքությունների ազդեցության հետևանքով վնասված - 90 - ՆՀՍ-ի  աշխատունակությունը  վերականգնելու  համար    կատարվող    մոտեցումները  և գործողությունները տարբերվում  են  մեկը  մյուսից  [7]:  Այս  ատենախոսության սահմաններում, մենք  դիտարկում ենք միայն «Կոշտ»՝ հաստատուն վարքագիծ ունեցող թերությունների հետևանքով առաջացած անսարքությունները: ", "Իրատեսական թերությունների մոդելները մշակելը և թերությունների գրադարանը ունենալու  մեկ  այլ  առավելություն  է  այն,  որ  այն  հնարավորություն  է  տալիս  ստուգել թեստային  ալգորիթմները  իրական  թերությունների  գրադարանի  սահմաններում: ", "Ներկայումս  թեստային  ալգորիթմների  և  թերությունների  մոդելների  բարդության աճման  պատճառով  դրանց  ստուգումը  առանց  հատուկ  ծրագրային  ավտոմատ միջոցների դառնում է անհնար [15]: ", "գնահատման  մեթոդ՝  կախված  տարրի  տիպից,  սխեմայի  տրամաբանությունից  և դրանում տարրի դիրքից: ", "Անհրաժեշտության դեպքում ԹՆևՀԹԱՍ ծրագրային ԱՀ-ը հնարավորություն է ընձեռում իրականացնել.  ա) թեստային  ալգորիթմների  աշխատանքի  ամբողջական արդյունավետության հաստատումը, բ) թեստային ալգորիթմների յուրաքանչյուր  Մարշ ալգորիթմի  տարրերի  առանձին  ստուգումը,  գ)  թեստային  ալգորիթմների  քայլ  առ  քայլ ստուգումը: ", "համակարգի կառուցվածքը և աշխատանքը ԹՆևՀԹԱՍ  ծրագրային ԱՀ-ը բաղկացած է հետևյալ ֆունկցիոնալ մասերից. ապահովում  է  հետազոտվող  թերություններ  պարունակող  բջջի/բջիջների  ներարկումը հիշողության  նմուշի  տոպոլոգիայի՝  GDSII  ձևաչափի  ֆայլի,  մեջ:  Թերությունների ներարկումը  իրականացվում  է  ֆիզիկական  մակարդակով՝  առանց  հաշվի  առնելու - 91 - հիշողության  նմուշի  կառուցվածքային  խճողումները (scramble):  Ներարկման արդյունքում  ստացվում  է  տոպոլոգիայի  մակարդակով  թերությունը  պարունակող՝ Թերությունների ներարկում  և Թերություններով կապերի ցուցակի` SPICE  ֆայլի բջիջների գրադարանը Հիշողության նմուշի տոպոլոգիան (GDSII ֆայլը) գեներացումը  (1) Անսարքություներով SPICE ֆայլի մոդելավորումը   (2) Մոդելավորման արդյունքների վերլուծումը  (3) Հետազոտվող թեստային ալգորիթմը Նմուշի կառուցվածքային խճողման ինֆորմացիան Ելքային ֆայլերի գեներացումը Նկար 3.1.   ԹՆևՀԹԱՍ  ծրագրային ԱՀ -ի ֆունկցիոնալ սխեման «արատավոր»  նմուշը:  Այդ  նմուշից  գեներացվում  է  SPICE  ձևաչափի  ֆայլը՝  թերություն պարունակող SPICE ֆայլը: ", "Արդյունքում արտաքին  հավել|ալության վերլուծության  անհրաժեշտությունը վերանում է, իսկ  արտաքին  թեստավորող  սարքն  ավելի  է  էժանանում:  Բացի  այդ  հավելյալության վերլուծության  համար  պահանջվող  ժամանակի  նվազման  հետևանքով  բարձրանում  է ներկառուցված հիշողությունների թեստավորման և վերանորոգման արդյունավետությունը  [65]: ", "Երբ SPICE ֆայլերի նախապատրաստման  աշխատանքը  ավարտվում է, մոդելավորման հանգույցը  սկսում  է  մոդելավորումը՝  օգտագործելով  թերությունների  դիմադրության տարբեր  արժեքներ, և,  անհրաժեշտության դեպքերում՝  անսարքությունների հայտնաբերման  համար  ստեղծելով  անհրաժեշտ  լրացուցիչ  սթրեսային  իրավիճակներ, կիրառելով մոտքային  պարամետրերի (սնուցման լարում,  աշխատանքային ջերմաստիճան,  աշխատանքային  հաճախականություն  և  այլն)  տարբեր  արժեքներ: ", "- 92 - Մոդելավորման արդյունքում ստացված տվյալների մշակումը կատարվում է ծրագրային ԱՀ-ի հաջորդ հանգույցում: ", "Թեստավորման  ժամանակ  խափանման  հասցեն  պահվում  է  հատուկ  ռեգիստրում,  որը փոխանցվում  են վերանորոգման մեխանիզմին  և  հիշողությունն  ավտոմատ վերանորոգվում  է  այնպես,  որ  խափանված  հասցեն  այլևս  չօգտագործվի: ", "բջիջների ներարկման ձևերը Ծրագրային  ԱՀ-ում  ֆիզիկական  թերությունների ներարկումը նմուշի տոպոլոգիայի (GDSII) ֆայլի մեջ իրականցվում է  երկու  մեթոդով: ", "Նկար 31 ՑւՏքՀ-ի ընդհանուր  սխեման [60] Fall_flag-ի  յուրաքանչյուր  ստուգման  դեպքում  երբ  կա  խափանում  հասցեի  արժեքը տրվում  է  վերծանիչին,  որը  վերծանում  է  խափանված  սյունը:  Թեստավորման  վերջում խափանված  սյուների  քանակը  համեմատվում  է  հավել)սղության  մեջ  առկա  սյուների քանակի  հետ:  Հնարավոր  են  թեստավորման  հետևյալ երեք  արդյունքները' •  Հիշողությունն  անցնում  է թեստավորումը: ", "Sawtooth  ազդանշանը  համեմատած  մնացած  ազդանշանների  ունի  երկու առանձնահատկություն: Առաջինը դա այն է, որ վերջինս ունի հարմոնիկաներ ոչ միայն իր  հաճախականությանը  պատիկ  զույգ  կամ  կենտ  հաճախությունների  վրա,  այլ  ունի հարմոնիկներ  բոլոր  պատիկ  հաճախությունների  վրա՝  2f,  3f,  4f  և  այլն:  Երկրորդ առանձնահատկությունը  կայանում  է  նրանում,  որ  այս  ազդանշանի  հարմոնիկաների միմյանց  մոտիկ  գտնվելու  պատճառով  դրանց  հզորությունների  մակարդակների  միջև տարբերությունը աննշան է: ", "Հարկ  է  նշել,  որ  MPT  ծրագրավորող  գործիքը  ունի  հետևյալ  երկու  էական սահմանափակումները.  ա)    MPT-ին    ներարկում  է  թերություններ  միայն  հիշողության բջիջների  զանգվածի  տարածքի  սահմաններում  և չի  կատարում  ներարկման գործողություն  այդ  տարածքից  դուրս՝  հիշողության  սարքի  մյուս  (Մուտքային/Ելքային հանգույցներում բջիջներում, տողերի և սյուների ապակոդավորիչների հանգույցներում,  զգայուն  ուժեղացուցիչների  բջիջներում  և  այլն)  հանգույցներում,  բ) ծրագրավորման  ընթացքում  MPT-ին  կարողանում  է  ներարկել  միայն  երկու  տեսակի՝ ծրագրավորող  թերություններով  բջիջներ,  այսինքն  միայն  երկու  տարբեր  վարքագիծ ունեցող թերություններ կարող են   միաժամանակ ներարկվել և հետազոտվել  հիշողու- թյան  բջիջների  զանգվածում  ԹՆևՀԹԱՍ    ծրագրային  համակարգի  կողմից:  Միաժա- մանակ  այդ  թերություններով  բջիջների  քանակը  սահմանափակվում  է  միայն հիշողության  սարքում  պարունակվող    հիշողության  բջիջների  գումարային  քանակով: ", "Ֆայլից տվյալների կարդալը կատարվում է հետևյալ կերպ՝ դատարկ  տողեր,  ապա  ծրագիրը  դրանք  անտեսում  է,  օրինակ՝  1,  2,  6,  8  և  15-րդ տողերը, (տող 3), ամեն տարրի ինֆորմացիան․ դա կատարվում է մի քանի քայլերով (տող 4, 5, 7 )՝   Հերթական  էլեմենտը  կարդալուց  հետո,  նրան  տրվում  է id։ ", "Թերությունների ամբողջական գրադարանների առկայությունը հնարավորություն է ընձեռում լիարժեք ստուգել թեստավորման ալգորիթմները [41-44]: ", "ա. xxxxxxxx xxxxxxxx բ. xxxxxx1x xxx1xxxx xxxxxxxx xxxx10xx xx0xxxxx գ. Նկար 3.2.   ԾՕ ֆայլերի օրինակները - 94 - Նկար 3.2-ում ներկայացված են  ծրագրավորման ֆայլերի օրինակները, որոնք ստեղծվել են 4 տող և 8 սյուն ունեցող հիշողության բջիջների զանգվածի համար: Նկարի հիշողության  զանգվածը  ներարկված  է  «1»  տեսակի  թերություններով:  Նույն    ձևով՝  բ. օրինակին համաձայն, զանգվածում ներարկվելու են «0» տեսակի թերություններով: Իսկ գ. օրինակում ներկայացված է դեպք, երբ  «0» տեսակի թերությունները ներարկվելու են ներարկվելու են երեք բջիջներում՝ 7-րդ տողի 5-րդ սյան մեջ, 2-րդ տողի 4-րդ սյան մեջ և ներդրվում են հարևան բջիջներում: Թերությունների այդ տեսակ դիրքավորումը կարող է  բերել  յուրահատուկ  վարքագծով  անսարքությանը  և  լրացուցիչ  ստուգման  գործոն հանդիսանա  թեստային  ալգորիթմի  համար:  «1»  և  «0»  տեսակի  թերությունների օրինակներ են հանդիսանում առաջին գլխում նկարագրված, «ծրագրավորող» բջիջները (Տես՝  նկ.  1.25  և  նկ.  1.26):  Այս    «ծրագրավորող»  բջիջների  կիրառումը  ԹՆևՀԹԱՍ ծրագրային ԱՀ -ում համարժեք է «Stacked 0»  և «Stacked 1»  տեսակի անսարքությունների ներդրմանը հիշողության զանգվածի բջիջներում: ", "Նկար  3.3-ում  ներկայացված  է  մեխանիկական  (manual)  ձևով  ներարկված թերության  օրինակը,  որը  ներարկվել  է  հիշողության    բջիջում,  որի  արդյունքում    բաց Նկար 3.3.   ՀՍ-ի  բջջի տոպոպոլոգիայում բաց դիմադրողական թերության օրինակը - 95 - դիմադրությամբ անսարքություն է հայտնվում հիշողության զանգվածի բջիջում: ", "Հիշողության  մակերևույթում  թերությունների  մեխանիկական  ներարկման մեթոդը կիրառվում է այն դեպքերում, երբ ա) հետազոտվող թերությունը անհրաժեշտ է ներարկել հիշողության սարքի  հիշողության բջիջների զանգվածի սահմաններից դուրս՝ հիշողության  այլ  հանգուցներում;  բ)  ներդրվող  թերությունը  ունի  բարդ  կառուցվածք,  և այդ  թերությունը  ստանալու  համար  պետք  է լինում  բջիջի  տոպոլոգիայում մեխանիկական  ձևով  կատարել բարդ  ձևափոխություններ:  Բնականաբար, օգտագործվող  թեստային  ալգորիթմը  պարտավոր  է  հայտնաբերել  այդ  հանգույցներում գտնվող թերությունները ևս: ", "Ներդրված թերությունը Նկար 3.4.   Տողերի ապակոդավորման բջիջի տոպոլոգիայում ներարկված «դիմադրության բաց» թերություն Նկար    3.4-ում  տրված  է  թերության  ներդրման  օրինակ  տողերի    ապակոդա- վորման  հանգույցում՝  ազդանշանի ժամանակային  ուշացման վարքագծով անսարքություն  ստանալու  համար:  Ներարկման  արդյունքում  «pnt1»  և  «pnt2»  կետերի միջև  ընկած  դիմադրողական  անսարքության  մոդելը  հնարավորություն  է  ընձեռում մշակել, ստուգել և հղկել այդ անսարքությունը հայտնաբերող թեստային ալգորիթմը: ", "Քանի որ ուսուցման ժամանակ տվյալները անցնում են ուղիղ և հակադարձ տարածման փուլերը, ապա ընդհանուր իտերացիաների քանակը վերցվել է 32768, որը հանդիսանում է  երկուսի  աստիճան:  Նկ.  4.2–ում  պատկերված  են  LabVIEW  միջավայրում  մշակված ԱՆՑ-ի  բազային  մոդելի  ուղիղ  տարածման  և  հակադարձ  տարածման  կոդի հատվածները: ", "Նկար 2.4. GSM մոդեմների հետ աշխատանքային սխեման Գործընթացի  տևողության  կրճատման  գնահատումը։  Զուգահեռ  հոսքերով աշխատող  համակարգի  արագության  գնահատումը  կարելի  է  կատարել  Ամդալի օրենքով [21] (2․2): ", "  P (անգլերեն - Ping-pong addressing) – Պինգպոնգ հասցեավորում: Այս հասցեավորման ժամանակ  թեստավորումը  սկսվում  է  զրոյական  հասցեից,  այնուհետև,  հաստատուն շեղումով,  թռիչքաձև  աճելով՝  հասցեների  տիրույթի  թույլատրելի  սահմաններում, հասնում  է հիշողության նմուշի վերջին՝  առավելագույն հասցեին: "], "source_docs_file": "Control, Automation and Electrical Engineering.json"}