{"paragraph_source_docs": [1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], "paragraphs": ["Ինչպես  արդեն  նշվել  է,  «CA  Simulator»  համակարգը  ապահովում  է բազմաօգտատեր շահագործում, որը հնարավոր է եղել ստանալ Microsoft .Net [52] միջավայրի  միջոցով,  որը  ինքնին  հնարավորություն  է  տալիս  ստեղծել  ծրագրային փաթեթներ, որոնց միջոցով  կարելի է կապել ինչպես օգտագործողներին, այնպես էլ  տարբեր  համակարգեր  և  սարքեր,  դրանով  իսկ  դյուրացնելով  ինֆորմացիայի կիսումը/sharing:  Օգտագործելով  .Net  միջավայրը,  «CA  Simulator»  համակարգում մշակվել  է  հաճախորդ-սերվեր-հաճախորդ  փոխկապակցվածությունը՝  նպատակ ունենալով  հնարավորություն  տալ  օգտագործողներին  կատարել  համատեղ հետազոտություններ  միևնույն  մոդելների  վրա:  Սերվերի  տեղակայման  համար ընտրվել են Microsoft Azure [53] ամպային տեխնոլոգիաների հարթակը: ", "Համատեղ հետազոտություն իրականացնելու համար օգտագործողը պետք է ստեղծի մոդել, որի վրա որ կատարվելու է հետագա համատեղ հետազոտությունը, այնուհետև պետք է կիսվի ստեղծած մոդելով, որի համար ընտրում է «Broadcasting» օպցիան  վերին  վահանակից,  այնուհետև  ընտրում  է  «Start  Broadcasting» տարբերակը՝  մուտքագրելով  ալիքի  անվանումը:  Մինչդեռ  մյուս  օգտագործողները բացելով  ալիքների  ցուցակը  «Broadcasting»  օպցիայից  «Connect to  Chanel» տարբերակը  ընտրելով,  տեսնում  են  ալիքների  պատմությունը  ցուցադրող պատուհանը (նկար 19), որտեղ կարող են ընտրել ցանկալի ալիքը տվյալ ցանկից և միանալ  դրան:  «CA  Simulator»  համակարգի  շատ  կարևոր  առավելություններից  է նաև  այն,  որ  այն  պահպանում  է  մոդելի  վրա  կատարված  հետազոտության ընթացքում  կիրառված  բոլոր  փոփոխությունները,  և  հնարավորություն  տալիս ալիքին  ուշ  միացած  օգտագործողներին  տեսնել  դրանք  քայլ  առ  քայլ,  ամեն  քայլի հետ թարմացնելով բնութագրիչների հաշվարկը: ", "Նկար 19.Ալիքների պատմությունը ցուցադրող պատուհան: ", "Ինչպես արդեն նշվեց, «CA Simulator» համակարգը մշակվել է օգտագործելով .Net  միջավայրը  և  C#  լեզուն:  Իսկ  գլոբալ  ցանցում  աշխատանքի  ապահովման համար  ընտրվել  է  Microsoft  Azure-ը:  Ծրագրավորողների  տեսանկյունից  «CA Simulator»  համակարգը  կարող  ենք  բաժանել  3  մոդուլի.  տեսաբերում,  լոկալ սիմուլացիա և կլիենտ-սերվեր ճարտարապետություն: Տեսաբերման, պտույտների և դիտարկման  հեռավորության  ապահովման  համար  օգտագործվել  են  հենց  .Net միջավայրի գրադարանները: Տեսաբերող դասը կունենա գծապատկեր 1-ի տեսքը: ", "Գծապատկեր 1.Տեսաբերող դասերի կառուցվածքային նկարագրությունը: ", "Լոկալ  սիմուլացիայի  մոդուլում  նախագծվել  է  GuiHelper  դասը,  որը ապահովում է մոդելի ստեղծումը, տեսաբերումը, տեսաբերման ֆունկցիոնալ բոլոր հնարավորությունները, պահպանումը, վերբեռնումը, ավազահատիկների ավելացումը,  գագաթների  փլուզումը,  ինչպես  նաև  ատրիբուտների  հաշվարկը: ", "Տվյալ դասի ֆունկցիոնալ ստեկը ունի Նկար 20-ի տեսքը: ", "Նկար 20.GuiHelper դասի նկարագրություն: ", "Դինամիկ  տեսարանի  դեպքում  շարժման  հայտնաբերման  մեկ  այլ  հայտնի մեթոդ է օպտիկական հոսքը:  Հաջորդական  կադրերի միջև  աֆինային ձևափոխությունը  գնահատվում  է  այնպես,  որ  առանձնանում  է  ձևափոխմանը չհամապատասխանող  տարածքը:  Իրական  ժամանակում  օպտիկական  հոսքի հաշվարկը  ներկայացվել  է  [45]-ում:  [46]-ում  անհամապատասխանության  մասին ինֆորմացիան  միացվել  է  օպտիկական  հոսքին՝  բինոկուլյար  տեսքի  օբյեկտները հսկելու  համար:  Դինամիկական  օբյեկտներին  հետևելու  այլ  տարածված  մեթոդներ  են Lucas-Kanade-Tomasi tracker13, Mean Shift14 [38], Level set contour15-ը և այլ մեթոդները, որոնք  միավորում  են  տեսատվյալների  մի  քանի  հատկություններ:  Բազմատեսարան օբյեկտի  հայտնաբերման /հսկման  դեպքում,  տարբեր  ռակուրսներով  օբյեկտի համապատասխանության  խնդիրը  քննարկվել  է  [31]-ում:  Օբյեկտի  հայտնաբերման արդյունքի վրա հիմնված տեսախցիկի կառավարման ալգորիթմը նույնպես ճշգրտորեն ուսումնասիրվել է ակտիվ տեսախցիկներով հսկման համար [36]: ", "Նախագծված  ճարտարապետության  հիմքում  ընկած  է  այն  գաղափարը,  որ հեռարձակողը  ինքնին  հանդիսանում  է  նաև  բաժանորդ  նույն  ալիքի  համար,  որը հնարավորություն է ընձեռում այլ օգտվողների փոփոխությունների ընդունումը նաև հեռարձակողի  կողմից:  Ինչպես  նշվեց  տվյալ  ալիքում  պահպանվում  է  բոլոր բաժանորդների  կողմից  կատարված  բոլոր  փոփոխությունները,  որի  համար ստեղծվել է տվյալների հենք, որի իրականացման համար ընտրվել է SQLite- ը: ", "VI.   Այլ  հարցեր։  Տվյալների  անվտանգությունը  կարևոր  հարց  է  գաղտնի հաղորդակցություններում սենսորային ցանցերում:  Տեսատվյալների համար, ծածկագրումը  կարող  է  կատարվել  սեղմված  բիտհոսքի  հիման  վրա՝  լավ  մշակված ծածկագրման  ալգորիթմներով,  ինչպիսիք  են  ներկառուցված  նույնականացումը  և  AES (Advanced  Encryption  Standard)  ծածկագրումը՝  սահմանված    IEEE  802.16/WiMax ստանդարտում:    Մեծ  քանակությամբ  տեսատվյալների  համար,  անվտանգության պաշտպանության  համար  հատկացված  ռեսուրսը  պետք  է  հավասարակշռվի  սխալի կառավարման    գործողությունների  հետ,  որն  օժանդակվում  է  հաղորդակցման  անլար համակարգով՝  ապահովելու համար օպտիմալ միջանցիկ գաղտնիությունը: ", "Ինչպես  արդեն  նշվեց,  CA  simulator  համակարգը  ստեղծվել  է  ավազակույտի մոդելի  օրինակով:  Առկա  են  երկու  հիմնական  գործառույթներ  կապված ավազակույտի հետ. DrawSandpileModel (), որն ապահովում է ավազակույտի տեսաբերումը, մոդելի փոփոխությունների արտացոլումը և •  addgrain(Position pos) ֆունկցիան, որը օգտագործողին հնարավորություն է տալիս կատարել փոփոխությունները ավազակույտի մոդելի վրա: ", "Գաղտնիությունը  մեկ  այլ  խնդիր  է,  որը  ավելի  ու  ավելի  մեծ  ուշադրություն  է գրավում  տեսահսկման  համակարգերում:  Սրա  հետ  կապված  հիմնական  խնդիրն  այն է,  որ  տեսանյութի  որոշ  նյութեր,  ինչպիսիք  են  մարդկանց  անձնական    տվյալները, պատշաճ  կամ  օրինական  չէ  ուղղակիորեն  ցույց  տալ  լսարանին:  Այս  հարցին վերաբերող  ներկայիս  մեթոդները  հիմնված  են  օբյեկտի  հայտնաբերման  մեթոդների վրա,  հատկապես  դեմքի  ճանաչման  մեթոդի:  Բովանդակային  կոդավորման  մեթոդը օգտագործել է JPEG  XR (JPEG extended range) կոդեկի  տարածական մասշտաբավորման  հատկությունները՝  դեմքը  ծածկելու  համար:  Դեմքի  հատվածները հայտնաբերվել և ծածկագրվել են ձևափոխման տիրույթում: Ձևի կոդավորման մեկ այլ սխեմայում  օբյեկտի  տարածքը  ծածկագրվել  է  անկախաբար՝  SPIHT-ի  հիման  վրա կատարվող  կոդավորման  պրոցեսում,  կոդավորման  ավելի  մեծ  արդյունավետությամբ՝ համեմատած    MPEG-4-ում    կատարվող  contour  based  բլոկային  կոդավորման  հետ: ", "Նշենք,  որ  «Լուրջ  խաղերը»  հստակ  սահմանում  չունեն,  և  դրանց  յուրաքանչյուր մշակող  յուրովի  է  սահմանում  տվյալ  դասի  խաղերը  [54-55]:  Այնուամենայնիվ, տարածված  կարծիքի  համաձայն  «լուրջ  խաղերը»  (թվային)  խաղերն  են,  որոնք օգտագործվում  են  ոչ  միայն  որպես  զվարճանք,  այլև լուրջ  գիտական հետազոտություններ  և  ուսուցողական  նպատակներ  են  հետապնդում:  Բացի նրանից, որ լուրջ խաղերը հնարավորություն են ընձեռում օգտվողներին փորձարկել ժամանակի, անվտանգության, գումարային արժեքի և այլ պատճառներով իրական կյանքում  անհավանական  իրավիճակներ,  նրանք  կարող  են  նպաստել խաղացողների  մի  շարք  տարբեր  հմտությունների  զարգացմանը:  Սակայն  սա  չի նշանակում,  որ  բոլոր  խաղերը  նպատակահարմար  են  բոլոր  վերոհիշյալ գործընթացներում:  Լուրջ  խաղերի  օգտագործման  վերաբերյալ  գիտական ուսումնասիրություններ կատարվել են [56]-ում: ", "Գոյություն  ունեն  «Լուրջ  խաղերի»  հայտնի  մի  քանի  օրինակներ  որոնք, համարվում  են,  որ  փոխել  են  աշխարհը:  Դրանցից  են՝  «MICROSOFT  FLIGHT SIMULATOR (1982)»-ը [57], TILTFACTOR LABORATORY-ի կողմից ստեղծած խաղերը [58], FORCE MORE POWERFUL (2006) [59] և այլն (Նկար 22): ", "Եթե  ստացված  հարցման  հաղորդագրությունն  ուղարկված  է  աշխատանքային հանգույցից,  ծառայության  հանգույցը  վերծանում  է  հաղորդագրությունը,  այնուհետև գտնում  է չօգտագործած  բանալի  տվյալ  հարցման  համար  և  ուղարկում  այն համապատասխան աշխատանքային հանգույցին: ", "քաղաքացիական  ավիացիայի  համապարփակ  մոդելավորում,  և  մեկն  է  գոյություն ունեցող ստվար քանակով ոչ մարտական սիմուլատորների մեջ: ", "Նկար 22. Հայտնի «լուրջ խաղերի» օրինակներ: ", "լաբորատորիան, վերջին  տարիներին հաջողություններ  գրանցեց իրենց նորարարական  քարտային  խաղերով:  Ընկերության  կարգախոսն  է  «Խաղերի դիզայնը  սոցիալական  փոփոխության  համար»,  իսկ  Pox  և  Awkward  Moment  լուրջ խաղերի միջոցով, նրանք ուսուցանում են խաղացողներին այնպիսի լուրջ թեմաներ, ինչպիսիք  են  հակավակցինային  շարժումները  և  սոցիալական  կարծրատիպերից խուսափումը: ", "Առաջարկված  սխեմայում  յուրաքանչյուր  աշխատանքային  հանգույց  կարող  է  ձեռք  բերել բանալու տեղեկատվությունը ծառայության հանգույցից: ", "Ենթադրենք`  N  հանգույցները  պատահականորեն  բաշխված  են  ցանցում։  Այդ դեպքումընտրման առաջին ծառայության հանգույցների թիվը կազմում է՝ Երկրորդ և i-րդ փուլում ծառայության հանգույցների թիվը կազմում է՝ 𝑵𝑵𝒔𝒔𝒔𝒔𝒔𝒔𝒔𝒔𝒊𝒊𝒔𝒔𝒔𝒔 = 𝑵𝑵 ∗ 𝑷𝑷𝑺𝑺 𝑫𝑫𝑯𝑯−𝟏𝟏 𝑵𝑵𝒔𝒔𝒔𝒔𝒔𝒔𝒔𝒔𝒊𝒊𝒔𝒔𝒔𝒔 = �𝑵𝑵 −   𝑵𝑵𝒔𝒔𝒔𝒔𝒔𝒔𝒔𝒔𝒊𝒊𝒔𝒔𝒔𝒔 � (𝟏𝟏 − 𝑷𝑷𝑺𝑺) ∙   𝑷𝑷𝑺𝑺 𝒊𝒊 𝑵𝑵𝒔𝒔𝒔𝒔𝒔𝒔𝒔𝒔𝒊𝒊𝒔𝒔𝒔𝒔 𝒊𝒊−𝟏𝟏 𝒊𝒊−𝟏𝟏 = �𝑵𝑵 −   ∑ 𝑵𝑵𝒔𝒔𝒔𝒔𝒔𝒔𝒊𝒊𝒔𝒔𝒔𝒔𝒔𝒔 𝒊𝒊 (𝒊𝒊−𝟏𝟏) 𝑫𝑫𝑯𝑯−𝟏𝟏 � �(𝟏𝟏 − 𝑷𝑷𝑺𝑺) ∙   𝑷𝑷𝑺𝑺 որտեղ DH-1-ը  H-1  միջակայքում հարևան հանգույցների թիվն է: Ինչպես արդեն քննարկվել ,                    (2.5) է,  կա  t  փուլ  հանգույցի  ընտրման  և  ինքնակարգավորման  համար:  Յուրաքանչյուր աշխատանքային  հանգույցում  պահպանված  բանալիների  միջին  թիվը  հաշվելու նպատակով այլընտրանքային ծառայության բանալու համար բուֆերի չափն ընդունենք  L- ով: Այնուհետև, աշխատանքային հանգույցների թիվը կազմում է՝ 𝑵𝑵𝑾𝑾 = �𝟏𝟏 − 𝑳𝑳 𝒕𝒕 𝒊𝒊=𝟏𝟏 𝝀𝝀� ∙ �𝑵𝑵 −   ∑ 𝑵𝑵𝒔𝒔𝒔𝒔𝒔𝒔𝒔𝒔𝒊𝒊𝒔𝒔𝒔𝒔 𝒊𝒊 (2.6) Հետևաբար,  բանալու  ինֆորմացիայի  միջին  քանակը,  որը  պետք  է  պահպանվի յուրաքանչյուր աշխատանքային հանգույցում, կարող է գնահատվել հետևյալ մեծությամբ Առաջարկվող սխեմայում ընդհանուր հնարավոր ամբողջ ցանցային հաղորդակցման 𝑵𝑵𝒔𝒔𝒔𝒔𝒔𝒔𝒔𝒔𝒊𝒊𝒔𝒔𝒔𝒔 �𝟏𝟏− 𝑵𝑵𝒘𝒘 𝑵𝑵𝑵𝑵𝑵𝑵𝒌𝒌𝒔𝒔𝒚𝒚𝒔𝒔 = 𝒕𝒕 𝛌𝛌 ∙ ∑ 𝒊𝒊=𝟏𝟏 𝒊𝒊 𝑵𝑵𝒔𝒔𝒔𝒔𝒔𝒔𝒔𝒔𝒊𝒊𝒔𝒔𝒔𝒔 𝒊𝒊 𝒕𝒕 𝛌𝛌 ∙ ∑ 𝑵𝑵𝒔𝒔𝒔𝒔𝒔𝒔𝒔𝒔𝒊𝒊𝒔𝒔𝒔𝒔 𝒊𝒊=𝟏𝟏 𝑳𝑳 𝒕𝒕 𝝀𝝀�∙�𝑵𝑵− ∑ 𝒊𝒊=𝟏𝟏 𝒊𝒊 (2.7) գերբեռնվածությունը հաշվարկվում է ∙ (𝑩𝑩 + 𝛌𝛌 + 𝐋𝐋) +   𝑯𝑯�   ∙   �𝑵𝑵 −   ∑ 𝑵𝑵𝒔𝒔𝒔𝒔𝒔𝒔𝒔𝒔𝒊𝒊𝒔𝒔𝒔𝒔 բանաձևով,  որտեղ  B-ն  ծառայության  հանգույցի  կողմից  հեռարձակվող  հաղորդա- �   ∙  𝛌𝛌 + 𝑫𝑫� 𝒕𝒕 𝒊𝒊=𝟏𝟏 𝒊𝒊 ∑ 𝑵𝑵𝒔𝒔𝒔𝒔𝒔𝒔𝒔𝒔𝒊𝒊𝒔𝒔𝒔𝒔 𝒕𝒕 𝒊𝒊=𝟏𝟏 𝒊𝒊 (2.8) գրությունների  թիվն  է,  իսկ  L-ը՝  ծառայության  հանգույցի  կողմից  պահպանված այլընտրանքային  ծառայության  հանգույցների  թիվը:  Հետևաբար,  առաջին  գործոնն ամբողջ ծառայության հանգույցների հաղորդակցման գերբեռնվածությունն է [39]։ ", "«SandGame»-ը  [45]  իրականավել  է  հիմնվելով  ավազակույտի  աբելյան  մոդելի  վրա՝ նպատակ ունենալով խթանել ինքնակազմակերպվող համակարգերի հետազոտումը և  դյուրըմբռումը,  և  ունի  լուրջ  մտածված  կրթական  նպատակ,  հետևաբար  չի նախատեսվում օգտագործել միայն զվարճանքի համար, մինչդեռ այն բավականին գրավիչ  է  զվարճանքի  տեսանկյունից:  Իրականացված  խաղի  մոդելի  գաղափարը հիմնված է  ավազակույտի  մոդելին  առնչվող  տարբեր  թեորեմների  և տեսությունների  վրա,  որոնք  իրենց  հերթին  բարելավվում  են  ուսուցման խորությունը  և  բարձրացնում  են  գրավչությունը:  Անշուշտ,  բուհերի  և  դպրոցների համար  անհրաժեշտ  է  գիտական  խաղերի  հագեցած  ուսուցման  մեխանիզմների գոյությունը:  SandGame  խաղում  ավազակույտի  մոդելը  դիտարկվել  է  եռաչափ  և երկչափ  կապակցված  ցանցի  վրա  (Նկար  23):  Ցանցի  կապակցվածությունը հնարավորություն  է  տալիս  մոդելում  ունենալ  հավասարազոր  գագաթներ  ըստ հարևանների  քանակի,  ինչպես  նաև  թույլ չի  տալիս  մոդելին  կորցնել ավազահատիկ: ", "«SandGame»  խաղը  միաժամանակ  ապահովում  է  երկչափ  և  եռաչափ տեսաբերում,  ինչպես  նաև  դիտման  անկյունների  փոփոխություն  և  շերտերի առանձին  դիտման  հնարավորություն:  Վերոնշյալից  զատ,  SandGame-ում  կա  նաև մոդելի տվյալ պահին վերաբերող համապատասխան բնութագրիչների հաշվարկ և տեսաբերում  իրական  ժամանակում,  որոնք,  ավազակույտի  մոդելին  վերաբերող բազմաթիվ  թեորեմների  հետ  մեկտեղ  նպաստում  են  օգտատերերի  ավելի  ճշգրիտ որոշումների կայացմանը: Նշենք նաև, որ SandGame-ը չունի ինչպես հոսթինգների, այնպես էլ միևնույն հոսթինգի օգտատերերի քանակի սահմանափակումներ: ", "Նկար 23.SandGame խաղը երկու խաղացողների դեպքում: ", "Խաղում  օգտագործողների  նպատակն  է  հասնել  անվերջ  անկայուն  վիճակի հերթով  գցելով  ավազահատիկներ՝ օգտագործողների կողմից ընտրված կոորդինատներին:  Խաղը՝  դիտարկված  լինելով  փակ  եզրակետերով  ցանցի  վրա, հնարավորություն  է  ընձեռում  մոդելին  չկորցնել  ավազահատիկ:  Հետևաբար, կարելի  է  վստահ  լինել  վերջավոր  ժամանակում  հաղթող  ճանաչվելու  փաստում: "], "source_docs_file": "Informatics and Computer Systems.json"}