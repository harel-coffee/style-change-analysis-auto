{"paragraphs": ["ա․                                                            բ․ Նկար 2.12. ա) վերահսկվող տարածքը, բ) օբյեկտի առկայությունը վերահսկվող տարածքում: ", "Գաղտնագրային  հեշ  ֆունկցիաների  կարևոր  հատկություններից  են  բախումը  և կայունությունը:  Հեշ  ֆունկցիայի  բախումը    երկու  տարբեր  հաղորդագրության  (M1  և  M2) հեշերի  արժեքների  համընկնումն  է,  երբ    h  (M1)  =  h  (M2):  Հեշ  ֆունկցիայի  բախումների բացահայտումն  իրականացվում  է  պատահական  մուտքային  արժեքների  փորձարկման եղանակով  [46,  47,  48]:  Կարևոր  է  նշել,  եթե  հեշավորված  տվյալի  իմացությամբ հարձակվողը    կարող  է  գտնել  M  հաղորդագրությունը,  որն  արտահայտվում    է  h  (M)  =  H բանաձևով,  ապա    հեշավորման  ֆունկցիան    կայունություն  ապահովող  չի  համարվում: ", "Այսպիսով,    նախօրոք  տրված  ելքի  համար  հաշվողական  առումով  անհնար  է  հաշվարկել այն  մուտքը,  որն  արտադրում  է  միևնույն  ելքը:  Նաև  կայունություն  ցածր  ցուցանիշի արդյունք  է  համարվում  հեշ  ֆունկցիայի  մուտքային  և  ելքային  արժեքների  իմացության դեպքում  մեկ  այլ  մուտքային  արժեք  գտնելու  հնարավորությունը,  որի  ելքային  հեշը կհամընկնի սկզբնական հաղորդագրության ելքային հեշի հետ: ", "Նկար 41.Ավազակույտի ծածկույթները երկչափ ցանցում: ", "Հեշավորման  ֆունկցիաների  մեծամասնությունը,  ինչպիսիք  են՝  MD4,  MD5,  MD6, SHA1  և  SHA2  հեշ  ֆունկցիաները,  օգտագործում  են  Merkle–Damgård  սխեման  և  բիթային գործողություններ  կատարում  մուտքային  հաղորդագրության  վրա՝      վերջնական  հեշ արժեքը ստանալու նպատակով [47, 49, 50]։ ", "Սակայն դիտարկենք մի տարածք, որում առկա է շարժում առաջացնող օբյեկտ, օրինակ՝  ծառ  (Նկար  2.14):  Օրվա  ընթացքում  անգամ  մեղմ  քամու  առկայության դեպքում վերահսկվող տարածքում գտնվող ծառը կշարժվի: ", "Քաոսային մեթոդները բավարարում են վերոհիշյալ կանոններին, սակայն քաոսային հեշ ֆունկցիաների մեծամասնությունը որպես ոչ անվտանգ սխեմա օգտագործում է Merkle– Damgård կամ այդ սխեմայի տարբերակը: ", "Նշենք, որ openMP-ն ստանդարտ է C, C++ լեզուներով՝ ստեղծված ծրագրերի զուգահեռացման համար:  Այն նկարագրում է շրջակա միջավայրի փոփոխականները,  գրադարանի  ֆունկցիաները  և  պրոցեդուրաները,  որոնք օգտագործվում  են  բազմահոսքային  ծրագրեր  ծրագրավորելու  համար  ընհանուր հիշողությամբ  բազմապրոցեսային  համակարգերում:  Այն  իրականացնում  է զուգահեռ  հաշվարկ`  օգտագործելով  բազմահոսքությունը  (multi-threading),  որտեղ գլխավոր  հոսքը  ստեղծում  է    \"հպատակ\"  հոսքեր,  և  աշխատանքը  բաժանվում  է նրանց  միջև:  Ենթադրվում  է,  որ  հոսքերը  կատաարվում  են  զուգահեռ, բազմապրոցեսորային մեքենաների վրա, որտեղ պրոցեսների քանակը պարտադիր չէ մեծ կամ հավասար լինի հոսքերի քանակին: ", "Որոշ  կրիպտոարժույթներ  օգտագործում  են  Sha256  HashCash  ֆունկցիան,  որպես՝ այսպես  կոչված  «աշխատանքի  ապացույց»,  որն  ապահովում  է  հանգույցների  կատարած գործառույթների  անվտանգությունը։  HashCash-ն  օգտագործվում  է  նաև  սպամերի կանխարգելման  համար՝    ստիպելով  գրոհող  կողմին  ծախսել  որոշակի  ժամանակ ցանկացած  հաղորդագրության և էլեկտրոնային նամակին կից ուղարկվող հեշի ստեղծման հաշվարկների  վրա:  Եթե  հաղորդագրությունը  կամ  էլեկտրոնային  նամակը  ստացվում  է առանց հեշի, կամ ստացված հեշը վավերականացում չի ացնում, ապա այն մերժվում է և համարվում՝  սպամ:  HashCash-ը  Proof-of-Work  (POW)  ֆունկցիայի  իրականացումն  է,  որը հայտնի  է  նաև,  որպես  աշխատանքային  ֆունկցիա,  հետաձգման  ֆունկցիա  կամ պայքարի համար: Այս ֆունկիցայի գաղափարը այն է, որ նախքան հարցում ուղարկելը այդ հարցմանը պետք է կցել լուծված որոշակի հաշվողական խնդիր, որն այնուհետև հնարավոր է  վավերացնել  հարցումն  ընդունող  կողմում:  Այսպիսով,  սահմանափակ  հաշվողական ռեսուրսների  պատճառով  վերոհիշյալ  հարցումների  ընդհանուր  քանակը,  որը  կարող  է ուղարկել  մեկ  համակարգիչը,  բավականին  նվազում  է  և  դառնում  սահմանափակ:  Այս լուծումն  օգտագործվում  է  էլեկտրոնային  փոստով  ուղարկվող  սպամերի  քանակը նվազեցնելու համար: ", "Այս ծրագրաապարատային զուգահեռ հաշվարկման ճարտարապետությունը թույլ է տալիս բարձրացնել հաշվողական արտադրողականությունը:  Այսինքն  CUDA-ի  միջոցով  վերը  նշված  ալգորիթմը աշխատեցնում  ենք  վիդեոքարտի(GPU)  վրա:  Հիշեցնեմ  որ  GPU-ն  ունի  բազմաթիվ միկրոպրոցեսներ,  որոնց  քանակությունը  զգալի  շատ  է  CPU-ի  պրոցեսորների քանակից:  Օգտագործողը  կարող  է  կանչել  1-512  հոսքերից  կազմված  բլոկը:  Իսկ բլոկերն  էլ  իրենց  հերթին  կազմում  են  միկրոպրոցեսների  ամբողջ  ցանցը:  Ամեն հոսք  բլոկի  մեջ  ունի  յուրահատուկ  ID:  Բլոկները  նույնպես  ընդհանուր  ցանցի  մեջ ունեն  յուրահատուկ  ID:  Ինչպես  նաև  կան  տարբեր  հիշողություններ,  որոնց  հետ հոսքերը  տարբեր  արագությամբ  են  աշխատում:  Նկար  43-ից  GPU-ի  աշխատանքը ավելի  պարզ  է  դառնում:  CUDA  տեխնոլոգիա  օգտագործող  ծրագրային համակարգի  արագությունը  կախված  է  ինչպես  հիշողության` այնպես  էլ  բլոկերի  և հոսքերի  հարաբերակցության  ճիշտ  ընտրությունից:  Օրինակ  միևնույն  ծրագրի աշխատանքը 2 բլոկ' յուրաքանչյուրում 20-ական հոսք և 1 բլոկ 40-ական հոսքերով կարող է ժամանակային 4 անգամ տարբերություն տալ: ", "Արդյունքում  կստանանք  նկար  2.15-ում  ցույց  տրված  սև  տարածքը:  Ինչպես երևում  է  նկար  2.15ա-ից,  ստացանք  սև  պիքսելներ,  որոնք  միասին  կազմում  են  փոքր սև  տարածքներ,  վերջինս  կանվանենք  շեղումային  տարածքները (որոնք  մեր պարագայում հանդիսանում է կեղծ թիրախներ): ", "Ենթադրենք տեսախցիկի միջոցով նկարահանումը սկսելուց որոշ ժամանակ անց պատկերում հայտնվում է օբյեկտ, որը կենդանի է, օրինակ՝ ձի (Նկար 2.15բ): ", "Ինչպես  համոզվեցինք  նախորդ  օրինակից,  ծառի  բացակայության  դեպքում, համեմատությունից  հետո  դիտարկվող  օբյեկտը՝  ձին,  միանգամից  կհայտնաբերվեր: ", "Ծառի  առկայության  դեպքում  որպես  արդյունք  ձիու  սև  պատկերի  հետ  մեկտեղ կստանանք նշված շեղումային սև տարածքները (Նկար 2.16): ", "Նկար 2.16. Շեղումային տարածքների առկայությունը օբյկետի հայտնաբերման դեպքում: ", "Ինչպես  տեսանք,  հայտնվում  են  ավելորդ  տարածքներ,  որը  բերում  է`  առաջին հերթին  օբյեկտների  հայտնաբերման  ալգորիթմի  սխալ  աշխատանքի  և  երկրորդ, ժամանակի ավելորդ կորուստի: ", "Ակնհայտ է, թե ինչ կենսական նշանակություն կարող է ունենալ օբյեկտի արագ և ճշտորեն  հայտնաբերումը մարդկային կյանքին սպառնացող վտանգների կանխման տեսանկյունից,  այնպիսի  վայրերում,  ինչպիսիք  են,  օրինակ՝  երկաթուղային ճանապարհները և կայարանները: ", "Իրականացման պարզության և միաչափ քաոսային արտապատկերումների  բարդ վարքագիծի  շնորհիվ  քաոսային  հեշ  ֆունկցիաները  լայն  տարածում  են  գտել:  Լոգիստիկ արտապատկերումը  նկարագրած  արտապատկերումներից  մեկն  է,  որը  սահմանվում  է ստորև բերված բանաձևով: ", "Կեղծ  թիրախների  հայտնաբերումը:  Բաց  տարածության  մեջ  անգամ  քամու բացակյության  դեպքում  պոտենցիալ  տատանում  ստեղծող  օբյեկտները  բոլորովին անշարժ չեն մնում, օրինակ՝ ծառի դեպքում տերևները փոքրինչ շարժվում են: ", "Երկչափ  ցանցերի  դեպքում  ունենք  համեմատական  վերլուծություն՝ պատկերված Գծապատկեր 2, 3, 4, 5-ում: ", "Բետա  բաշխումների  համար,  որտեղ  α=β-ի  և առավելապես  բաշխված արժեքները գտնվում  են  [0,  0.1)  և  (0.9,  1]  միջակայքում,  հեշտ  է  գրոհման  ենթարկել  առաջարկված մեթոդը:  LS  արտապատկերման  մեկ  այլ  թերությունն  այն  է,  որ  սինուսոյիդային արտապատկերումից  ելքի  ստացումը  լոգիստական  արտապատկերման    համեմատ, կատարվում է ավելի դանդաղ: ", "openMP normal openMP Normal Գծապատկեր 3. CPU-ի մոդելը. Intel i7 2670QM . Ցանցի չափսերը. 250.000 հանգույց .Ավազահատիկների քանակը. 1.000.000 ավազահատիկ: ", "Բազմապատկման,  գումարման  և  հանման  գործողությունները  սովորաբար  հեշտությամբ կատարում է  պրոցեսորը ցածր մակարդակում, բայց եռանկյունաչափական գործողությունները,  ինչպիսիք  են  sin  և  cos,  չեն  իրականացվում  պրոցեսորի  կողմից ուղղակի  հրամաններով,  այլ  օգտագործում  են  գրադարաններ,    որոնք  իրենց  հերթին օգտագործում  են  ցածր  մակարդակի  գործողություններ:  Հեշ  ֆունկցիաներում  այսպիսի գործողությունների կիրառումը զգալիորեն նվազեցնում է հեշավորման արագությունը: Եթե բազմապատկման գործողության համար անհրաժեշտ է  4 ժամանակային ցիկլ, ապա sin գործողության համար այն կարող է հասնել 90 – 100 ժամանակային ցիկլ: ", "Սխալանքի  տիրույթը մեծացնելու համար կաշխատեցնենք հետևյալ մատրիցային եղանակը W մատրիցի համար: ", "Քաոսային  հեշ  ֆունկցիաները  կարելի  է  դասակարգել  տարբեր  դասերի՝  կախված իրենց քաոսային սխեմայից, հաշվարկների զուգահեռացման կարողությունից և այլն: Բայց հաշվի  առնելով,  որ  քաոսային  հեշ  ֆունկցիաները  հիմնված  են  քաոսային արտապատկերման վրա, հեշտությամբ կարելի է դասակարգել [55, 56]. •  արտապատկերման վրա հիմնված պարզ հեշ ֆունկցիաներ, •  արտապատկերման վրա հիմնված բարդ հեշ ֆունկցիաներ, •  նոր քաոսային համակարգի վրա   հիմնված հեշ ֆունկցիաներ, •  զուգահեռացում  ապահովող  և  բարդ  կառուցվածք  ունեցող  քաոսային  հեշ ֆունկցիաներ, •  քաոսային արտապատկերման միջոցով ձևափոխված դասական հեշ ֆունկցիաներ: "], "source_docs_file": "Informatics and Computer Systems.json", "paragraph_source_docs": [2, 0, 0, 1, 0, 2, 0, 1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 1, 0, 2, 0]}