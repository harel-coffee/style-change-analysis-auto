{"paragraphs": ["Բացի այդ, համաձայն գրականությանը, ըստ իրենց վարքագծի բնույթի և բջիջների մեջ  հայտնվելու,    դրսևորման  ձևի,  թերությունները  լինում  են  և  դասակարգվում  են որպես  «փափուկ»  և  «կոշտ»:  «Կոշտ»  (անգլերեն՝  “hard”  defect)  թերություն  է  անվավում այն  թերությունը,  որի  վարքագիծը  հաստատուն  է  և  չի  փոփոխվում  ժամանակի ընթացքում  նաև  հիշողության  սարքի  սնուցման լարումը  անջատել-միացնել գործողությունից  հետո:  «Փափուկ»  են  կոչվում (անգլերեն  “soft”  defect) այն թերությունները,  որոնք  հայտնվում  և  անհետանում  են  և՛  ՆՀՍ-ի  աշխատանքի ընթացքում  և՛  սարքի  սնուցման  լարումը  անջատել-միացնելու  գործողությունից  հետո [32-35]:  Ակնհայտ  է,  որ «փափուկ»  թերությունների  արդյունքում  հայտնված անսարքությունները  ժամանակավոր  բնույթ  են  կրում  և  անհետանում  են  հիշողության բջջում  այդ թերության  դրդապատճառը  վերանալու  հետ  միաժամանակ  [36-40]: ", "«Փափուկ»  անսարքությունների  հայտնաբերումը  կատարվում  է  նույն  ծրագրային միջոցների օգնությամբ, ինչ որ օգտագործվում են  «Կոշտ»  անսարքությունների համար: ", "Մինչդեռ «Փափուկ» և «Կոշտ» անսարքությունների ազդեցության հետևանքով վնասված - 90 - ՆՀՍ-ի  աշխատունակությունը  վերականգնելու  համար    կատարվող    մոտեցումները  և գործողությունները տարբերվում  են  մեկը  մյուսից  [7]:  Այս  ատենախոսության սահմաններում, մենք  դիտարկում ենք միայն «Կոշտ»՝ հաստատուն վարքագիծ ունեցող թերությունների հետևանքով առաջացած անսարքությունները: ", "Իրատեսական թերությունների մոդելները մշակելը և թերությունների գրադարանը ունենալու  մեկ  այլ  առավելություն  է  այն,  որ  այն  հնարավորություն  է  տալիս  ստուգել թեստային  ալգորիթմները  իրական  թերությունների  գրադարանի  սահմաններում: ", "Ներկայումս  թեստային  ալգորիթմների  և  թերությունների  մոդելների  բարդության աճման  պատճառով  դրանց  ստուգումը  առանց  հատուկ  ծրագրային  ավտոմատ միջոցների դառնում է անհնար [15]: ", "Այս  գլխում  ներկայացված  է  թերությունների  ներդրման  և  հիշողությունը թեստավորող  ալգորիթմը  ստուգող    (ԹՆևՀԹԱՍ)    ծրագրային  ԱՀ,  որի  նպատակն  է կատարել  թեստային  ալգորիթմների  աշխատանքի  ստուգումը,  գնահատել  այդ ալգորիթմների արդյունավետությունը՝ օգտագործելով տարբեր  տեսակի  իրատեսական թերությունների  մոդելներ,  որոնք  կարող  են  տեղադրվել  հիշողության  սարքի  բոլոր հանգույցներում՝  ստեղծելով  տարբեր  վարքագիծ  դրսևորվող  անսարքություններ: ", "Անհրաժեշտության դեպքում ԹՆևՀԹԱՍ ծրագրային ԱՀ-ը հնարավորություն է ընձեռում իրականացնել.  ա) թեստային  ալգորիթմների  աշխատանքի  ամբողջական արդյունավետության հաստատումը, բ) թեստային ալգորիթմների յուրաքանչյուր  Մարշ ալգորիթմի  տարրերի  առանձին  ստուգումը,  գ)  թեստային  ալգորիթմների  քայլ  առ  քայլ ստուգումը: ", "համակարգի կառուցվածքը և աշխատանքը ԹՆևՀԹԱՍ  ծրագրային ԱՀ-ը բաղկացած է հետևյալ ֆունկցիոնալ մասերից. ապահովում  է  հետազոտվող  թերություններ  պարունակող  բջջի/բջիջների  ներարկումը հիշողության  նմուշի  տոպոլոգիայի՝  GDSII  ձևաչափի  ֆայլի,  մեջ:  Թերությունների ներարկումը  իրականացվում  է  ֆիզիկական  մակարդակով՝  առանց  հաշվի  առնելու - 91 - հիշողության  նմուշի  կառուցվածքային  խճողումները (scramble):  Ներարկման արդյունքում  ստացվում  է  տոպոլոգիայի  մակարդակով  թերությունը  պարունակող՝ Թերությունների ներարկում  և Թերություններով կապերի ցուցակի` SPICE  ֆայլի բջիջների գրադարանը Հիշողության նմուշի տոպոլոգիան (GDSII ֆայլը) գեներացումը  (1) Անսարքություներով SPICE ֆայլի մոդելավորումը   (2) Մոդելավորման արդյունքների վերլուծումը  (3) Հետազոտվող թեստային ալգորիթմը Նմուշի կառուցվածքային խճողման ինֆորմացիան Ելքային ֆայլերի գեներացումը Նկար 3.1.   ԹՆևՀԹԱՍ  ծրագրային ԱՀ -ի ֆունկցիոնալ սխեման «արատավոր»  նմուշը:  Այդ  նմուշից  գեներացվում  է  SPICE  ձևաչափի  ֆայլը՝  թերություն պարունակող SPICE ֆայլը: ", "Ծրագրային  համակարգի  այս  հանգույցը գեներացնում  է. ա) հետազոտվող թեստային ալգորիթմը՝ վերաձևափոխելով այն SPICE մոդելավորմանը  համապատասխան  ձևաչափի;  բ)  մշակում  է  մոդելավորման աշխատանքի ընթացքում օգտագործվող պարամետրերը; գ) յուրաքանչյուր դիտարկվող թերության  համար  գեներացնում  են  մոդելավորման  համար  անհրաժեշտ  տվյալները: ", "Երբ SPICE ֆայլերի նախապատրաստման  աշխատանքը  ավարտվում է, մոդելավորման հանգույցը  սկսում  է  մոդելավորումը՝  օգտագործելով  թերությունների  դիմադրության տարբեր  արժեքներ, և,  անհրաժեշտության դեպքերում՝  անսարքությունների հայտնաբերման  համար  ստեղծելով  անհրաժեշտ  լրացուցիչ  սթրեսային  իրավիճակներ, կիրառելով մոտքային  պարամետրերի (սնուցման լարում,  աշխատանքային ջերմաստիճան,  աշխատանքային  հաճախականություն  և  այլն)  տարբեր  արժեքներ: ", "- 92 - Մոդելավորման արդյունքում ստացված տվյալների մշակումը կատարվում է ծրագրային ԱՀ-ի հաջորդ հանգույցում: ", "ստացված  մոդելավորման  արդյունքների  մշակումը,  կատարվում  է  արդյունքների վերջնական  վերլուծումը,  ելքային ֆայլերի  ստեղծումը:  ԱՀ-ի  աշխատանքի  այս հատվածում օգտագործվում է հիշողության նմուշի կառուցվածքային մոդելը: ", "Այս  աշխատանքում  ներկայացված  ԱՀԳ-ի  ստացման  մոտեցումը,  որը  ավելի մանրամասն նկարագրված է նկ․ 3.2. -ում, նպատակաուղղված է` արագացնելու ԱՀԳ-ի վրա  կիրառվող  հետագա  ռանգավորման  և  ֆիզիկական  կառուցվածքի  ստացման ալգորիթմների  աշխատանքը։  Ալգորիթմի  արագագործությունը հիմնականում ապահովվում է շղթաների և տարրերի անունների փոխարեն` նրանց id (identity number) ինքնության  համարների    կիրառմամբ,  որտեղ  id-ն  բնական  թիվ  է  և  ամեն  տարրի  կամ շղթայի համար եզակի է։ Բացի  id-երի ներմուծումից, արագագործության ապահովմանը ծառայում  են  նաև  զանգվածների  և  բինար  որոնման  բալանսավորված  ծառի  տեսքով տվյալների (տարրեր, շղթաներ․ ․ ․ ) նկարագրությունները։ ", "ծրագրավորման մեթոդի նկարագրությունը Թերություններ ներարկման այս եղանակը հնարավորություն է տալիս ավտոմատ ձևով  ներարկել  մեկ  կամ  ավելի  հետազոտվող  թերությունները՝  նմուշի  հիշողության բջիջների  մակերևույթի  տարբեր  դիրքերում:  Հհամեմատած  այն  եղանակի  հետ,  երբ հետազոտվող    թերությունը  տեղադրվում  է  SPICE  ձևաչափի  ֆայլում  անմիջապես հիշողության տարածքում թերություններ  ներարկելու մոտեցումը ունի մի քանի էական առավելություններ [41]: Առաջին առավելությունը այն է որ թերությունները ներարկվում են  հիշողության  տարածքի  նախապես  որոշված  հատվածում՝  որոշակի  համարի ֆիզիկական    տողում  և  սյունում:    Այս  որոշակիությունը  հետագայում  մշակման աշխատանքի  ընթացքում  հնարավորություն  է  ընձեռում  վերահսկել  հետազոտվող թեստային ալգորիթմի աշխատանքի յուրաքանչյուր քայլը, հետազոտման յուրաքանչյուր ժամանակային  հատվածում  և  մակարդակում:  Եկրորդ  առավելություն  է,  որ  ԱՀ  -ում հաճախականության    ժամանակացույցի  կիրառումը  հնարավորություն  է  տալիս.  ա) հաշվարկել թեստային  ալգորիթմի աշխատանքի  տևողությունը՝ BIST-ի աշխատանքային  հաճախականության  մասին  տվյալի  առկայության  դեպքում,  բ) - 93 - կատարել  թեստավորվող  ալգորիթմի    քայլ  առ  քայլ  կարգաբերումը,  որը  էապես լավացնում է ալգորիթմի կարգաբերման աշխատանքի գործընթացը [15], [17]: ", "•  Հիշողությունը  չի  անցնում  թեստավորումը:  Անսարք  սյուների  քանակն  ավելի շատ  է,  քան  առկա  է  հավել)սղության  մեջ:  Այս  դեպքում  սարքը  սարքը  չի վերանորոգվում: ", "Այս  ծրագրի  աշխատանքը  կատարվում  է  մի  քանի  հիմնական  դասերի  միջոցով՝ Graph (որը հենց մեր ԱՀԳ-ն է), Cell, Wire (5-րդ կետը)։ Ծրագիրը կարդում է փականային մակարդակի վերիլոգ ֆայլը և ստանում ԱՀԳ։ ", "Ինչպես  հետագայում    փորձերը  ցույց  տվեցին,  ԹՆևՀԹԱՍ    ծրագրային  համակարգի միջոցով  ներարկվող  թերությունների  քանակը  լիովին  բավարար  է  թեստավորման ալգորիթմների լիարժեք ստուգման համար: Թեստերի հետազոտման  աշխատանքների ընթացքում ստեղծվել են թերությունների բջիջների ամբողջական գրադարաններ, որոնք պարունակում  են  թերություններով    բջիջներ  տարբեր  տեխնոլոգիական  պրոցեսների համար: ", "Թերությունների ամբողջական գրադարանների առկայությունը հնարավորություն է ընձեռում լիարժեք ստուգել թեստավորման ալգորիթմները [41-44]: ", "ա. xxxxxxxx xxxxxxxx բ. xxxxxx1x xxx1xxxx xxxxxxxx xxxx10xx xx0xxxxx գ. Նկար 3.2.   ԾՕ ֆայլերի օրինակները - 94 - Նկար 3.2-ում ներկայացված են  ծրագրավորման ֆայլերի օրինակները, որոնք ստեղծվել են 4 տող և 8 սյուն ունեցող հիշողության բջիջների զանգվածի համար: Նկարի հիշողության  զանգվածը  ներարկված  է  «1»  տեսակի  թերություններով:  Նույն    ձևով՝  բ. օրինակին համաձայն, զանգվածում ներարկվելու են «0» տեսակի թերություններով: Իսկ գ. օրինակում ներկայացված է դեպք, երբ  «0» տեսակի թերությունները ներարկվելու են ներարկվելու են երեք բջիջներում՝ 7-րդ տողի 5-րդ սյան մեջ, 2-րդ տողի 4-րդ սյան մեջ և ներդրվում են հարևան բջիջներում: Թերությունների այդ տեսակ դիրքավորումը կարող է  բերել  յուրահատուկ  վարքագծով  անսարքությանը  և  լրացուցիչ  ստուգման  գործոն հանդիսանա  թեստային  ալգորիթմի  համար:  «1»  և  «0»  տեսակի  թերությունների օրինակներ են հանդիսանում առաջին գլխում նկարագրված, «ծրագրավորող» բջիջները (Տես՝  նկ.  1.25  և  նկ.  1.26):  Այս    «ծրագրավորող»  բջիջների  կիրառումը  ԹՆևՀԹԱՍ ծրագրային ԱՀ -ում համարժեք է «Stacked 0»  և «Stacked 1»  տեսակի անսարքությունների ներդրմանը հիշողության զանգվածի բջիջներում: ", "Նկար  3.3-ում  ներկայացված  է  մեխանիկական  (manual)  ձևով  ներարկված թերության  օրինակը,  որը  ներարկվել  է  հիշողության    բջիջում,  որի  արդյունքում    բաց Նկար 3.3.   ՀՍ-ի  բջջի տոպոպոլոգիայում բաց դիմադրողական թերության օրինակը - 95 - դիմադրությամբ անսարքություն է հայտնվում հիշողության զանգվածի բջիջում: ", "Հիշողության  մակերևույթում  թերությունների  մեխանիկական  ներարկման մեթոդը կիրառվում է այն դեպքերում, երբ ա) հետազոտվող թերությունը անհրաժեշտ է ներարկել հիշողության սարքի  հիշողության բջիջների զանգվածի սահմաններից դուրս՝ հիշողության  այլ  հանգուցներում;  բ)  ներդրվող  թերությունը  ունի  բարդ  կառուցվածք,  և այդ  թերությունը  ստանալու  համար  պետք  է լինում  բջիջի  տոպոլոգիայում մեխանիկական  ձևով  կատարել բարդ  ձևափոխություններ:  Բնականաբար, օգտագործվող  թեստային  ալգորիթմը  պարտավոր  է  հայտնաբերել  այդ  հանգույցներում գտնվող թերությունները ևս: ", "Ներդրված թերությունը Նկար 3.4.   Տողերի ապակոդավորման բջիջի տոպոլոգիայում ներարկված «դիմադրության բաց» թերություն Նկար    3.4-ում  տրված  է  թերության  ներդրման  օրինակ  տողերի    ապակոդա- վորման  հանգույցում՝  ազդանշանի ժամանակային  ուշացման վարքագծով անսարքություն  ստանալու  համար:  Ներարկման  արդյունքում  «pnt1»  և  «pnt2»  կետերի միջև  ընկած  դիմադրողական  անսարքության  մոդելը  հնարավորություն  է  ընձեռում մշակել, ստուգել և հղկել այդ անսարքությունը հայտնաբերող թեստային ալգորիթմը: ", "նկարագրության ձևը ԹՆևՀԹԱՍ  ծրագրային ԱՀ-ի աշխատանքի հիմնական նպատակն է վավերացնել ՀՍ-ում օգտագործվող  թեստային  ալգորիթմի ներարկված  անսարքությունը հայտնաբերելու  ունակությունը:    ՆՀՍ-երում  կիրառվում  են  Մարշ  տիպի  թեստային - 96 - ալգորիթմներ:  Թեստային  ալգորիթմը մուտքային  տվյալ է հանդիսանում մոդելավորման  հանգույցի  համար:  Օգտագործվող  Մարշ  թեստային  ալգորիթմը փոխանցվում  է  ծրագրային  հոսքին    առանձին  ֆայլի  միջոցով    և  բաղկացած  է  երեք պարտադիր տարրերից: ", "հասցեավորման ձևերը հետևյալն են.   U  (անգլերեն  -  Upward  addressing)  –  Ներքևից  դեպի  վերև  հասցեավորում:  Այս հասցեավորմամ ժամանակ  թեստավորումը սկսվում  է զրոյական  հասցեից և աճելով շարունակվում  հասնում    է  հիշողության  նմուշի  վերջին    առավելագույն  (maximal)   D  (անգլերեն - Downward addressing - reverse to U)՝ – Վերևից դեպի ներքև՝ հակառակ է հասցեին, U հասցեավորման ձևին: ", "Աղյուսակ 4.2. Ելքային նեյրոնների սխալները բոլոր ազդանշանների համար Նեյրոնի № Sine Triangle Square Sawtooth Աղյուսակ  4.2-ում  բերված  տվյալներից  երևում  է,  որ  ստացված  սխալների  չափերը շատ փոքր են, ինչը վկայում է նրա մասին, որ ուսուցումը արդյունավետ է անցել բոլոր ազդանշանների տեսակների համար: "], "paragraph_source_docs": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3], "source_docs_file": "Control, Automation and Electrical Engineering.json"}