{"paragraph_source_docs": [1, 2, 1, 2, 1, 1, 2, 0, 0, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 0, 2, 1, 1, 0, 2, 0, 1, 1, 0, 1, 2, 1, 1, 2, 1, 2, 2, 0, 0, 1, 2, 2, 1, 0, 1, 1, 1, 0, 0], "source_docs_file": "Informatics and Computer Systems.json", "paragraphs": ["-ի 𝑃𝑃𝑃𝑃𝑠𝑠 𝑃𝑃𝑃𝑃𝑖𝑖 ելքային  արժեքը  կարող  է  օգտագործվել  որպես մուտքային  արժեք 𝑃𝑃𝑃𝑃𝑖𝑖 հետագայում,  կամ  նեյրոնային  ցանցից  որպես  ելքային  արժեք: ", "Քանի  որ  այգորիթմը  աշխատում  է  ուղիղ  ռեժիմով  նկարահանմանը  զուգահեռ, այն  կստանա  նոր  պատկերը,  որում  առկա  է  օբյեկտը  և  կկիրառի  XOR  բիթային համենատություն  սկզբնական  պատկերի  նկատմամբ:  Հետևաբար,  կստանանք  Նկար Նկար 2.3․ XOR բիթային համենատության արդյունքը: ", "Նկատենք,  որ շեմը  գործում  է  որպես  մուտքային  ազդանշանների  ֆիլտր: ", "Դիտարկենք այն դեպքը, երբ օբյեկտը հայտնվում է պատկերում նկարահանումը սկսելուց  ոչ  թե  սկզբում,  այլ  երկար  ժամանակ  անց(օր.  4  ժամ  անց),  երբ  պատկերում արևի  պայծառության  փոփոխության  պատճառով  բոլոր  պիքսելների  գունային արժեքները  փոխված  են:  Այս  դեպքում  XOR  բիթային  համենատության  արդյունքում վերադարձվում  է  0  բոլոր  պիքսելների  համար,  և  արդյունքը  կստացվի  լիովին  սև պատկեր,  օբյկետը չի  հայտնաբերվի:  Այսպիսով՝  ցանկացած  եղանակային փոփոխություն դեպքում մեթոդը չհայտնաբերելով օբյեկտը, չի ծառայի իր նպատակին: ", "𝑃𝑃𝑃𝑃 Մուտքերի  արդյունքում  ստացված արժեքը  փոխակերպվում  է -ի 𝑓𝑓𝑖𝑖 ելքային  ֆունկցիայի  միջոցով,  որը  որոշում  է  ընթացիկ  ազդանշանի  մեծությունը: ", "𝑃𝑃𝑃𝑃 𝑎𝑎𝑖𝑖 Նեյրոնային  ցանցեր  կառուցելու  համար  օգտագործվել  են  մի  շարք  ակտիվացման ֆունկցիաներ,  որոնցից  քայլ/step  ֆունկցիան  ամենապարզն է:  Քայլ/step ակտիվացիոն  ֆունկցիայի  միջոցով -ի  ելքային  տվյալները  կարող  են  ընդունել կամ կամ ,  կախված  ակտիվացիոն  ֆունկցիայի  արժեքից  ցածր  կամ  բարձր 𝑃𝑃𝑃𝑃 լինելուց (Նկար 32): Այլ կերպ ասած, ունենք հետևյալը. 𝑦𝑦𝑖𝑖 = � որտեղ եթե հակառակ դեպքում 𝑎𝑎𝑖𝑖 > 0 𝑢𝑢 𝑎𝑎𝑖𝑖 = �� 𝑤𝑤𝑖𝑖𝑗𝑗𝑥𝑥𝑗𝑗 − 𝑠𝑠𝑖𝑖 Այնուամենայնիվ, աղմուկը  զտելու համար, հետևաբար բարելավվելու և իրական 𝑗𝑗=1 կայուն  վիճակի  հասնելու  նկատառումներով  որոշ  նեյրոնային  ցանցերի  համար սովորաբար օգտագործվում է սիգմոիդ ակտիվացումը, արտահայտված Նկար 33-ի ձևով. որտեղ 𝑦𝑦𝑖𝑖 = 𝑓𝑓𝑖𝑖(𝑎𝑎𝑖𝑖) = −𝑐𝑐𝑎𝑎𝑖𝑖 𝑢𝑢 𝑗𝑗=1 𝑎𝑎𝑖𝑖 = �� 𝑤𝑤𝑖𝑖𝑗𝑗𝑥𝑥𝑗𝑗 − 𝑠𝑠𝑖𝑖 Նկար 32.Քայլ/Step ակտիվացիոն ֆունկցիա: ", "Պատկերի չափերը նշանակենք -ով, իսկ մասերի չափերը՝ -ով։ ", "Շարժական բանալուն հարցում ուղարկող կողմը ունենալով նույն գաղտնի բանալին կարող  է  հաշվարկել -ն։  KFI  արժեքի  հաշվարկը  բերված  է  ստորև,    որտեղ դա 𝐶𝐶𝑘𝑘 կատարվող հրամանի համարն/ինդեքսն է, իսկ ընդհանուր հրամանների քանակն է։ ", "𝐶𝐶𝑖𝑖 Մինչ  հարցում  ուղարկելը  նաև  գեներացվում  է  պատահական  ascii ∗ 𝐶𝐶𝑁𝑁 KFI  = (𝐶𝐶𝑘𝑘 ∗ 𝐶𝐶𝑁𝑁) ⊕   𝐶𝐶𝑖𝑖 ∶ սիմվոլներից  բաղկացած  10  բիթ  երկարությամբ  SALT-ը  և  կատարվում  է  հրամանի հեշավորում  օգտագործելով  KK  բանալին։  Որպես  հեշավորման  հաղորդագրություն օգտագործվում  է  Ci  հրամանի  SALT-ի  միավորումը,  որը  բացառում  է  հեշ  արժեքի  կապի բացահայտումը։ Ստացված հեշը, KFI և SALT-ը ուղարկվում է շարժական բանալուն։ ", "(2.1) որտեղ , . և  r,g,b-ին  համապատասխանաբար  կարմիր,  կանաչ, կապույտ գույների ինտենսիվությունն է: ", "Դիտարկված  նեյրոնային  ցանցերում  կա  միայն  մեկ  մակադակի  թաքնված շերտ  (Նկար  34),  որի  նեյրոնների  քանակությունը  տարբերակվում  է  նշված համեմատական անալիզներում: ", "Նկար 34.Մշակված նեյրոնային ցանցի օրինակ 12 թաքնված նեյրոնով: ", "կստանանք բանաձև 2-ի միջոցով, 2-րդի համար՝ բանաձև 3-ի, 3-րդի համար՝ բանաձև (2.2) (2.3) (2.4) (2.5) Պատկերի  համար  կախված  տեղանքից  և  հնարավոր  եղանակային փոփոխություններից՝  որոշվում  է  σ  ընդհանուր  շեմային  գործակիցը  տեսախցիկը առաջին անգամ տեղադրելիս: ", "Ինչպես նշվեց բաժին 1.4-ում, արդեն գոյություն ունեն որոշակի ալգորիթմներ կլաստերային համակարգերում առաջադրանքների տեղաբաշխումը ավազակույտի մոդելի  հիման  վրա  կառուցված:  Մեր  կողմից  ստեղծված  SandScheduler  [46] ծրագրային  փաթեթն  իրենից  ներկայացնում  է  կլաստերային  համակարգերի աշխատանքը  սիմուլացնող  և  տեսաբերող  ծրագրային  փաթեթ,  որտեղ  խնդիրների բաշխիչի  աշխատանքը  հիմված  է  ոչ  միայն  ավազակույտի,  այլև  rotor-router համակարգի հիման վրա: ", "Նշենք,  որ  առաջարկվող  մոդելը  հանդիսանում  է  ապակենտրոնացված համակարգ,  այսինքն՝  չկա  կենտրոնացված  կառավարող  մոդուլ,  և  ամեն  մի հանգույց յուրովի որոշում է կայացնում, որը կարող է ազդել հարևան հանգույցների վրա: ", ", (2.6) (2.7) -ն եռաչափ վեկտոր է (բանաձ 2.8): ", "Կլաստերային  համակարգի  սիմուլացիան  կատարվել է  երկչափանի քառակուսային  ցանցի  վրա,  որտեղ  ամեն  հանգույց  իրենցից  ներկայացնում  են առանձին  հաշվողական  բլոկ,  այլ  կերպ  ասած  համակարգիչ  իր  առանձին հիշողության  տիրույթով:  Կախված  տվյալ  հանգույցում  առաջադարանքների ծանրաբերնվածության,  տվյալ  հանգույցն  է  որոշում  ուղարկել  առաջադրանքը հարևան  հանգույցներից  մեկին  թե  ոչ:  Դիտարկված  մոդելում  գոյություն  ունեն հետևյալ նախապայմանները. •  Մոդելում ունենք նախորոք մուտքագրված քանակությամբ քառակուսային  ցանցի  տեսք  ունեցող  համասեռ  հանգույցները, այսինքն  հանգույցներում  տեղադրված  հիշողության  տիրույթները, պրոցեսսները,  օպերատիվ  հիշողությունները  և  մնացած  բոլոր տեխնիկական պարամետրները նույն են: ", "•  Ամեն հանգույց ունի «հասանելի»  տիրույթ առաջադրանքների համար, որտեղ կարող են  տեղավորվել վերջավոր քանակությամբ խնդիրներ(տվյալ  դեպքում  ամենաշատը  3  առաջադրանք),  և առաջադրանքի տեղավորվելուն պես այն դիտարկվում է որպես արդեն կատարվող:  Եթե  հանգույցի  «հասանելի»  տիրույթում  կան  3 արաջադրանքներ,  ապա  համարվում  է,  որ  տվյալ  հանգույցը աշխատում է միաժամանակ այդ 3 առաջադրանքների իրականացման շուրջ: ", "-ում  յուրաքանչյուր  պիքսել  արժեքվ  շատ  մոտ  է  համապտասխան  պիքսելին  A պատկերում: ", "երկու եղանակով. Ինչպես արդեն նշվել է, առաջադրանքների տեղաբաշխումը կատարվում է մոդելի  աշխատանքային սկբունքի, որի դեպքում համակարգում  առաջադրանքների  տեղաբաշխումը կատարվում է ավազակույտում  ավազահատիկների  փլուզման  սկզբունքով:  Ավազակույտի մոդելում  ինչպես  արդեն նշվել է ամեն հանգույցին համապատասխանեցված է  արժեք,  որը  համապատասխանում  է  այդ  հանգույցում  ավազահատիկների քանակին:  Բակը,  Թանգը  եւ  Ուիզենֆիլդը  դիտարկել  են  ցանցի  վրա ավազահատիկների  պատահական  տեղադրման  գործընթացը  ցանցում: ", "HTTPS արձանագրության մեջ օգտագործվող AES ալգորիթմի արագացման համար օգտագործվել  են  Intel  AES-NI  լրացումները,  որը  թողարկվել  է  հատուկ  Intel  ընկերության պրոցեսորների,  մասնավորապես՝  շարժական  բանալու  սարքի  համար։  Շնորհիվ  այդ լրացումների  հնարավոր  է  AES  ալգորիթմում  օգտագործվող  հաշվողական  մի  քանի հրամաններ  կատարել`  օգտագործելով  ընդամենը  մեկ  հատուկ  հրաման:  Հատուկ հրամաններից  են  ՝  AESENC(AES  Encrypt  Round),  AESENCLAST  (AES  Encrypt  Last  Round), AESDEC  (AES  Decrypt  Round),  AESDECLAST(AES  Decrypt  Last  Round),  AESKEYGENASSIST (AES Key Generation Assist), AESIMC(AES Inverse Mix Columns): ", "(2.9) Եթե անհավասարությունը բավարարվում պայմանին, այսինքն՝ անհավասարության ձախ մասը մեծ է σ գործակցից, ապա E-ի i,j պիքսելը ունի զգալի շեղում  A-ի  i,j  պիքսելից,  որը  և  նշանակում  է,  որ  այդ  պիքսելը  հանդիսանում  է հայտնված  օբյեկտի  պիքսել:  Այդ i,j  պիքսելին  համապատասխան  պիքսելը  D պատկերում  ստանում  է  0,  0,  0  արժեքը  ( =  (0,  0,  0)),  այսինքն՝  սևացվում  է: ", "դատարկ/ֆիկտիվ  առաջադրանքներից իրական  առաջադրանքների բաշխման նկատառումներով: Տվյալ դեպքում ցանցի ամեն հանգույց ունենում է  ուղղորդիչ  բնորոշ  rotor-router  մոդելին  և    իրական  առագադրանքը  մուտք լինելով որևէ հանգույցի, զբաղեցնում է տվյալ հանգույցի հասանելի տիրույթը վերջինիս  ազատ  լինելու  դեպքում,  կամ  տեղափոխվում  է  հարևան  հանգույց ըստ տվյալ հանգույցի ուղղորդիչի ուղղության: Այս գործողությունը կրկնվում է այնքան  մինչև  առաջադրանքը  կգտնի  ազատ  հանգույց  և  կզբաղեցնի համապատասխան  տիրույթը:  Հիշեցնեմ  որ  փակ  rotor-router  համակարգում ավազահատիկը  պտտվելով  վերջավոր  քանակությամբ՝  անցում  է  կատարում բոլոր  հանգույցներով  և  վերադառնում  է  հին  դիրքին,  ինչպես  նաև վերադառնալուն պես մոդելը արդեն ընդունած է լինում սկզբնական վիճակը: ", "Ինչպես  նաև  անդրադառնալով  rotor-router  համակարգի  բաժին  2,3-ում նկարագրված  առանձնահատկությանը,  կարող  ենք  համոզված  լինել,  որ ստատիկ(կատարման  ժամանակը  անվերջ  է)  առաջադրանքների  մեկ  կետից ավելացման  դեպքում  կլաստերային  համակարգում  կունենանք  համասեռ բաշխվածություն  տվյալ  հանգույցի  շուրջ,  կամ  այլ  կերպ  ասված,  մեկ հանգույցում  առաջադրանքներ  ավելացնելու  դեպքու  կարող  ենք  համոզված լինել,  որ  տվյալ  հանգույցից հեռավորություն  ունեցող  հանգույցում  լցված առաջադրանքների քանակը չի կարող ավել լինել հեռավորության վրա գտվնող  հանգույցի  առաջադրանքների  քանակից:  Ասեմ  ավելին  մեր  կողմից r − 1 առաջ է քաշվել հիպոթեզ, որ դինամիկ(կատարման ժամանակը վերջավոր է) խնդիրների  դեպքում  ևս  կունենանք  նույն  պատկերը:  Տրված  հիպոթեզի իսկությունը երևում է SandScheduler ծրագրային համակարգի միջոցով նկար Նկար 36. SandScheduler-ը rotor-router վիճակում: ", "•  Հիմնվելով իրերի ինտերնետ միջավայրում իրերի բնութագրերի վրա՝  առաջարկվել է  բանալիների  կառավարման  անվտանգ  սխեմա՝  տարատեսակ  իրերի  միջև  անլար կապի հաստատման համար: ", "Նկար 2.7․  Երեք օբյեկտների առկայությունը ներկայացված կարմիր շրջանակներում, պատկերում: ", "•  Հիմնավորվել  է,  որ  ընտրման  գործընթացից  անմիջապես  հետո  ծառայության հանգույցները  գեներացնում  են  բանալիների  ենթակառուցվածք՝  համապատասխան աշխատանքային  հանգույցների  համար:  Արդյունքում  աշխատանքային  հանգույցների զույգերը հաշվարկում են ընդհանուր բանալին։ ", "տեղաբաշխումը  կատարում  է  ավազակույտի  մոդելի  աշխատանքային սկզբունով,  իսկ  նշված  դեպքում  կիրառվում  է rotor-router  մոդելի սկզբունքները: ", "ստեղծելով նշված քանակությամբ մատրիցներ, և վերջում տպում է ստացված միջին արդյունքները ՛Statistics' բաժնում գումարների հարաբերությունը ընդհանուր վանդակների թվին ավազահատիկներ պարունակող վանդակների գումարների հարաբերությունը ընդհանուր վանդակների թվին տակտերի  քանակը  և  մկնիկի  քլիքի  միջոցով  ավելացվող  խնդիրների քանակը լռությամբ որքան կարևոր են մուտքագրվող խնդիրները Նկար 38.SandScheduler համակարգի տեսքը: ", "ԲԱՇԽՎԱԾ ՑԱՆՑԵՐՈՒՄ ԳՈՐԾԱՌՈՒՅԹՆԵՐԻ ԱՄԲՈՂՋԱԿԱՆՈՒԹՅԱՆ ՈՒ ԱՆՎՏԱՆԳՈՒԹՅԱՆ ԱՊԱՀՈՎՄԱՆ ՄԵԹՈԴԻ ՄՇԱԿՈՒՄ արձանագրության մշակում Իրերի ինտերնետ միջավայրը  տարատեսակ իրերից բաղկացած բաշխված ցանց է, որի կողմից տրամադրվող գործառույթը/ծառայությունն  իր հերթին բաղկացած է տարբեր իրերի կողմից կատարած գործառույթներից։ Վերոնշյալ բաշխված ցանցի կառավարումը, գործառույթների հաջորդականության վերահսկումը և գործառույթների ամբողջականության ապահովումը  կարևոր  խնդիր է ։ ", "Տվյալ  դեպքում  տվյալ  հանգույցի  հարևանները  ավտոմատ  կերպով  ինֆորմացվում են  դրա  անսարքության  մասին  և,  հիմնվելով  ավազակույտի  մոդելի  փլուզումների տրամաբանությանը,  հասկանում  ենք  որ  առաջադրանքների  տեղաշարժ  դեպի վթարված  հանգույց չի լինում:  Միաժամանակ  ընդհանուր  կլաստերային համակարգը  շարունակում  է  աշխատել  սովորականի  պես  առանց  որևէ  խնդրի, բացառությամբ իհարկե վթարված հանգույցներում իրականացվող առաջադրանքների կորստի (Նկար 39): ", "Տեսաշարի  ընթացիկ  պատկերի  մատրիցի  ձևափոխության  արդյունքում ստացված բուրգի հիմքը մատրիցն է․ , (2.10) իսկ պատկերի փոքրացման՝ բուրգի մի շերտից մյուսի անցման արդյունքում ստացված մատրիցի տեսքը հաշվվում է հետևյալ բանաձևով․ (2.11) որտեղ -ը  տեսաշարի  ընթացիկ  պատկերի  մատրիցն  է, -ը  բուրգի զրոյական  շերտն  է՝  հիմքը, պատկերի  վրա  կիրառվող  գործողությունների գործակիցն  է  (grayscale,  blur), -ն  բուրգի  շերտերի  քանակն  է, -  պատկերի  չափերի փոքրացման գործակիցն է։ ", "Եզրակացություն երրորդ գլխի վերաբերյալ Այս  գլխում  նկարագրվեցին  CA  Simulator,  SandGame,  SandScheduler ծրագրային փաթեթները, ինչպես նաև նկարագրվեցին «մինիմում ավազահատիկներ և մաքսիմալ հեռավորություն» խնդրի լուծմանը նպատակաուղղված մշակված նեյրոնային ցանցերը: ", "CA  Simulator  համակարգը  իր  լուրջ  ֆունկցիոնալ  հնարավորություններով ավելի  դյուրին  կդարձնի  ավազակույտի  մոդելի  ուսումնասիրությունները,  ինչպես նաև  հնարավորություն  կնձեռնի  տարբեր  աշխատահգրական  դիրքերում  գտնվող օգտագործողներին կատարել հետազոտություններ միասին միևնույն մոդելի վրա: ", "Օբյեկտների  հայտնաբերումը․ Դիտարկվում  է ցանցի յուրաքանչյուր կետ, եթե կետի  գունային  {R,G,B}  արժեքը  տարբերվում  է  ֆոնից,  ապա  այն  հանդիսանում  է օբյեկտի  կետ։  Տվյալ  կետի  համար  դիտարկվում  են  8  հարևան  կետերը  և համեմատվում ֆոնային պատկերի հետ (նկար 2.11): ", "SandScheduler  ծրագրային  փաթեթի  միջոցով  հնարավոր  է  ուսումնասիրել ավազակույտի  և  rotor-router  մոդելների  պիտանելությունը  և  կարևորությունը կլաստերային  համակարգերում,  և  դրանց  առավելությունների  մեջ  համոզվելու դեպքում կարելի է արդեն SandScheduler-ում բաշխիչի նկարագրված  աշխատանքը իրականացնել իրական կլաստերային համակարգերում: ", "Մեթոդի  արագագործությունը  ուղիղ  համեմատական  է  կատարվող  ընդհանուր պիքսելային ստուգումների հետ։ ", "(2.12) որտեղ -ը  ֆոնում  առկա  օբյեկտների  քանակն  է, -ը  մշակված  մեթոդում յուրաքանչյուր  պիքսելի  համար  A-H  ստուգումների  քանակն  է, -ը  պատկերի չափերը, –ը  նմուշի  չափերը,  իսկ -ը  ալգորիթմի  բարդությունն  է,  որը  իրենից ներկայացնում  է  էտալոնային  և  ձևափոխված  պատկերների  միջև  պիքսելային համեմատումների ընդհանուր քանակը: Բանաձևից երևում է, որ -ը զգալիորեն փոքր է,  քան -ը  և    առաջին  գլխում  նկարագրված  նմուշային  համապատասխանեցման ալգորիթմի՝ բարդությունը։  Հետևաբար,  օբյեկտի  հայտնաբերման  համար  մշակված իտերացիոն մեթոդը  արագագործ է նախորդ մեթոդների  համեմատ, որը հետագայում կապացուցվի նաև փորձերի միջոցով։ ", "Lstart = L0 + L1 +···+ Li-1,  Lend = Lstart + Lend,           D(Ni) = Lstart, …, Lend                               (3.1) Հարցում ուղարկող հանգույցը գտնվում է D–1 կամ D +1 խորության վրա, որտեղ D- ն տվյալ հանգույցի խորությունն է։ Նկարագրած ձևաչափի կիրառումը հնարավորություն է տալիս ապահովել ինտերնետ իրերին պատկանող տեղեկատվական անվտանգությունն այլ ինտերնետ իրերից։ ", "Սխալների  հայտնաբերումը  և  գործառույթների  չեղարկումը    կատարվում  է՝ հիմնվելով գաղտնագրված տեղեկատվության վերծանման արդյունքի վրա։ Ինչպես նշվել է, ինտերնետ իրերին պատկանող տեղեկատվության վերծանման համար անհրաժեշտ է D–1 ինտերնետ իրերին պատկանող բաց տվյալի հեշը և տվյալ ինտերնետ իրի բանալին։ ", "Դիտարկենք ներկայացված «CA Simulator» ծրագրային  փաթեթի գործարկման  արդյունքների և  գոյություն  ունեցող լուծումների  միջև տարբերությունը: Մասնավորապես, դիտարկվել է NetLogo միջավայրը, որը, լինելով բազմաագենտ  համակարգերի  ծրագրավորման  միջավայր  և  ունենալով  հարուստ գրադարան,  ամենահայտնի  և  ֆունկցիոնալ  առումով  ամենահարուստն  է  մինչև այժմ  գոյություն  ունեցող  լուծումների  միջև:  Այնուամենայնիվ  «CA  Simulator»-ը, օժտված  լինելով  բազում  ֆունկցիոնալ  հատկություններով,  ոչ  միայն  լրացնում  է ամենահայտնի  լուծումներում  հանդիպող  բացթողումները,  այլ  և  ներառում  է,  բայց չի  սահմանափակվում  արդի  լուծումների  ֆունկցիոնալ  հնարավորություններով, ինչպիսիք են, օրինակ՝ բազմաօգտատեր միջավայրի ապահովումը գլոբալ ցանցում, եռաչափ  ցանցի  կառուցումը  և  տեսաբերումը,  ինչպես  նաև  տեսաբերվող  ցանցի դիտման  անկյունների  փոփոխությունները,  դիտարկվող  ցանցի  շերտերի  և ենթամասերի  առանձակի  տեսաբերումը,  մոդելի  ինչպես  կետային,  այնպես  էլ մասնակի փոփոխությունները պատահական  և կոնկրետ սկզբունքով, ֆիզիկական և ինֆորմացիոն բնութագրիչների հաշվարկը և այլն: ", "Տեսահսկման  համակարգերում  շատ  հաճախ  տեսախցիկի  տեսադաշտում հայտնվում  են  դիտարկվող  օբյեկտներից (թիրախներից)  զատ  այլ  օբյեկտներ (անվանենք  կեղծ  թիրախներ),  որոնք  դիտարկման  համար  հետաքրքրություն  չեն ներկայացնում  և  խանգարում են իրական օբյեկտների հայտնաբերմանը: ", "Ատենախոսական  աշխատանքի  նպատակներից  մեկն  է  նախօրոք  հաշվի  առնել  կեղծ թիրախների հնարավոր  առկայությունը՝  այնուհետև դրանց  պատկերից զատելու(անտեսելու) նպատակով: ", "Այսպիսով, եթե կատարենք համեմատական վերլուծություն  արդի համակարգերի և «CA Simulator»-ի միջև ապա կունենանք Աղյուսակ 1-ի պատկերը: ", "Հարկ է նշել, որ ցանցով տվյալների և հրահանգների փոխանակման առաջարկվող գործընթացը հաջորդական է և ենթադրում է սեսսիոն  բանալիների ենթակառուցվածք, որը բաշխում է սեսսիոն բանալիները՝ ծառի մակարդակներին համապատասխան։ ", "Հիմնվելով  բաժին  2,1-ում  նկարագրված չափանի  խորանարդային ցանցերում  աստղային  ծածկույթները  նկարագրող  բանաձևի  վրա,  կատարվել  է չափանի խորանարդային ցանցերում ավազակույտի աբելյան մոդելի աշխատանքի զուգահեռացումը:  Ինչպես  նշվել  է  բաժին  1,2-ում,  արդեն  գոյություն  ունեն ավազակույտի    մոդելի  սիմուլացիայի  արագագործությանը  նպատակաուղված ծրագրային փաթեթներ: ", "Առաջարկվող լուծման հիմքում ընկած է զուգահեռ ծրագրավորման և խնդրի զուգահեռացման  մեթոդաբանությունը:  Տարաբնույթ  հաշվարկների  զուգահեռ իրականացումը  թույլ է տալիս առավել մեծ ու բարդ խնդիրները  տրոհել մասերի և այն  հաշվարկել  իրարից  անկախ  գործողություններով,  դրանք  իրականացնելով միաժամանակ։  Խնդիրների  լուծման  նման  մոտեցումը  մարդկությանը  հայտնի  էր վաղուց,  սակայն  նրա  հանդեպ  հետաքրքրվածությունը  մեծացավ  միայն  վերջին տասնամյակում,  երբ  սկսվեցին  արտադրվել  մեկից  ավելի  պրոցեսորներ  ունեցող համակարգիչներ և մշակվեցին մեթոդներ ցանցային ծրագրավորման զարգացման համար՝ այսինքն իրական հնարավորություններ  ստեղծվեցին որևէ խնդրի իրարից անկախ  մասերը  զուգահեռ  լուծել՝  օգտագործելով  մի  քանի  պրոցեսորներ։  Իսկ քանի  որ  արդեն  աշխարհում  բոլոր  համակարգիչները  բազմապրոցեսոր  են,  դա նշանակում է, որ մինչ այս միայն մեկ հաշվարկող պրոցեսորի համար նախագծված բոլոր ալգորիթմները կորցնում են իրենց արդիականությունը, եթէ դրանք կարելի է լուծել զուգահեռացված տարբերակով։ ", "Ավազակույտի  աշխատանքի զուգահեռացման  արդյունքում որոշ հանգույցներ  պետք  է  փլուզվեն  միաժամանակ։  Առաջարկվող լուծումներում դիտարկվում  է  2  տարբերակ․  առաջինը,  որ  միաժամանակ  փլուզվող  գագաթները կարող են ունենալ ընդհանուր հարևաններ, և երկրորդ՝ չունեն ընդհանուր հարևան։ ", "Այսպիսով,  առաջարկվել  են  իրերի  ինտերնետ  միջավայրի  համար  մշակված արձանագրությունը, ձևաչափը, որն ունակ է տեղեկություն հաղորդել այլ հանգույցների՝ տվյալ  հանգույցում  անոմալիաների    իրազեկման  համար  և  արգելակել  ամբողջ համակարգի  աշխատանքը՝  թույլ  օղակի  գործոնով    բացառել  համակարգի  հետագա գործողությունը։ Առաջարկված մեթոդը, որպես հեշային ֆունկցիա կարող է օգտագործել ցանկացած գաղտնակայուն հեշ ֆունկցիաներից մեկը, բայց հաշվի առնելով ինտերնետ իրերի  առանձնահատկությունների  փաստը,  առաջանում  է  գոյություն  ունեցող  հեշ ֆունկցիաները  հետազոտելու  և  տվյալ  մեթոդին  համապատասխան  հեշ  ֆունկցիա գտնելու անհրաժեշտություն։ ", "Տեղեկատվության  անվտանգության  ապահովման  համար  կարևոր  նշանակություն ունի hեշ ֆունկցիաների կիրառումը: Տվյալ ոլորտում առաջարկված  լավագույն լուծումներից կարելի  է  առանձնացնել    քաոսային  տեսության  վրա  հիմնված  հեշ  ֆունկցիաները:  Այդ ֆունկցիաներն  օգտագործում  են  միաչափ  արտապատկերումներ,  ինչպիսիք  են լոգիստիկային և տենտային արտապատկերումները, կամ կիրառում են բարդ բազմաչափ արտապատկերումներ, որոնք, որպես կանոն, անվտանգ չեն և  հիմնականում հեշտությամբ են  գրոհի ենթարկվում [45]։ "]}